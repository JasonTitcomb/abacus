<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="../../../Generate.t4"#>
// ┌────────────────────────────────────────────────────────────────────────┐ \\
// │ Abacus - Fast, efficient, cross precision, maths library               │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Brought to you by:                                                     │ \\
// │          _________                    .__               __             │ \\
// │         /   _____/__ __  ____    ____ |__|____    _____/  |_           │ \\
// │         \_____  \|  |  \/    \  / ___\|  \__  \  /    \   __\          │ \\
// │         /        \  |  /   |  \/ /_/  >  |/ __ \|   |  \  |            │ \\
// │        /_______  /____/|___|  /\___  /|__(____  /___|  /__|            │ \\
// │                \/           \//_____/         \/     \/                │ \\
// │                                                                        │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright © 2013 A.J.Pook (http://sungiant.github.com)                 │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Permission is hereby granted, free of charge, to any person obtaining  │ \\
// │ a copy of this software and associated documentation files (the        │ \\
// │ "Software"), to deal in the Software without restriction, including    │ \\
// │ without limitation the rights to use, copy, modify, merge, publish,    │ \\
// │ distribute, sublicense, and/or sellcopies of the Software, and to      │ \\
// │ permit persons to whom the Software is furnished to do so, subject to  │ \\
// │ the following conditions:                                              │ \\
// │                                                                        │ \\
// │ The above copyright notice and this permission notice shall be         │ \\
// │ included in all copies or substantial portions of the Software.        │ \\
// │                                                                        │ \\
// │ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        │ \\
// │ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     │ \\
// │ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. │ \\
// │ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   │ \\
// │ CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   │ \\
// │ TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE       │ \\
// │ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 │ \\
// └────────────────────────────────────────────────────────────────────────┘ \\

using System;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;
using Sungiant.Abacus;

<# foreach(var type in GetRealTypes() ) { #>
namespace Sungiant.Abacus.<#= type #>Precision
{

	[StructLayout (LayoutKind.Sequential)]
	public partial struct Matrix44 
		: IEquatable<Matrix44>
	{
		// Row 0
		public <#= type #> M11;
		public <#= type #> M12;
		public <#= type #> M13;
		public <#= type #> M14;

		// Row 1
		public <#= type #> M21;
		public <#= type #> M22;
		public <#= type #> M23;
		public <#= type #> M24;

		// Row 2
		public <#= type #> M31;
		public <#= type #> M32;
		public <#= type #> M33;
		public <#= type #> M34;

		// Row 3
		public <#= type #> M41; // translation.x
		public <#= type #> M42; // translation.y
		public <#= type #> M43; // translation.z
		public <#= type #> M44;
		
		public Vector3 Up {
			get {
				Vector3 vector;
				vector.X = this.M21;
				vector.Y = this.M22;
				vector.Z = this.M23;
				return vector;
			}
			set {
				this.M21 = value.X;
				this.M22 = value.Y;
				this.M23 = value.Z;
			}
		}

		public Vector3 Down {
			get {
				Vector3 vector;
				vector.X = -this.M21;
				vector.Y = -this.M22;
				vector.Z = -this.M23;
				return vector;
			}
			set {
				this.M21 = -value.X;
				this.M22 = -value.Y;
				this.M23 = -value.Z;
			}
		}

		public Vector3 Right {
			get {
				Vector3 vector;
				vector.X = this.M11;
				vector.Y = this.M12;
				vector.Z = this.M13;
				return vector;
			}
			set {
				this.M11 = value.X;
				this.M12 = value.Y;
				this.M13 = value.Z;
			}
		}

		public Vector3 Left {
			get {
				Vector3 vector;
				vector.X = -this.M11;
				vector.Y = -this.M12;
				vector.Z = -this.M13;
				return vector;
			}
			set {
				this.M11 = -value.X;
				this.M12 = -value.Y;
				this.M13 = -value.Z;
			}
		}

		public Vector3 Forward {
			get {
				Vector3 vector;
				vector.X = -this.M31;
				vector.Y = -this.M32;
				vector.Z = -this.M33;
				return vector;
			}
			set {
				this.M31 = -value.X;
				this.M32 = -value.Y;
				this.M33 = -value.Z;
			}
		}

		public Vector3 Backward {
			get {
				Vector3 vector;
				vector.X = this.M31;
				vector.Y = this.M32;
				vector.Z = this.M33;
				return vector;
			}
			set {
				this.M31 = value.X;
				this.M32 = value.Y;
				this.M33 = value.Z;
			}
		}

		public Vector3 Translation {
			get {
				Vector3 vector;
				vector.X = this.M41;
				vector.Y = this.M42;
				vector.Z = this.M43;
				return vector;
			}
			set {
				this.M41 = value.X;
				this.M42 = value.Y;
				this.M43 = value.Z;
			}
		}

		public Matrix44 (<#= type #> m11, <#= type #> m12, <#= type #> m13, <#= type #> m14, <#= type #> m21, <#= type #> m22, <#= type #> m23, <#= type #> m24, <#= type #> m31, <#= type #> m32, <#= type #> m33, <#= type #> m34, <#= type #> m41, <#= type #> m42, <#= type #> m43, <#= type #> m44)
		{
			this.M11 = m11;
			this.M12 = m12;
			this.M13 = m13;
			this.M14 = m14;
			this.M21 = m21;
			this.M22 = m22;
			this.M23 = m23;
			this.M24 = m24;
			this.M31 = m31;
			this.M32 = m32;
			this.M33 = m33;
			this.M34 = m34;
			this.M41 = m41;
			this.M42 = m42;
			this.M43 = m43;
			this.M44 = m44;
		}

		public override String ToString ()
		{
			return ("{ " + string.Format ("{{M11:{0} M12:{1} M13:{2} M14:{3}}} ", new Object[] { this.M11.ToString (), this.M12.ToString (), this.M13.ToString (), this.M14.ToString () }) + string.Format ("{{M21:{0} M22:{1} M23:{2} M24:{3}}} ", new Object[] { this.M21.ToString (), this.M22.ToString (), this.M23.ToString (), this.M24.ToString () }) + string.Format ("{{M31:{0} M32:{1} M33:{2} M34:{3}}} ", new Object[] { this.M31.ToString (), this.M32.ToString (), this.M33.ToString (), this.M34.ToString () }) + string.Format ("{{M41:{0} M42:{1} M43:{2} M44:{3}}} ", new Object[] { this.M41.ToString (), this.M42.ToString (), this.M43.ToString (), this.M44.ToString () }) + "}");
		}

		public Boolean Equals (Matrix44 other)
		{
			return ((((((this.M11 == other.M11) && (this.M22 == other.M22)) && ((this.M33 == other.M33) && (this.M44 == other.M44))) && (((this.M12 == other.M12) && (this.M13 == other.M13)) && ((this.M14 == other.M14) && (this.M21 == other.M21)))) && ((((this.M23 == other.M23) && (this.M24 == other.M24)) && ((this.M31 == other.M31) && (this.M32 == other.M32))) && (((this.M34 == other.M34) && (this.M41 == other.M41)) && (this.M42 == other.M42)))) && (this.M43 == other.M43));
		}

		public override Boolean Equals (Object obj)
		{
			Boolean flag = false;
			if (obj is Matrix44)
			{
				flag = this.Equals ((Matrix44)obj);
			}
			return flag;
		}

		public override Int32 GetHashCode ()
		{
			return (((((((((((((((this.M11.GetHashCode () + this.M12.GetHashCode ()) + this.M13.GetHashCode ()) + this.M14.GetHashCode ()) + this.M21.GetHashCode ()) + this.M22.GetHashCode ()) + this.M23.GetHashCode ()) + this.M24.GetHashCode ()) + this.M31.GetHashCode ()) + this.M32.GetHashCode ()) + this.M33.GetHashCode ()) + this.M34.GetHashCode ()) + this.M41.GetHashCode ()) + this.M42.GetHashCode ()) + this.M43.GetHashCode ()) + this.M44.GetHashCode ());
		}
	}
}
<# } #>
