<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="../../../Generate.t4"#>
// ┌────────────────────────────────────────────────────────────────────────┐ \\
// │ Abacus - Fast, efficient, cross precision, maths library               │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Brought to you by:                                                     │ \\
// │          _________                    .__               __             │ \\
// │         /   _____/__ __  ____    ____ |__|____    _____/  |_           │ \\
// │         \_____  \|  |  \/    \  / ___\|  \__  \  /    \   __\          │ \\
// │         /        \  |  /   |  \/ /_/  >  |/ __ \|   |  \  |            │ \\
// │        /_______  /____/|___|  /\___  /|__(____  /___|  /__|            │ \\
// │                \/           \//_____/         \/     \/                │ \\
// │                                                                        │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright © 2013 A.J.Pook (http://sungiant.github.com)                 │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Permission is hereby granted, free of charge, to any person obtaining  │ \\
// │ a copy of this software and associated documentation files (the        │ \\
// │ "Software"), to deal in the Software without restriction, including    │ \\
// │ without limitation the rights to use, copy, modify, merge, publish,    │ \\
// │ distribute, sublicense, and/or sellcopies of the Software, and to      │ \\
// │ permit persons to whom the Software is furnished to do so, subject to  │ \\
// │ the following conditions:                                              │ \\
// │                                                                        │ \\
// │ The above copyright notice and this permission notice shall be         │ \\
// │ included in all copies or substantial portions of the Software.        │ \\
// │                                                                        │ \\
// │ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        │ \\
// │ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     │ \\
// │ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. │ \\
// │ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   │ \\
// │ CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   │ \\
// │ TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE       │ \\
// │ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 │ \\
// └────────────────────────────────────────────────────────────────────────┘ \\

using System;
using Sungiant.Abacus;

<# foreach(var type in GetRealTypes() ) { #>
namespace Sungiant.Abacus.<#= type #>Precision
{
	public partial struct Vector2
	{
		public static void Distance (ref Vector2 value1, ref Vector2 value2, out <#= type #> result)
		{
			<#= type #> num2 = value1.X - value2.X;
			<#= type #> num = value1.Y - value2.Y;
			<#= type #> num3 = (num2 * num2) + (num * num);
			result = RealMaths.Sqrt (num3);
		}

		public static void DistanceSquared (ref Vector2 value1, ref Vector2 value2, out <#= type #> result)
		{
			<#= type #> num2 = value1.X - value2.X;
			<#= type #> num = value1.Y - value2.Y;
			result = (num2 * num2) + (num * num);
		}

		public static void Dot (ref Vector2 value1, ref Vector2 value2, out <#= type #> result)
		{
			result = (value1.X * value2.X) + (value1.Y * value2.Y);
		}

		public static void PerpDot (ref Vector2 value1, ref Vector2 value2, out <#= type #> result)
		{
			result = (value1.X * value2.Y - value1.Y * value2.X);
		}

		public static void Perpendicular (ref Vector2 value, out Vector2 result)
		{
			result = new Vector2 (-value.X, value.Y);
		}

		public static void Normalise (ref Vector2 value, out Vector2 result)
		{
			<#= type #> one = 1;

			<#= type #> num2 = (value.X * value.X) + (value.Y * value.Y);
			<#= type #> num = one / (RealMaths.Sqrt (num2));
			result.X = value.X * num;
			result.Y = value.Y * num;
		}

		public static void Reflect (ref Vector2 vector, ref Vector2 normal, out Vector2 result)
		{
			<#= type #> two = 2;

			<#= type #> num = (vector.X * normal.X) + (vector.Y * normal.Y);
			result.X = vector.X - ((two * num) * normal.X);
			result.Y = vector.Y - ((two * num) * normal.Y);
		}
		
		public static void Transform (ref Vector2 position, ref Matrix44 matrix, out Vector2 result)
		{
			<#= type #> num2 = ((position.X * matrix.M11) + (position.Y * matrix.M21)) + matrix.M41;
			<#= type #> num = ((position.X * matrix.M12) + (position.Y * matrix.M22)) + matrix.M42;
			result.X = num2;
			result.Y = num;
		}
		
		public static void TransformNormal (ref Vector2 normal, ref Matrix44 matrix, out Vector2 result)
		{
			<#= type #> num2 = (normal.X * matrix.M11) + (normal.Y * matrix.M21);
			<#= type #> num = (normal.X * matrix.M12) + (normal.Y * matrix.M22);
			result.X = num2;
			result.Y = num;
		}
		
		public static void Transform (ref Vector2 value, ref Quaternion rotation, out Vector2 result)
		{
			<#= type #> one = 1;

			<#= type #> num10 = rotation.X + rotation.X;
			<#= type #> num5 = rotation.Y + rotation.Y;
			<#= type #> num4 = rotation.Z + rotation.Z;
			<#= type #> num3 = rotation.W * num4;
			<#= type #> num9 = rotation.X * num10;
			<#= type #> num2 = rotation.X * num5;
			<#= type #> num8 = rotation.Y * num5;
			<#= type #> num = rotation.Z * num4;
			<#= type #> num7 = (value.X * ((one - num8) - num)) + (value.Y * (num2 - num3));
			<#= type #> num6 = (value.X * (num2 + num3)) + (value.Y * ((one - num9) - num));
			result.X = num7;
			result.Y = num6;
		}
	}
}

<# } #>