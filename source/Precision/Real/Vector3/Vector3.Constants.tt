<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="../../../Generate.t4"#>
// ┌────────────────────────────────────────────────────────────────────────┐ \\
// │ Abacus - Fast, efficient, cross precision, maths library               │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Brought to you by:                                                     │ \\
// │          _________                    .__               __             │ \\
// │         /   _____/__ __  ____    ____ |__|____    _____/  |_           │ \\
// │         \_____  \|  |  \/    \  / ___\|  \__  \  /    \   __\          │ \\
// │         /        \  |  /   |  \/ /_/  >  |/ __ \|   |  \  |            │ \\
// │        /_______  /____/|___|  /\___  /|__(____  /___|  /__|            │ \\
// │                \/           \//_____/         \/     \/                │ \\
// │                                                                        │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright © 2013 A.J.Pook (http://sungiant.github.com)                 │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Permission is hereby granted, free of charge, to any person obtaining  │ \\
// │ a copy of this software and associated documentation files (the        │ \\
// │ "Software"), to deal in the Software without restriction, including    │ \\
// │ without limitation the rights to use, copy, modify, merge, publish,    │ \\
// │ distribute, sublicense, and/or sellcopies of the Software, and to      │ \\
// │ permit persons to whom the Software is furnished to do so, subject to  │ \\
// │ the following conditions:                                              │ \\
// │                                                                        │ \\
// │ The above copyright notice and this permission notice shall be         │ \\
// │ included in all copies or substantial portions of the Software.        │ \\
// │                                                                        │ \\
// │ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        │ \\
// │ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     │ \\
// │ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. │ \\
// │ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   │ \\
// │ CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   │ \\
// │ TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE       │ \\
// │ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 │ \\
// └────────────────────────────────────────────────────────────────────────┘ \\

using System;
using Sungiant.Abacus;

<# foreach(var type in GetRealTypes() ) { #>
namespace Sungiant.Abacus.<#= type #>Precision
{
	public partial struct Vector3
	{
		static Vector3 _zero;
		static Vector3 _one;
		static Vector3 _half;
		static Vector3 _unitX;
		static Vector3 _unitY;
		static Vector3 _unitZ;
		static Vector3 _up;
		static Vector3 _down;
		static Vector3 _right;
		static Vector3 _left;
		static Vector3 _forward;
		static Vector3 _backward;

		static Vector3 ()
		{
			<#= type #> temp_one; RealMaths.One(out temp_one);
			<#= type #> temp_half; RealMaths.Half(out temp_half);
			<#= type #> temp_zero; RealMaths.Zero(out temp_zero);

			_zero = new Vector3 ();
			_one = new Vector3 (temp_one, temp_one, temp_one);
			_half = new Vector3(temp_half, temp_half, temp_half);
			_unitX = new Vector3 (temp_one, temp_zero, temp_zero);
			_unitY = new Vector3 (temp_zero, temp_one, temp_zero);
			_unitZ = new Vector3 (temp_zero, temp_zero, temp_one);
			_up = new Vector3 (temp_zero, temp_one, temp_zero);
			_down = new Vector3 (temp_zero, -temp_one, temp_zero);
			_right = new Vector3 (temp_one, temp_zero, temp_zero);
			_left = new Vector3 (-temp_one, temp_zero, temp_zero);
			_forward = new Vector3 (temp_zero, temp_zero, -temp_one);
			_backward = new Vector3 (temp_zero, temp_zero, temp_one);
		}
		
		public static Vector3 Zero {
			get {
				return _zero;
			}
		}
		
		public static Vector3 One {
			get {
				return _one;
			}
		}
		
		public static Vector3 Half {
			get {
				return _half;
			}
		}
		
		public static Vector3 UnitX {
			get {
				return _unitX;
			}
		}
		
		public static Vector3 UnitY {
			get {
				return _unitY;
			}
		}
		
		public static Vector3 UnitZ {
			get {
				return _unitZ;
			}
		}
		
		public static Vector3 Up {
			get {
				return _up;
			}
		}
		
		public static Vector3 Down {
			get {
				return _down;
			}
		}
		
		public static Vector3 Right {
			get {
				return _right;
			}
		}
		
		public static Vector3 Left {
			get {
				return _left;
			}
		}
		
		public static Vector3 Forward {
			get {
				return _forward;
			}
		}
		
		public static Vector3 Backward {
			get {
				return _backward;
			}
		}
	}
}
<# } #>