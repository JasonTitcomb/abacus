<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="../../Generate.t4"#>
// ┌────────────────────────────────────────────────────────────────────────┐ \\
// │ Abacus - Fast, efficient, cross precision, maths library               │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Brought to you by:                                                     │ \\
// │          _________                    .__               __             │ \\
// │         /   _____/__ __  ____    ____ |__|____    _____/  |_           │ \\
// │         \_____  \|  |  \/    \  / ___\|  \__  \  /    \   __\          │ \\
// │         /        \  |  /   |  \/ /_/  >  |/ __ \|   |  \  |            │ \\
// │        /_______  /____/|___|  /\___  /|__(____  /___|  /__|            │ \\
// │                \/           \//_____/         \/     \/                │ \\
// │                                                                        │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright © 2013 A.J.Pook (http://sungiant.github.com)                 │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Permission is hereby granted, free of charge, to any person obtaining  │ \\
// │ a copy of this software and associated documentation files (the        │ \\
// │ "Software"), to deal in the Software without restriction, including    │ \\
// │ without limitation the rights to use, copy, modify, merge, publish,    │ \\
// │ distribute, sublicense, and/or sellcopies of the Software, and to      │ \\
// │ permit persons to whom the Software is furnished to do so, subject to  │ \\
// │ the following conditions:                                              │ \\
// │                                                                        │ \\
// │ The above copyright notice and this permission notice shall be         │ \\
// │ included in all copies or substantial portions of the Software.        │ \\
// │                                                                        │ \\
// │ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        │ \\
// │ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     │ \\
// │ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. │ \\
// │ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   │ \\
// │ CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   │ \\
// │ TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE       │ \\
// │ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 │ \\
// └────────────────────────────────────────────────────────────────────────┘ \\

using System;
using Sungiant.Abacus;
using System.Runtime.InteropServices;

<# foreach(var type in GetIntegerTypes() ) { #>
namespace Sungiant.Abacus.<#= type #>Precision
{
	[StructLayout (LayoutKind.Sequential)]
	public struct Point3 
		: IEquatable<Point3>
	{
		public <#= type #> X;
		public <#= type #> Y;
		public <#= type #> Z;

		static Point3 zero;
		static Point3 one;
		static Point3 unitX;
		static Point3 unitY;
		static Point3 unitZ;
		static Point3 up;
		static Point3 down;
		static Point3 right;
		static Point3 left;
		static Point3 forward;
		static Point3 backward;

		public static Point3 Zero
		{
			get
			{
				return zero;
			}
		}

		public static Point3 One
		{
			get
			{
				return one;
			}
		}

		public static Point3 UnitX
		{
			get
			{
				return unitX;
			}
		}

		public static Point3 UnitY
		{
			get
			{
				return unitY;
			}
		}

		public static Point3 UnitZ
		{
			get
			{
				return unitZ;
			}
		}

		public static Point3 Up
		{
			get
			{
				return up;
			}
		}

		public static Point3 Down
		{
			get
			{
				return down;
			}
		}

		public static Point3 Right
		{
			get
			{
				return right;
			}
		}

		public static Point3 Left
		{
			get
			{
				return left;
			}
		}

		public static Point3 Forward
		{
			get
			{
				return forward;
			}
		}

		public static Point3 Backward
		{
			get
			{
				return backward;
			}
		}

		public Point3(<#= type #> x, <#= type #> y, <#= type #> z)
		{
			this.X = x;
			this.Y = y;
			this.Z = z;
		}

		public bool Equals(Point3 other)
		{
			return ((this.X == other.X) && (this.Y == other.Y) && (this.Z == other.Z));
		}

		public override bool Equals(Object obj)
		{
			bool flag = false;
			if (obj is Point3)
			{
				flag = this.Equals((Point3)obj);
			}
			return flag;
		}

		public override int GetHashCode()
		{
			return (this.X.GetHashCode() + this.Y.GetHashCode() + this.Z.GetHashCode());
		}

		public override string ToString()
		{
			return string.Format("{{X:{0} Y:{1} Z:{2}}}", this.X, this.Y, this.Z );
		}

		public static bool operator ==(Point3 a, Point3 b)
		{
			return a.Equals(b);
		}

		public static bool operator !=(Point3 a, Point3 b)
		{
			if (a.X == b.X)
			{
				if (a.Y == b.Y)
				{
					return (a.Z != b.Z);
				}
			}
			return true;
		}

		static Point3()
		{
			zero = new Point3();
			one = new Point3(1, 1, 1);
			unitX = new Point3(1, 0, 0);
			unitY = new Point3(0, 1, 0);
			unitZ = new Point3(0, 0, 1);
			up = new Point3(0, 1, 0);
			down = new Point3(0, -1, 0);
			right = new Point3(1, 0, 0);
			left = new Point3(-1, 0, 0);
			forward = new Point3(0, 0, -1);
			backward = new Point3(0, 0, 1);
		}

		public static Point3 operator +(Point3 value)
		{
			Point3 point = Point3.Zero;
			point.X = +value.X;
			point.Y = +value.Y;
			point.Z = +value.Z;
			return point;
		}

		public static Point3 operator -(Point3 value)
		{
			Point3 point = Point3.Zero;
			point.X = -value.X;
			point.Y = -value.Y;
			point.Z = -value.Z;
			return point;
		}

		public static Point3 operator +(Point3 value1, Point3 value2)
		{
			Point3 point = Point3.Zero;
			point.X = value1.X + value2.X;
			point.Y = value1.Y + value2.Y;
			point.Z = value1.Z + value2.Z;
			return point;
		}

		public static Point3 operator -(Point3 value1, Point3 value2)
		{
			Point3 point = Point3.Zero;
			point.X = value1.X - value2.X;
			point.Y = value1.Y - value2.Y;
			point.Z = value1.Z - value2.Z;
			return point;
		}

		public static Point3 operator *(Point3 value1, Point3 value2)
		{
			Point3 point = Point3.Zero;
			point.X = value1.X * value2.X;
			point.Y = value1.Y * value2.Y;
			point.Z = value1.Z * value2.Z;
			return point;
		}

		public static Point3 operator *(Point3 value, int scaleFactor)
		{
			Point3 point = Point3.Zero;
			point.X = value.X * scaleFactor;
			point.Y = value.Y * scaleFactor;
			point.Z = value.Z * scaleFactor;
			return point;
		}

		public static Point3 operator *(int scaleFactor, Point3 value)
		{
			Point3 point = Point3.Zero;
			point.X = value.X * scaleFactor;
			point.Y = value.Y * scaleFactor;
			point.Z = value.Z * scaleFactor;
			return point;
		}

		public static Point3 operator /(Point3 value1, Point3 value2)
		{
			Point3 point = Point3.Zero;
			point.X = value1.X / value2.X;
			point.Y = value1.Y / value2.Y;
			point.Z = value1.Z / value2.Z;
			return point;
		}

		public static Point3 operator /(Point3 value, int divider)
		{
			Point3 point = Point3.Zero;
			point.X = value.X / divider;
			point.Y = value.Y / divider;
			point.Z = value.Z / divider;
			return point;
		}
	}
}

<# } #>