<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="../../Generate.t4"#>
// ┌────────────────────────────────────────────────────────────────────────┐ \\
// │ Abacus - Fast, efficient, cross precision, maths library               │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Brought to you by:                                                     │ \\
// │          _________                    .__               __             │ \\
// │         /   _____/__ __  ____    ____ |__|____    _____/  |_           │ \\
// │         \_____  \|  |  \/    \  / ___\|  \__  \  /    \   __\          │ \\
// │         /        \  |  /   |  \/ /_/  >  |/ __ \|   |  \  |            │ \\
// │        /_______  /____/|___|  /\___  /|__(____  /___|  /__|            │ \\
// │                \/           \//_____/         \/     \/                │ \\
// │                                                                        │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Copyright © 2013 A.J.Pook (http://sungiant.github.com)                 │ \\
// ├────────────────────────────────────────────────────────────────────────┤ \\
// │ Permission is hereby granted, free of charge, to any person obtaining  │ \\
// │ a copy of this software and associated documentation files (the        │ \\
// │ "Software"), to deal in the Software without restriction, including    │ \\
// │ without limitation the rights to use, copy, modify, merge, publish,    │ \\
// │ distribute, sublicense, and/or sellcopies of the Software, and to      │ \\
// │ permit persons to whom the Software is furnished to do so, subject to  │ \\
// │ the following conditions:                                              │ \\
// │                                                                        │ \\
// │ The above copyright notice and this permission notice shall be         │ \\
// │ included in all copies or substantial portions of the Software.        │ \\
// │                                                                        │ \\
// │ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        │ \\
// │ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     │ \\
// │ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. │ \\
// │ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   │ \\
// │ CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   │ \\
// │ TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE       │ \\
// │ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 │ \\
// └────────────────────────────────────────────────────────────────────────┘ \\

using System;
using Sungiant.Abacus;
using System.Runtime.InteropServices;

<# foreach(var type in GetIntegerTypes() ) { #>
namespace Sungiant.Abacus.<#= type #>Precision
{
	[StructLayout (LayoutKind.Sequential)]
	public struct Point2 
		: IEquatable<Point2>
	{
		public <#= type #> X;
		public <#= type #> Y;

		public Point2 (<#= type #> x, <#= type #> y)
		{
			this.X = x;
			this.Y = y;
		}

		public Boolean Equals (Point2 other)
		{
			return ((this.X == other.X) && (this.Y == other.Y));
		}

		public override Boolean Equals (Object obj)
		{
			Boolean flag = false;

			if (obj is Point2)
			{
				flag = this.Equals ((Point2)obj);
			}

			return flag;
		}

		public override Int32 GetHashCode ()
		{
			return (this.X.GetHashCode () + this.Y.GetHashCode ());
		}

		public override String ToString ()
		{
			return String.Format ("{{X:{0} Y:{1}}}", this.X, this.Y );
		}
		
		static Point2 zero;
		
		public static Point2 Zero
		{
			get
			{
				return zero;
			}
		}
		
		static Point2 ()
		{
			zero = new Point2 ();
		}

		public static Boolean operator == (Point2 a, Point2 b)
		{
			return a.Equals (b);
		}

		public static Boolean operator != (Point2 a, Point2 b)
		{
			if (a.X == b.X)
			{
				return (a.Y != b.Y);
			}

			return true;
		}	
	}
}

<# } #>