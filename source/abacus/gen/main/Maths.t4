    /// <summary>
    /// Provides maths functions with consistent function signatures across supported precisions.
    /// </summary>
    public static class Maths {
<# GenerateMathsConstant (T, "Epsilon"); #>
<# GenerateMathsConstant (T, "E"); #>
<# GenerateMathsConstant (T, "Half"); #>
<# GenerateMathsConstant (T, "Quarter"); #>
<# GenerateMathsConstant (T, "Log10E"); #>
<# GenerateMathsConstant (T, "Log2E"); #>
<# GenerateMathsConstant (T, "Pi"); #>
<# GenerateMathsConstant (T, "HalfPi"); #>
<# GenerateMathsConstant (T, "QuarterPi"); #>
<# GenerateMathsConstant (T, "Root2"); #>
<# GenerateMathsConstant (T, "Root3"); #>
<# GenerateMathsConstant (T, "Tau"); #>
<# GenerateMathsConstant (T, "Deg2Rad"); #>
<# GenerateMathsConstant (T, "Rad2Deg"); #>
<# GenerateMathsConstant (T, "Zero"); #>
<# GenerateMathsConstant (T, "One"); #>

<# GenerateMathsFunction (T, "Sqrt"); #>

<# GenerateMathsFunction (T, "Sin"); #>
<# GenerateMathsFunction (T, "Cos"); #>
<# GenerateMathsFunction (T, "Tan"); #>

        public static <#=T#> ToRadians          (<#=T#> input) { return input * Deg2Rad; }
        public static <#=T#> ToDegrees          (<#=T#> input) { return input * Rad2Deg; }
        public static <#=T#> FromFraction       (Int32 numerator, Int32 denominator) { return (<#=T#>) numerator / (<#=T#>) denominator; }
        public static <#=T#> FromFraction       (Int64 numerator, Int64 denominator) { return (<#=T#>) numerator / (<#=T#>) denominator; }

        public static <#=T#> Min                (<#=T#> a, <#=T#> b) { return a < b ? a : b; }
        public static <#=T#> Max                (<#=T#> a, <#=T#> b) { return a > b ? a : b; }
        public static <#=T#> Clamp              (<#=T#> value, <#=T#> min, <#=T#> max) { if (value < min) return min; else if (value > max) return max; else return value; }
        public static <#=T#> Lerp               (<#=T#> a, <#=T#> b, <#=T#> t) { return a + ((b - a) * t); }
        public static <#=T#> Abs                (<#=T#> v) { return (v < 0) ? -v : v; }

        public static <#=T#> FromString         (String str) { <#=T#> result = Zero; <#=T#>.TryParse (str, out result); return result; }
        public static void    FromString        (String str, out <#=T#> value) { <#=T#>.TryParse (str, out value); }

        public static Boolean IsZero            (<#=T#> value) { return Abs(value) < Epsilon; }
        public static Boolean WithinEpsilon     (<#=T#> a, <#=T#> b) { <#=T#> num = a - b; return ((-Epsilon <= num) && (num <= Epsilon)); }
        public static Int32   Sign              (<#=T#> value) { if (value > 0) return 1; else if (value < 0) return -1; return 0; }
    }

