    /// <summary>
    /// This class provides maths functions with consistent function
    /// signatures across all supported precisions.  The idea being
    /// the more you use this, the more you will be able to write
    /// code once and easily change the precision later.
    /// </summary>
    public static class RealMaths
    {
        <#@ include file="Constants/RealMaths.TestTolerance.t4"#>
        <#@ include file="Constants/RealMaths.ArcCos.t4"#>
        <#@ include file="Constants/RealMaths.ArcSin.t4"#>
        <#@ include file="Constants/RealMaths.ArcTan.t4"#>
        <#@ include file="Constants/RealMaths.Cos.t4"#>
        <#@ include file="Constants/RealMaths.E.t4"#>
        <#@ include file="Constants/RealMaths.Epsilon.t4"#>
        <#@ include file="Constants/RealMaths.Half.t4"#>
        <#@ include file="Constants/RealMaths.Log10E.t4"#>
        <#@ include file="Constants/RealMaths.Log2E.t4"#>
        <#@ include file="Constants/RealMaths.Pi.t4"#>
        <#@ include file="Constants/RealMaths.Root2.t4"#>
        <#@ include file="Constants/RealMaths.Root3.t4"#>
        <#@ include file="Constants/RealMaths.Sin.t4"#>
        <#@ include file="Constants/RealMaths.Sqrt.t4"#>
        <#@ include file="Constants/RealMaths.Square.t4"#>
        <#@ include file="Constants/RealMaths.Tan.t4"#>
        <#@ include file="Constants/RealMaths.Tau.t4"#>

        <#@ include file="RealMaths.Abs.t4"#>

<# foreach( var realType in GetRealTypes() ) { #>
        /// <summary>
        /// Assigns a <#= realType #> precision real number representing
        /// zero to the output value.
        /// </summary>
        public static void Zero(out <#= realType #> value) { value = 0; }

        /// <summary>
        /// Assigns a <#= realType #> precision real number representing
        /// one to the output value.
        /// </summary>
        public static void One(out <#= realType #> value) { value = 1; }

        /// <summary>
        /// todo
        /// </summary>
        public static <#= realType #> ToRadians(<#= realType #> input)
        {
            <#= realType #> tau; Tau(out tau);
            return input * tau / ((<#= realType #>)360);
        }

        /// <summary>
        /// todo
        /// </summary>
        public static <#= realType #> ToDegrees(<#= realType #> input)
        {
            <#= realType #> tau; Tau(out tau);
            return input / tau * ((<#= realType #>)360);
        }

        /// <summary>
        /// todo
        /// </summary>
        public static void FromFraction(Int32 numerator, Int32 denominator, out <#= realType #> value)
        {
            value = (<#= realType #>) numerator / (<#= realType #>) denominator;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static void FromString(String str, out <#= realType #> value)
        {
            <#= realType #>.TryParse(str, out value);
        }

        /// <summary>
        /// todo
        /// </summary>
        public static Boolean IsZero(<#= realType #> value)
        {
            <#= realType #> ep;
            Epsilon(out ep);
            return Abs(value) < ep;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static <#= realType #> Min(<#= realType #> a, <#= realType #> b)
        {
            return a < b ? a : b;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static <#= realType #> Max(<#= realType #> a, <#= realType #> b)
        {
            return a > b ? a : b;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static Boolean WithinEpsilon(<#= realType #> a, <#= realType #> b)
        {
            <#= realType #> num = a - b;
            return ((-<#= realType #>.Epsilon <= num) && (num <= <#= realType #>.Epsilon));
        }

        /// <summary>
        /// todo
        /// </summary>
        public static Int32 Sign(<#= realType #> value)
        {
            if (value > 0)
            {
                return 1;
            }
            else if (value < 0)
            {
                return -1;
            }

            return 0;
        }

<# } #>
    }
