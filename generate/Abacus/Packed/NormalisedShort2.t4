    /// <summary>
    /// todo
    /// </summary>
    [StructLayout (LayoutKind.Sequential), Serializable]
    public struct NormalisedShort2 
        : IPackedValue<UInt32>
        , IEquatable<NormalisedShort2>
        , IPackedReal2
    {
        /// <summary>
        /// todo
        /// </summary>
        public override String ToString ()
        {
            return this.packedValue.ToString ("X8", CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// todo
        /// </summary>
        static void Pack(ref SinglePrecision.Vector2 realXy, out UInt32 packedXy)
        {
            if (realXy.X < -1f || realXy.X > 1f ||
                realXy.Y < -1f || realXy.Y > 1f ) 
                throw new ArgumentException ("A component of the input source is not normalised: " + realXy);

            UInt32 x = PackUtils.PackSignedNormalised(0xffff, realXy.X);
            UInt32 y = PackUtils.PackSignedNormalised(0xffff, realXy.Y) << 16;
            packedXy = (x | y);
        }

        /// <summary>
        /// todo
        /// </summary>
        static void Unpack(UInt32 packedXy, out SinglePrecision.Vector2 realXy)
        {
            realXy.X = PackUtils.UnpackSignedNormalised (0xffff, packedXy);
            realXy.Y = PackUtils.UnpackSignedNormalised (0xffff, (UInt32) (packedXy >> 16));

            if (realXy.X < -1f || realXy.X > 1f ||
                realXy.Y < -1f || realXy.Y > 1f ) 
                throw new Exception ("A the input source doesn't yeild a normalised output: " + packedXy);
        }

<#  GeneratePackedCommon("NormalisedShort2", "UInt32", "packedXy", "realXy", 2); #>
    }

