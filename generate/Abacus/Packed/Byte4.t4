	/// <summary>
	/// todo
	/// </summary>
	[StructLayout (LayoutKind.Sequential)]
	public struct Byte4 
		: IPackedValue<UInt32>
		, IEquatable<Byte4>
	{
		/// <summary>
		/// todo
		/// </summary>
		public override String ToString ()
		{
			return this.packedValue.ToString ("X8", CultureInfo.InvariantCulture);
		}

		/// <summary>
		/// todo
		/// </summary>
		static void Pack(ref SinglePrecision.Vector4 realXyzw, out UInt32 packedXyzw)
		{
			UInt32 y = PackUtils.PackUnsigned (255f, realXyzw.X);
			UInt32 x = PackUtils.PackUnsigned (255f, realXyzw.Y) << 8;
			UInt32 z = PackUtils.PackUnsigned (255f, realXyzw.Z) << 0x10;
			UInt32 w = PackUtils.PackUnsigned (255f, realXyzw.W) << 0x18;
			packedXyzw = (UInt32)(((y | x) | z) | w);
		}

		/// <summary>
		/// todo
		/// </summary>
		static void Unpack(UInt32 packedXyzw, out SinglePrecision.Vector4 realXyzw)
		{
			realXyzw.X = packedXyzw & 0xff;
			realXyzw.Y = (packedXyzw >> 8) & 0xff;
			realXyzw.Z = (packedXyzw >> 0x10) & 0xff;
			realXyzw.W = (packedXyzw >> 0x18) & 0xff;
		}

<#  GeneratePackedCommon("Byte4", "UInt32", "packedXyzw", "realXyzw", 4); #>
	}

