		// Maths //-----------------------------------------------------------//

		/// <summary>
		/// Calculates the distance between two vectors.
		/// </summary>
		public static void Distance (ref Vector3 value1, ref Vector3 value2, out <#= type #> result)
		{
			<#= type #> num3 = value1.X - value2.X;
			<#= type #> num2 = value1.Y - value2.Y;
			<#= type #> num = value1.Z - value2.Z;
			<#= type #> num4 = ((num3 * num3) + (num2 * num2)) + (num * num);
			result = RealMaths.Sqrt (num4);
		}

		/// <summary>
		/// Calculates the distance between two vectors squared.
		/// </summary>
		public static void DistanceSquared (ref Vector3 value1, ref Vector3 value2, out <#= type #> result)
		{
			<#= type #> num3 = value1.X - value2.X;
			<#= type #> num2 = value1.Y - value2.Y;
			<#= type #> num = value1.Z - value2.Z;
			result = ((num3 * num3) + (num2 * num2)) + (num * num);
		}

		/// <summary>
		/// Calculates the dot product of two vectors. If the two vectors are 
		/// unit vectors, the dot product returns a floating point value between
		/// -1 and 1 that can be used to determine some properties of the angle 
		/// between two vectors. For example, it can show whether the vectors 
		/// are orthogonal, parallel, or have an acute or obtuse angle between 
		/// them.
		/// </summary>
		public static void Dot (ref Vector3 vector1, ref Vector3 vector2, out <#= type #> result)
		{
			result = ((vector1.X * vector2.X) + (vector1.Y * vector2.Y)) + (vector1.Z * vector2.Z);
		}

		/// <summary>
		/// Creates a unit vector from the specified vector. The result is a 
		/// vector one unit in length pointing in the same direction as the 
		/// original vector.
		/// </summary>
		public static void Normalise (ref Vector3 value, out Vector3 result)
		{
			<#= type #> lengthSquared = ((value.X * value.X) + (value.Y * value.Y)) + (value.Z * value.Z);

			<#= type #> epsilon; RealMaths.Epsilon(out epsilon);

			if( lengthSquared <= epsilon || 
				<#= type #>.IsInfinity(lengthSquared) )
			{
				throw new ArgumentOutOfRangeException();
			}

			<#= type #> one = 1;
			<#= type #> multiplier = one / RealMaths.Sqrt (lengthSquared);

			result.X = value.X * multiplier;
			result.Y = value.Y * multiplier;
			result.Z = value.Z * multiplier;
		}

		/// <summary>
		/// Calculates the cross product of two vectors.
		/// </summary>
		public static void Cross (ref Vector3 vector1, ref Vector3 vector2, out Vector3 result)
		{
			result.X = (vector1.Y * vector2.Z) - (vector1.Z * vector2.Y);
			result.Y = (vector1.Z * vector2.X) - (vector1.X * vector2.Z);
			result.Z = (vector1.X * vector2.Y) - (vector1.Y * vector2.X);
		}

		/// <summary>
		/// Returns the value of an incident vector reflected across the a 
		/// specified normal vector.
		/// </summary>
		public static void Reflect (
			ref Vector3 vector, ref Vector3 normal, out Vector3 result)
		{
			if( !normal.IsUnit() )
			{
				throw new ArgumentOutOfRangeException();
			}

			<#= type #> two = 2;

			<#= type #> num = ((vector.X * normal.X) + (vector.Y * normal.Y)) + (vector.Z * normal.Z);
			
			result.X = vector.X - ((two * num) * normal.X);
			result.Y = vector.Y - ((two * num) * normal.Y);
			result.Z = vector.Z - ((two * num) * normal.Z);
		}

		/// <summary>
		/// Transforms a Vector3 by the specified Matrix44.
		/// </summary>
		public static void Transform (ref Vector3 position, ref Matrix44 matrix, out Vector3 result)
		{
			<#= type #> num3 = (((position.X * matrix.M11) + (position.Y * matrix.M21)) + (position.Z * matrix.M31)) + matrix.M41;
			<#= type #> num2 = (((position.X * matrix.M12) + (position.Y * matrix.M22)) + (position.Z * matrix.M32)) + matrix.M42;
			<#= type #> num = (((position.X * matrix.M13) + (position.Y * matrix.M23)) + (position.Z * matrix.M33)) + matrix.M43;
			result.X = num3;
			result.Y = num2;
			result.Z = num;
		}
		
		/// <summary>
		/// Transforms a vector by a specified Quaternion.
		/// </summary>
		public static void Transform (ref Vector3 value, ref Quaternion rotation, out Vector3 result)
		{
			<#= type #> one = 1;
			<#= type #> num12 = rotation.X + rotation.X;
			<#= type #> num2 = rotation.Y + rotation.Y;
			<#= type #> num = rotation.Z + rotation.Z;
			<#= type #> num11 = rotation.W * num12;
			<#= type #> num10 = rotation.W * num2;
			<#= type #> num9 = rotation.W * num;
			<#= type #> num8 = rotation.X * num12;
			<#= type #> num7 = rotation.X * num2;
			<#= type #> num6 = rotation.X * num;
			<#= type #> num5 = rotation.Y * num2;
			<#= type #> num4 = rotation.Y * num;
			<#= type #> num3 = rotation.Z * num;
			<#= type #> num15 = ((value.X * ((one - num5) - num3)) + (value.Y * (num7 - num9))) + (value.Z * (num6 + num10));
			<#= type #> num14 = ((value.X * (num7 + num9)) + (value.Y * ((one - num8) - num3))) + (value.Z * (num4 - num11));
			<#= type #> num13 = ((value.X * (num6 - num10)) + (value.Y * (num4 + num11))) + (value.Z * ((one - num8) - num5));
			result.X = num15;
			result.Y = num14;
			result.Z = num13;
		}
		
		/// <summary>
		/// Transforms a normalised Vector3 by a Matrix44.
		/// </summary>
		public static void TransformNormal (ref Vector3 normal, ref Matrix44 matrix, out Vector3 result)
		{
			if( !normal.IsUnit() )
			{
				throw new ArgumentOutOfRangeException();
			}

			<#= type #> num3 = ((normal.X * matrix.M11) + (normal.Y * matrix.M21)) + (normal.Z * matrix.M31);
			<#= type #> num2 = ((normal.X * matrix.M12) + (normal.Y * matrix.M22)) + (normal.Z * matrix.M32);
			<#= type #> num = ((normal.X * matrix.M13) + (normal.Y * matrix.M23)) + (normal.Z * matrix.M33);
			result.X = num3;
			result.Y = num2;
			result.Z = num;
		}
		
