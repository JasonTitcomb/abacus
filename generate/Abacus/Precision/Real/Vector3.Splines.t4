		// Splines //---------------------------------------------------------//

		/// <summary>
		/// Interpolates between two values using a cubic equation.
		/// </summary>
		public static void SmoothStep (ref Vector3 value1, ref Vector3 value2, <#= type #> amount, out Vector3 result)
		{
			<#= type #> zero = 0;
			<#= type #> one = 1;
			<#= type #> two = 2;
			<#= type #> three = 3;

			amount = (amount > one) ? one : ((amount < zero) ? zero : amount);
			amount = (amount * amount) * (three - (two * amount));
			result.X = value1.X + ((value2.X - value1.X) * amount);
			result.Y = value1.Y + ((value2.Y - value1.Y) * amount);
			result.Z = value1.Z + ((value2.Z - value1.Z) * amount);
		}

		/// <summary>
		/// Performs a Catmull-Rom interpolation using the specified positions.
		/// Features:
		/// - The spline passes through all of the control points.
		/// - The spline is C^1 continuous, meaning that there are no 
		///   discontinuities in the tangent direction and magnitude.
		/// - The spline is not C^2 continuous.  The second derivative is 
		///   linearly interpolated within each segment, causing the curvature 
		///   to vary linearly over the length of the segment.
		/// </summary>
		public static void CatmullRom (ref Vector3 value1, ref Vector3 value2, ref Vector3 value3, ref Vector3 value4, <#= type #> amount, out Vector3 result)
		{
			<#= type #> half; RealMaths.Half(out half);
			<#= type #> two = 2;
			<#= type #> three = 3;
			<#= type #> four = 4;
			<#= type #> five = 5;

			<#= type #> num = amount * amount;
			<#= type #> num2 = amount * num;
			result.X = half * ((((two * value2.X) + ((-value1.X + value3.X) * amount)) + (((((two * value1.X) - (five * value2.X)) + (four * value3.X)) - value4.X) * num)) + ((((-value1.X + (three * value2.X)) - (three * value3.X)) + value4.X) * num2));
			result.Y = half * ((((two * value2.Y) + ((-value1.Y + value3.Y) * amount)) + (((((two * value1.Y) - (five * value2.Y)) + (four * value3.Y)) - value4.Y) * num)) + ((((-value1.Y + (three * value2.Y)) - (three * value3.Y)) + value4.Y) * num2));
			result.Z = half * ((((two * value2.Z) + ((-value1.Z + value3.Z) * amount)) + (((((two * value1.Z) - (five * value2.Z)) + (four * value3.Z)) - value4.Z) * num)) + ((((-value1.Z + (three * value2.Z)) - (three * value3.Z)) + value4.Z) * num2));
		}

		/// <summary>
		/// Performs a Hermite spline interpolation.
		/// </summary>
		public static void Hermite (ref Vector3 value1, ref Vector3 tangent1, ref Vector3 value2, ref Vector3 tangent2, <#= type #> amount, out Vector3 result)
		{
			<#= type #> one = 1;
			<#= type #> two = 2;
			<#= type #> three = 3;

			<#= type #> num = amount * amount;
			<#= type #> num2 = amount * num;
			<#= type #> num6 = ((two * num2) - (three * num)) + one;
			<#= type #> num5 = (-two * num2) + (three * num);
			<#= type #> num4 = (num2 - (two * num)) + amount;
			<#= type #> num3 = num2 - num;
			result.X = (((value1.X * num6) + (value2.X * num5)) + (tangent1.X * num4)) + (tangent2.X * num3);
			result.Y = (((value1.Y * num6) + (value2.Y * num5)) + (tangent1.Y * num4)) + (tangent2.Y * num3);
			result.Z = (((value1.Z * num6) + (value2.Z * num5)) + (tangent1.Z * num4)) + (tangent2.Z * num3);
		}

