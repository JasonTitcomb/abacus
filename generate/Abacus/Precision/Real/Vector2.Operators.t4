        // Equality Operators //----------------------------------------------//

        /// <summary>
        /// Determines whether or not this Vector2 object is equal to another
        /// object.
        /// </summary>
        public override Boolean Equals (Object obj)
        {
            Boolean flag = false;
            if (obj is Vector2) {
                flag = this.Equals ((Vector2)obj);
            }
            return flag;
        }

        #region IEquatable<Vector2>

        /// <summary>
        /// Determines whether or not this Vector2 object is equal to another
        /// Vector2 object.
        /// </summary>
        public Boolean Equals (Vector2 other)
        {
            return ((this.X == other.X) && (this.Y == other.Y));
        }

        #endregion

        /// <summary>
        /// Determines whether or not two Vector2 objects are equal using the
        /// (X==Y) operator.
        /// </summary>
        public static Boolean operator == (Vector2 value1, Vector2 value2)
        {
            return ((value1.X == value2.X) && (value1.Y == value2.Y));
        }

        /// <summary>
        /// Determines whether or not two Vector2 objects are not equal using
        /// the (X!=Y) operator.
        /// </summary>
        public static Boolean operator != (Vector2 value1, Vector2 value2)
        {
            if (value1.X == value2.X) {
                return !(value1.Y == value2.Y);
            }
            return true;
        }

        // Addition Operators //----------------------------------------------//

        /// <summary>
        /// Performs addition of two Vector2 objects.
        /// </summary>
        public static void Add (
            ref Vector2 value1, ref Vector2 value2, out Vector2 result)
        {
            result.X = value1.X + value2.X;
            result.Y = value1.Y + value2.Y;
        }

        // Subtraction Operators //-------------------------------------------//

        /// <summary>
        /// Performs subtraction of two Vector2 objects.
        /// </summary>
        public static void Subtract (
            ref Vector2 value1, ref Vector2 value2, out Vector2 result)
        {
            result.X = value1.X - value2.X;
            result.Y = value1.Y - value2.Y;
        }

        // Negation Operators //----------------------------------------------//

        /// <summary>
        /// Performs negation of a Vector2 object.
        /// </summary>
        public static void Negate (ref Vector2 value, out Vector2 result)
        {
            result.X = -value.X;
            result.Y = -value.Y;
        }

        // Multiplication Operators //----------------------------------------//

        /// <summary>
        /// Performs muliplication of two Vector2 objects.
        /// </summary>
        public static void Multiply (
            ref Vector2 value1, ref Vector2 value2, out Vector2 result)
        {
            result.X = value1.X * value2.X;
            result.Y = value1.Y * value2.Y;
        }

        /// <summary>
        /// Performs multiplication of a Vector2 object and a <#= type #>
        /// precision scaling factor.
        /// </summary>
        public static void Multiply (
            ref Vector2 value, <#= type #> scaleFactor, out Vector2 result)
        {
            result.X = value.X * scaleFactor;
            result.Y = value.Y * scaleFactor;
        }

        // Division Operators //----------------------------------------------//

        /// <summary>
        /// Performs division of two Vector2 objects.
        /// </summary>
        public static void Divide (
            ref Vector2 value1, ref Vector2 value2, out Vector2 result)
        {
            result.X = value1.X / value2.X;
            result.Y = value1.Y / value2.Y;
        }

        /// <summary>
        /// Performs division of a Vector2 object and a <#= type #> precision
        /// scaling factor.
        /// </summary>
        public static void Divide (
            ref Vector2 value1, <#= type #> divider, out Vector2 result)
        {
            <#= type #> one = 1;
            <#= type #> num = one / divider;
            result.X = value1.X * num;
            result.Y = value1.Y * num;
        }

