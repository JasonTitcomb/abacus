        /// <summary>
        /// todo
        /// </summary>
        public static void Transpose (ref Matrix44 input, out Matrix44 output)
        {
            output.R0C0 = input.R0C0;
            output.R1C1 = input.R1C1;
            output.R2C2 = input.R2C2;
            output.R3C3 = input.R3C3;

            <#= type #> temp = input.R0C1;
            output.R0C1 = input.R1C0;
            output.R1C0 = temp;

            temp = input.R0C2;
            output.R0C2 = input.R2C0;
            output.R2C0 = temp;

            temp = input.R0C3;
            output.R0C3 = input.R3C0;
            output.R3C0 = temp;

            temp = input.R1C2;
            output.R1C2 = input.R2C1;
            output.R2C1 = temp;

            temp = input.R1C3;
            output.R1C3 = input.R3C1;
            output.R3C1 = temp;

            temp =  input.R2C3;
            output.R2C3 = input.R3C2;
            output.R3C2 = temp;
        }

        /// <summary>
        /// Essential Mathemathics For Games & Interactive Applications
        /// </summary>
        public static void Decompose(ref Matrix44 matrix, out Vector3 scale, out Quaternion rotation, out Vector3 translation, out Boolean result)
        {
            translation.X = matrix.R3C0;
            translation.Y = matrix.R3C1;
            translation.Z = matrix.R3C2;

            Vector3 a = new Vector3(matrix.R0C0, matrix.R1C0, matrix.R2C0);
            Vector3 b = new Vector3(matrix.R0C1, matrix.R1C1, matrix.R2C1);
            Vector3 c = new Vector3(matrix.R0C2, matrix.R1C2, matrix.R2C2);

            <#= type #> aLen; Vector3.Length(ref a, out aLen); scale.X = aLen;
            <#= type #> bLen; Vector3.Length(ref b, out bLen); scale.Y = bLen;
            <#= type #> cLen; Vector3.Length(ref c, out cLen); scale.Z = cLen;

            if ( RealMaths.IsZero(scale.X) ||
                 RealMaths.IsZero(scale.Y) ||
                 RealMaths.IsZero(scale.Z) )
            {
                rotation = Quaternion.Identity;
                result = false;
            }

            Vector3.Normalise(ref a, out a);
            Vector3.Normalise(ref b, out b);
            Vector3.Normalise(ref c, out c);

            Vector3 right = new Vector3(a.X, b.X, c.X);
            Vector3 up = new Vector3(a.Y, b.Y, c.Y);
            Vector3 backward = new Vector3(a.Z, b.Z, c.Z);

            Vector3.Normalise(ref right, out right);
            Vector3.Normalise(ref up, out up);
            Vector3.Normalise(ref backward, out backward);

            Matrix44 rotMat;
            Matrix44.CreateFromAllAxis(ref right, ref up, ref backward, out rotMat);

            Quaternion.CreateFromRotationMatrix(ref rotMat, out rotation);

            result = true;
        }

