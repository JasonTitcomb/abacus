    /// <summary>
    /// <#= type #> precision Quaternion.
    /// </summary>
    [StructLayout (LayoutKind.Sequential), Serializable]
    public struct Quaternion
        : IEquatable<Quaternion>
    {
        /// <summary>
        /// todo
        /// </summary>
        public <#= type #> X;

        /// <summary>
        /// todo
        /// </summary>
        public <#= type #> Y;

        /// <summary>
        /// todo
        /// </summary>
        public <#= type #> Z;

        /// <summary>
        /// todo
        /// </summary>
        public <#= type #> W;

        /// <summary>
        /// todo
        /// </summary>
        public Quaternion (
            <#= type #> x,
            <#= type #> y,
            <#= type #> z,
            <#= type #> w)
        {
            this.X = x;
            this.Y = y;
            this.Z = z;
            this.W = w;
        }

        /// <summary>
        /// todo
        /// </summary>
        public Quaternion (Vector3 vectorPart, <#= type #> scalarPart)
        {
            this.X = vectorPart.X;
            this.Y = vectorPart.Y;
            this.Z = vectorPart.Z;
            this.W = scalarPart;
        }

        /// <summary>
        /// todo
        /// </summary>
        public override String ToString ()
        {
            return string.Format ("{{X:{0} Y:{1} Z:{2} W:{3}}}", new Object[] { this.X.ToString (), this.Y.ToString (), this.Z.ToString (), this.W.ToString () });
        }

        /// <summary>
        /// todo
        /// </summary>
        public override Int32 GetHashCode ()
        {
            return
                this.X.GetHashCode () +
                this.Y.GetHashCode () +
                this.Z.GetHashCode () +
                this.W.GetHashCode ();
        }

        /// <summary>
        /// Determines whether or not this Quaternion object is equal to another
        /// object
        /// </summary>
        public override Boolean Equals (Object obj)
        {
            Boolean flag = false;

            if (obj is Quaternion)
            {
                flag = this.Equals ((Quaternion) obj);
            }

            return flag;
        }

        #region IEquatable<Quaternion>

        /// <summary>
        /// Determines whether or not this Quaternion object is equal to another
        /// Quaternion object.
        /// </summary>
        public Boolean Equals (Quaternion other)
        {
            return
                (this.X == other.X) &&
                (this.Y == other.Y) &&
                (this.Z == other.Z) &&
                (this.W == other.W);
        }

        #endregion

<#@ include file="Quaternion.Constants.t4"#>
<#@ include file="Quaternion.Create.t4"#>
<#@ include file="Quaternion.Maths.t4"#>
<#@ include file="Quaternion.Operators.t4"#>
<#@ include file="Quaternion.Utilities.t4"#>

#if (VARIANTS_ENABLED)

<#@ include file="Variants/Quaternion.Variants.Create.t4"#>
<#@ include file="Variants/Quaternion.Variants.Maths.t4"#>
<#@ include file="Variants/Quaternion.Variants.Operators.t4"#>
<#@ include file="Variants/Quaternion.Variants.Utilities.t4"#>

<#@ include file="Variants/Quaternion.Variants.MemberFunctions.t4"#>

#endif
    }
