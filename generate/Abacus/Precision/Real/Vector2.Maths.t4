        // Maths //-----------------------------------------------------------//

        /// <summary>
        /// Calculates the distance between two vectors.
        /// </summary>
        public static void Distance (
            ref Vector2 vector1, ref Vector2 vector2, out <#= type #> result)
        {
            <#= type #> dx = vector1.X - vector2.X;
            <#= type #> dy = vector1.Y - vector2.Y;

            <#= type #> lengthSquared = (dx * dx) + (dy * dy);

            result = RealMaths.Sqrt (lengthSquared);
        }

        /// <summary>
        /// Calculates the distance between two vectors squared.
        /// </summary>
        public static void DistanceSquared (
            ref Vector2 vector1, ref Vector2 vector2, out <#= type #> result)
        {
            <#= type #> dx = vector1.X - vector2.X;
            <#= type #> dy = vector1.Y - vector2.Y;

            result = (dx * dx) + (dy * dy);
        }

        /// <summary>
        /// Calculates the dot product of two vectors. If the two vectors are
        /// unit vectors, the dot product returns a floating point vector between
        /// -1 and 1 that can be used to determine some properties of the angle
        /// between two vectors. For example, it can show whether the vectors
        /// are orthogonal, parallel, or have an acute or obtuse angle between
        /// them.
        /// </summary>
        public static void Dot (
            ref Vector2 vector1, ref Vector2 vector2, out <#= type #> result)
        {
            result = (vector1.X * vector2.X) + (vector1.Y * vector2.Y);
        }

        /// <summary>
        /// Creates a unit vector from the specified vector. The result is a
        /// vector one unit in length pointing in the same direction as the
        /// original vector.
        /// </summary>
        public static void Normalise (ref Vector2 vector, out Vector2 result)
        {
            <#= type #> lengthSquared =
                (vector.X * vector.X) + (vector.Y * vector.Y);

            <#= type #> epsilon; RealMaths.Epsilon(out epsilon);

            if( lengthSquared <= epsilon ||
                <#= type #>.IsInfinity(lengthSquared) )
            {
                throw new ArgumentOutOfRangeException();
            }

            <#= type #> one = 1;
            <#= type #> multiplier = one / RealMaths.Sqrt (lengthSquared);

            result.X = vector.X * multiplier;
            result.Y = vector.Y * multiplier;

        }

        /// <summary>
        /// Returns the vector of an incident vector reflected across the a
        /// specified normal vector.
        /// </summary>
        public static void Reflect (
            ref Vector2 vector, ref Vector2 normal, out Vector2 result)
        {
            Boolean normalIsUnit;
            Vector2.IsUnit (ref normal, out normalIsUnit);
            if( !normalIsUnit )
            {
                throw new ArgumentOutOfRangeException();
            }

            // dot = vector . normal
            //     = |vector| * [normal] * cosθ
            //     = |vector| * cosθ
            //     = adjacent
            <#= type #> dot;
            Dot(ref vector, ref normal, out dot);

            <#= type #> two = 2;
            <#= type #> twoDot = dot * two;

            // Starting vector minus twice the length of the adjcent projected
            // along the normal.
            Vector2 m;
            Vector2.Multiply (ref normal, ref twoDot, out m);
            Vector2.Subtract (ref vector, ref m, out result);
        }

        /// <summary>
        /// Transforms a Vector2 by the specified Matrix44.
        /// </summary>
        public static void Transform (
            ref Vector2 vector, ref Matrix44 matrix, out Vector2 result)
        {
            <#= type #> x =
                (vector.X * matrix.M11) +
                (vector.Y * matrix.M21) +
                matrix.M41;

            <#= type #> y =
                (vector.X * matrix.M12) +
                (vector.Y * matrix.M22) +
                matrix.M42;

            result.X = x;
            result.Y = y;
        }

        /// <summary>
        /// Transforms a Vector2 by the specified Quaternion.
        /// </summary>
        public static void Transform (
            ref Vector2 vector, ref Quaternion rotation, out Vector2 result)
        {
            <#= type #> two = 2;

            <#= type #> x = rotation.X;
            <#= type #> y = rotation.Y;
            <#= type #> z = rotation.Z;
            <#= type #> w = rotation.W;

            <#= type #> xx = x * x;
            <#= type #> yy = y * y;
            <#= type #> zz = z * z;

            <#= type #> wz = w * z;
            <#= type #> xy = x * y;

            result.X =
                + vector.X
                - (two * vector.X  * (yy + zz))
                + (two * vector.Y  * (xy - wz));

            result.Y =
                + vector.Y
                + (two * vector.X * (xy + wz))
                - (two * vector.Y * (xx + zz));
        }

        /// <summary>
        /// Transforms a Vector2 by the specified Matrix.
        /// </summary>
        public static void TransformNormal (
            ref Vector2 normal, ref Matrix44 matrix, out Vector2 result)
        {
            Boolean normalIsUnit;
            Vector2.IsUnit (ref normal, out normalIsUnit);
            if( !normalIsUnit )
            {
                throw new ArgumentOutOfRangeException(
                    "The normal vector: " + normal + " must be normalised.");
            }

            <#= type #> x = (normal.X * matrix.M11) + (normal.Y * matrix.M21);
            <#= type #> y = (normal.X * matrix.M12) + (normal.Y * matrix.M22);

            result.X = x;
            result.Y = y;
        }

        /// <summary>
        /// Calculates the length of the Vector2.
        /// </summary>
        public static void Length (
            ref Vector2 vector, out <#= type #> result)
        {
            <#= type #> lengthSquared =
                (vector.X * vector.X) + (vector.Y * vector.Y);

            result = RealMaths.Sqrt (lengthSquared);
        }

        /// <summary>
        /// Calculates the length of the Vector2 squared.
        /// </summary>
        public static void LengthSquared (
            ref Vector2 vector, out <#= type #> result)
        {
            result = (vector.X * vector.X) + (vector.Y * vector.Y);
        }

