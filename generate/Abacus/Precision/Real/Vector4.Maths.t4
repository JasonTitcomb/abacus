        // Maths //-----------------------------------------------------------//

        /// <summary>
        /// Calculates the distance between two vectors.
        /// </summary>
        public static void Distance (
            ref Vector4 vector1,
            ref Vector4 vector2,
            out <#= type #> result)
        {
            <#= type #> dx = vector1.X - vector2.X;
            <#= type #> dy = vector1.Y - vector2.Y;
            <#= type #> dz = vector1.Z - vector2.Z;
            <#= type #> dw = vector1.W - vector2.W;

            <#= type #> lengthSquared = (dx * dx) + (dy * dy) + (dz * dz) + (dw * dw);

            result = RealMaths.Sqrt (lengthSquared);
        }

        /// <summary>
        /// Calculates the distance between two vectors squared.
        /// </summary>
        public static void DistanceSquared (
            ref Vector4 vector1,
            ref Vector4 vector2,
            out <#= type #> result)
        {
            <#= type #> dx = vector1.X - vector2.X;
            <#= type #> dy = vector1.Y - vector2.Y;
            <#= type #> dz = vector1.Z - vector2.Z;
            <#= type #> dw = vector1.W - vector2.W;

            result = (dx * dx) + (dy * dy) + (dz * dz) + (dw * dw);
        }

        /// <summary>
        /// Calculates the dot product of two vectors. If the two vectors are
        /// unit vectors, the dot product returns a floating point vector between
        /// -1 and 1 that can be used to determine some properties of the angle
        /// between two vectors. For example, it can show whether the vectors
        /// are orthogonal, parallel, or have an acute or obtuse angle between
        /// them.
        /// </summary>
        public static void Dot (
            ref Vector4 vector1,
            ref Vector4 vector2,
            out <#= type #> result)
        {
            result =
                (vector1.X * vector2.X) +
                (vector1.Y * vector2.Y) +
                (vector1.Z * vector2.Z) +
                (vector1.W * vector2.W);
        }

        /// <summary>
        /// Creates a unit vector from the specified vector. The result is a
        /// vector one unit in length pointing in the same direction as the
        /// original vector.
        /// </summary>
        public static void Normalise (
            ref Vector4 vector,
            out Vector4 result)
        {
            <#= type #> lengthSquared =
                (vector.X * vector.X) +
                (vector.Y * vector.Y) +
                (vector.Z * vector.Z) +
                (vector.W * vector.W);

            <#= type #> epsilon; RealMaths.Epsilon(out epsilon);

            if( lengthSquared <= epsilon ||
                <#= type #>.IsInfinity(lengthSquared) )
            {
                throw new ArgumentOutOfRangeException();
            }

            <#= type #> one = 1;
            <#= type #> multiplier = one / (RealMaths.Sqrt (lengthSquared));

            result.X = vector.X * multiplier;
            result.Y = vector.Y * multiplier;
            result.Z = vector.Z * multiplier;
            result.W = vector.W * multiplier;
        }

        /// <summary>
        /// Transforms a Vector4 by the specified Matrix44.
        /// </summary>
        public static void Transform (
            ref Vector4 vector,
            ref Matrix44 matrix,
            out Vector4 result)
        {
            <#= type #> x =
                (vector.X * matrix.M11) +
                (vector.Y * matrix.M21) +
                (vector.Z * matrix.M31) +
                (vector.W * matrix.M41);

            <#= type #> y =
                (vector.X * matrix.M12) +
                (vector.Y * matrix.M22) +
                (vector.Z * matrix.M32) +
                (vector.W * matrix.M42);

            <#= type #> z =
                (vector.X * matrix.M13) +
                (vector.Y * matrix.M23) +
                (vector.Z * matrix.M33) +
                (vector.W * matrix.M43);

            <#= type #> w =
                (vector.X * matrix.M14) +
                (vector.Y * matrix.M24) +
                (vector.Z * matrix.M34) +
                (vector.W * matrix.M44);

            result.X = x;
            result.Y = y;
            result.Z = z;
            result.W = w;
        }

        /// <summary>
        /// Transforms a Vector4 by the specified Quaternion.
        /// </summary>
        public static void Transform (
            ref Vector4 vector,
            ref Quaternion rotation,
            out Vector4 result)
        {
            <#= type #> one = 1;
            <#= type #> two = 2;

            <#= type #> qx = rotation.X; <#= type #> qxSq = qx * qx;
            <#= type #> qy = rotation.Y; <#= type #> qySq = qy * qy;
            <#= type #> qz = rotation.Z; <#= type #> qzSq = qz * qz;
            <#= type #> qw = rotation.W;

            <#= type #> twowx = two * qw * qx;
            <#= type #> twowy = two * qw * qy;
            <#= type #> twowz = two * qw * qz;
            <#= type #> twoxy = two * qx * qy;
            <#= type #> twoxz = two * qx * qz;
            <#= type #> twoyz = two * qy * qz;

            <#= type #> twoxSq = two * qxSq;
            <#= type #> twoySq = two * qySq;
            <#= type #> twozSq = two * qzSq;

            <#= type #> x =
                (vector.X * (one   - twoySq - twozSq)) +
                (vector.Y * (twoxy - twowz)) +
                (vector.Z * (twoxz + twowy));

            <#= type #> y =
                (vector.X * (twoxy + twowz)) +
                (vector.Y * (one   - twoxSq - twozSq)) +
                (vector.Z * (twoyz - twowx));

            <#= type #> z =
                (vector.X * (twoxz - twowy)) +
                (vector.Y * (twoyz + twowx)) +
                (vector.Z * (one   - twoxSq - twoySq));

            result.X = x;
            result.Y = y;
            result.Z = z;
            result.W = vector.W;
        }

        /// <summary>
        /// Transforms a normalised Vector4 by a Matrix44.
        /// </summary>
        public static void TransformNormal (
            ref Vector4 normal,
            ref Matrix44 matrix,
            out Vector4 result)
        {
            if( !normal.IsUnit() )
            {
                throw new ArgumentOutOfRangeException(
                    "The normal vector: " + normal + " must be normalised.");
            }

            <#= type #> x =
                (normal.X * matrix.M11) + (normal.Y * matrix.M21) +
                (normal.Z * matrix.M31) + (normal.W * matrix.M41);

            <#= type #> y =
                (normal.X * matrix.M12) + (normal.Y * matrix.M22) +
                (normal.Z * matrix.M32) + (normal.W * matrix.M42);

            <#= type #> z =
                (normal.X * matrix.M13) + (normal.Y * matrix.M23) +
                (normal.Z * matrix.M33) + (normal.W * matrix.M43);

            <#= type #> w =
                (normal.X * matrix.M14) + (normal.Y * matrix.M24) +
                (normal.Z * matrix.M34) + (normal.W * matrix.M44);

            result.X = x;
            result.Y = y;
            result.Z = z;
            result.W = w;
        }

