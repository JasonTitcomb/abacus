        // Maths //-----------------------------------------------------------//

        /// <summary>
        /// Calculates the distance between two vectors.
        /// </summary>
        public static void Distance (
            ref Vector4 value1, 
            ref Vector4 value2, 
            out <#= type #> result)
        {
            <#= type #> dx = value1.X - value2.X;
            <#= type #> dy = value1.Y - value2.Y;
            <#= type #> dz = value1.Z - value2.Z;
            <#= type #> dw = value1.W - value2.W;

            <#= type #> lengthSquared = (dx * dx) + (dy * dy) + (dz * dz) + (dw * dw);

            result = RealMaths.Sqrt (lengthSquared);
        }

        /// <summary>
        /// Calculates the distance between two vectors squared.
        /// </summary>
        public static void DistanceSquared (
            ref Vector4 value1, 
            ref Vector4 value2, 
            out <#= type #> result)
        {
            <#= type #> dx = value1.X - value2.X;
            <#= type #> dy = value1.Y - value2.Y;
            <#= type #> dz = value1.Z - value2.Z;
            <#= type #> dw = value1.W - value2.W;

            result = (dx * dx) + (dy * dy) + (dz * dz) + (dw * dw);
        }

        /// <summary>
        /// Calculates the dot product of two vectors. If the two vectors are
        /// unit vectors, the dot product returns a floating point value between
        /// -1 and 1 that can be used to determine some properties of the angle
        /// between two vectors. For example, it can show whether the vectors
        /// are orthogonal, parallel, or have an acute or obtuse angle between
        /// them.
        /// </summary>
        public static void Dot (
            ref Vector4 value1, 
            ref Vector4 value2, 
            out <#= type #> result)
        {
            result = 
                (value1.X * value2.X) +
                (value1.Y * value2.Y) +
                (value1.Z * value2.Z) +
                (value1.W * value2.W);
        }

        /// <summary>
        /// Creates a unit vector from the specified vector. The result is a
        /// vector one unit in length pointing in the same direction as the
        /// original vector.
        /// </summary>
        public static void Normalise (
            ref Vector4 value, 
            out Vector4 result)
        {
            <#= type #> lengthSquared =
                (value.X * value.X) +
                (value.Y * value.Y) +
                (value.Z * value.Z) +
                (value.W * value.W);

            <#= type #> epsilon; RealMaths.Epsilon(out epsilon);

            if( lengthSquared <= epsilon ||
                <#= type #>.IsInfinity(lengthSquared) )
            {
                throw new ArgumentOutOfRangeException();
            }

            <#= type #> one = 1;
            <#= type #> multiplier = one / (RealMaths.Sqrt (lengthSquared));

            result.X = value.X * multiplier;
            result.Y = value.Y * multiplier;
            result.Z = value.Z * multiplier;
            result.W = value.W * multiplier;
        }

        /// <summary>
        /// Transforms a Vector4 by the specified Matrix44.
        /// </summary>
        public static void Transform (
            ref Vector4 value, 
            ref Matrix44 matrix, 
            out Vector4 result)
        {
            <#= type #> x = 
                (value.X * matrix.M11) + 
                (value.Y * matrix.M21) + 
                (value.Z * matrix.M31) +
                (value.W * matrix.M41);
            
            <#= type #> y = 
                (value.X * matrix.M12) + 
                (value.Y * matrix.M22) + 
                (value.Z * matrix.M32) +
                (value.W * matrix.M42);
            
            <#= type #> z = 
                (value.X * matrix.M13) + 
                (value.Y * matrix.M23) + 
                (value.Z * matrix.M33) +
                (value.W * matrix.M43);
            
            <#= type #> w = 
                (value.X * matrix.M14) + 
                (value.Y * matrix.M24) + 
                (value.Z * matrix.M34) +
                (value.W * matrix.M44);
            
            result.X = x;
            result.Y = y;
            result.Z = z;
            result.W = w;
        }

        /// <summary>
        /// Transforms a Vector4 by the specified Quaternion.
        /// </summary>
        public static void Transform (
            ref Vector4 value, 
            ref Quaternion rotation, 
            out Vector4 result)
        {
            <#= type #> one = 1;
            <#= type #> two = 2;

            <#= type #> qx = rotation.X; <#= type #> qxSq = qx * qx;
            <#= type #> qy = rotation.Y; <#= type #> qySq = qy * qy;
            <#= type #> qz = rotation.Z; <#= type #> qzSq = qz * qz;
            <#= type #> qw = rotation.W;

            <#= type #> twowx = two * qw * qx;
            <#= type #> twowy = two * qw * qy;
            <#= type #> twowz = two * qw * qz;
            <#= type #> twoxy = two * qx * qy;
            <#= type #> twoxz = two * qx * qz;
            <#= type #> twoyz = two * qy * qz;

            <#= type #> twoxSq = two * qxSq;
            <#= type #> twoySq = two * qySq;
            <#= type #> twozSq = two * qzSq;

            <#= type #> x = 
                (value.X * (one   - twoySq - twozSq)) + 
                (value.Y * (twoxy - twowz)) + 
                (value.Z * (twoxz + twowy));
            
            <#= type #> y = 
                (value.X * (twoxy + twowz)) + 
                (value.Y * (one   - twoxSq - twozSq)) + 
                (value.Z * (twoyz - twowx));
            
            <#= type #> z = 
                (value.X * (twoxz - twowy)) + 
                (value.Y * (twoyz + twowx)) + 
                (value.Z * (one   - twoxSq - twoySq));

            result.X = x;
            result.Y = y;
            result.Z = z;
            result.W = value.W;
        }

        /// <summary>
        /// Transforms a normalised Vector4 by a Matrix44.
        /// </summary>
        public static void TransformNormal (
            ref Vector4 normal, 
            ref Matrix44 matrix, 
            out Vector4 result)
        {
            if( !normal.IsUnit() )
            {
                throw new ArgumentOutOfRangeException(
                    "The normal vector: " + normal + " must be normalised.");
            }

            <#= type #> x = 
                (normal.X * matrix.M11) + (normal.Y * matrix.M21) + 
                (normal.Z * matrix.M31) + (normal.W * matrix.M41);
            
            <#= type #> y = 
                (normal.X * matrix.M12) + (normal.Y * matrix.M22) + 
                (normal.Z * matrix.M32) + (normal.W * matrix.M42);
            
            <#= type #> z = 
                (normal.X * matrix.M13) + (normal.Y * matrix.M23) + 
                (normal.Z * matrix.M33) + (normal.W * matrix.M43);
            
            <#= type #> w = 
                (normal.X * matrix.M14) + (normal.Y * matrix.M24) + 
                (normal.Z * matrix.M34) + (normal.W * matrix.M44);

            result.X = x;
            result.Y = y;
            result.Z = z;
            result.W = w;
        }

