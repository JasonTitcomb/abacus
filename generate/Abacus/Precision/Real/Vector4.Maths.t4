        // Maths //-----------------------------------------------------------//

        /// <summary>
        /// Calculates the distance between two vectors.
        /// </summary>
        public static void Distance (
            ref Vector4 vector1,
            ref Vector4 vector2,
            out <#= type #> result)
        {
            <#= type #> dx = vector1.X - vector2.X;
            <#= type #> dy = vector1.Y - vector2.Y;
            <#= type #> dz = vector1.Z - vector2.Z;
            <#= type #> dw = vector1.W - vector2.W;

            <#= type #> lengthSquared =
                (dx * dx) + (dy * dy) + (dz * dz) + (dw * dw);

            result = RealMaths.Sqrt (lengthSquared);
        }

        /// <summary>
        /// Calculates the distance between two vectors squared.
        /// </summary>
        public static void DistanceSquared (
            ref Vector4 vector1,
            ref Vector4 vector2,
            out <#= type #> result)
        {
            <#= type #> dx = vector1.X - vector2.X;
            <#= type #> dy = vector1.Y - vector2.Y;
            <#= type #> dz = vector1.Z - vector2.Z;
            <#= type #> dw = vector1.W - vector2.W;

            result = (dx * dx) + (dy * dy) + (dz * dz) + (dw * dw);
        }

        /// <summary>
        /// Calculates the dot product of two vectors. If the two vectors are
        /// unit vectors, the dot product returns a floating point vector between
        /// -1 and 1 that can be used to determine some properties of the angle
        /// between two vectors. For example, it can show whether the vectors
        /// are orthogonal, parallel, or have an acute or obtuse angle between
        /// them.
        /// </summary>
        public static void Dot (
            ref Vector4 vector1,
            ref Vector4 vector2,
            out <#= type #> result)
        {
            result =
                (vector1.X * vector2.X) +
                (vector1.Y * vector2.Y) +
                (vector1.Z * vector2.Z) +
                (vector1.W * vector2.W);
        }

        /// <summary>
        /// Creates a unit vector from the specified vector. The result is a
        /// vector one unit in length pointing in the same direction as the
        /// original vector.
        /// </summary>
        public static void Normalise (
            ref Vector4 vector,
            out Vector4 result)
        {
            <#= type #> lengthSquared =
                (vector.X * vector.X) +
                (vector.Y * vector.Y) +
                (vector.Z * vector.Z) +
                (vector.W * vector.W);

            <#= type #> epsilon; RealMaths.Epsilon(out epsilon);

            if( lengthSquared <= epsilon ||
                <#= type #>.IsInfinity(lengthSquared) )
            {
                throw new ArgumentOutOfRangeException();
            }

            <#= type #> one = 1;
            <#= type #> multiplier = one / (RealMaths.Sqrt (lengthSquared));

            result.X = vector.X * multiplier;
            result.Y = vector.Y * multiplier;
            result.Z = vector.Z * multiplier;
            result.W = vector.W * multiplier;
        }

        /// <summary>
        /// Transforms a Vector4 by the specified Matrix44.
        /// </summary>
        public static void Transform (
            ref Vector4 vector,
            ref Matrix44 matrix,
            out Vector4 result)
        {
            <#= type #> x =
                (vector.X * matrix.R0C0) +
                (vector.Y * matrix.R1C0) +
                (vector.Z * matrix.R2C0) +
                (vector.W * matrix.R3C0);

            <#= type #> y =
                (vector.X * matrix.R0C1) +
                (vector.Y * matrix.R1C1) +
                (vector.Z * matrix.R2C1) +
                (vector.W * matrix.R3C1);

            <#= type #> z =
                (vector.X * matrix.R0C2) +
                (vector.Y * matrix.R1C2) +
                (vector.Z * matrix.R2C2) +
                (vector.W * matrix.R3C2);

            <#= type #> w =
                (vector.X * matrix.R0C3) +
                (vector.Y * matrix.R1C3) +
                (vector.Z * matrix.R2C3) +
                (vector.W * matrix.R3C3);

            result.X = x;
            result.Y = y;
            result.Z = z;
            result.W = w;
        }

        /// <summary>
        /// Transforms a Vector4 by the specified Quaternion.
        /// </summary>
        public static void Transform (
            ref Vector4 vector,
            ref Quaternion rotation,
            out Vector4 result)
        {
            <#= type #> two = 2;

            <#= type #> i = rotation.I;
            <#= type #> j = rotation.J;
            <#= type #> k = rotation.K;
            <#= type #> u = rotation.U;

            <#= type #> ii = i * i;
            <#= type #> jj = j * j;
            <#= type #> kk = k * k;

            <#= type #> ui = u * i;
            <#= type #> uj = u * j;
            <#= type #> uk = u * k;
            <#= type #> ij = i * j;
            <#= type #> ik = i * k;
            <#= type #> jk = j * k;

            result.X =
                + vector.X
                - (two * vector.X * (jj + kk))
                + (two * vector.Y * (ij - uk))
                + (two * vector.Z * (ik + uj));

            result.Y =
                + vector.Y
                + (two * vector.X * (ij + uk))
                - (two * vector.Y * (ii + kk))
                + (two * vector.Z * (jk - ui));

            result.Z =
                + vector.Z
                + (two * vector.X * (ik - uj))
                + (two * vector.Y * (jk + ui))
                - (two * vector.Z * (ii + jj));

            result.W = vector.W;
        }

        /// <summary>
        /// Transforms a normalised Vector4 by a Matrix44.
        /// </summary>
        public static void TransformNormal (
            ref Vector4 normal,
            ref Matrix44 matrix,
            out Vector4 result)
        {
            Boolean normalIsUnit;
            Vector4.IsUnit (ref normal, out normalIsUnit);
            if( !normalIsUnit )
            {
                throw new ArgumentOutOfRangeException(
                    "The normal vector: " + normal + " must be normalised.");
            }

            <#= type #> x =
                (normal.X * matrix.R0C0) + (normal.Y * matrix.R1C0) +
                (normal.Z * matrix.R2C0) + (normal.W * matrix.R3C0);

            <#= type #> y =
                (normal.X * matrix.R0C1) + (normal.Y * matrix.R1C1) +
                (normal.Z * matrix.R2C1) + (normal.W * matrix.R3C1);

            <#= type #> z =
                (normal.X * matrix.R0C2) + (normal.Y * matrix.R1C2) +
                (normal.Z * matrix.R2C2) + (normal.W * matrix.R3C2);

            <#= type #> w =
                (normal.X * matrix.R0C3) + (normal.Y * matrix.R1C3) +
                (normal.Z * matrix.R2C3) + (normal.W * matrix.R3C3);

            result.X = x;
            result.Y = y;
            result.Z = z;
            result.W = w;
        }

        /// <summary>
        /// Calculates the length of the Vector4.
        /// </summary>
        public static void Length (ref Vector4 vector, out <#= type #> result)
        {
            <#= type #> lengthSquared =
                (vector.X * vector.X) +
                (vector.Y * vector.Y) +
                (vector.Z * vector.Z) +
                (vector.W * vector.W);

            result = RealMaths.Sqrt (lengthSquared);
        }

        /// <summary>
        /// Calculates the length of the Vector4 squared.
        /// </summary>
        public static void LengthSquared (
            ref Vector4 vector, out <#= type #> result)
        {
            result =
                (vector.X * vector.X) +
                (vector.Y * vector.Y) +
                (vector.Z * vector.Z) +
                (vector.W * vector.W);
        }
