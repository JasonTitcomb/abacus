        /// <summary>
        /// Variant function.
        /// </summary>
        public static <#= type #> LengthSquared (Quaternion quaternion)
        {
            <#= type #> result;
            LengthSquared (ref quaternion, out result);
            return result;
        }

        /// <summary>
        /// Variant function.
        /// </summary>
        public static <#= type #> Length (Quaternion quaternion)
        {
            <#= type #> result;
            Length (ref quaternion, out result);
            return result;
        }

        /// <summary>
        /// Variant function.
        /// </summary>
        public static Boolean IsUnit (Quaternion quaternion)
        {
            Boolean result;
            IsUnit (ref quaternion, out result);
            return result;
        }


        /// <summary>
        /// Variant function.
        /// </summary>
        public static Quaternion Conjugate (Quaternion quaternion)
        {
            Quaternion result;
            Conjugate (ref quaternion, out result);
            return result;
        }

        /// <summary>
        /// Variant function.
        /// </summary>
        public static Quaternion Inverse (Quaternion quaternion)
        {
            Quaternion result;
            Inverse (ref quaternion, out result);
            return result;
        }

        /// <summary>
        /// Variant function.
        /// </summary>
        public static <#= type #> Dot (
            Quaternion quaternion1,
            Quaternion quaternion2)
        {
            <#= type #> result;
            Dot (ref quaternion1, ref quaternion2, out result);
            return result;
        }

        /// <summary>
        /// Variant function.
        /// </summary>
        public static Quaternion Concatenate (
            Quaternion quaternion1,
            Quaternion quaternion2)
        {
            Quaternion result;
            Concatenate (ref quaternion1, ref quaternion2, out result);
            return result;
        }

        /// <summary>
        /// Variant function.
        /// </summary>
        public static Quaternion Normalise (Quaternion quaternion)
        {
            Quaternion result;
            Normalise (ref quaternion, out result);
            return result;
        }

