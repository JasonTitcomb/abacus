        // Equality Operators //----------------------------------------------//

        /// <summary>
        /// Determines whether or not two Quaternion objects are equal using the
        /// (X==Y) operator.
        /// </summary>
        public static void Equals (
            ref Quaternion value1,
            ref Quaternion value2,
            out Boolean result)
        {
            result =
                (value1.X == value2.X) &&
                (value1.Y == value2.Y) &&
                (value1.Z == value2.Z) &&
                (value1.W == value2.W);
        }

        // Addition Operators //----------------------------------------------//

        /// <summary>
        /// Performs addition of two Quaternion objects.
        /// </summary>
        public static void Add (
            ref Quaternion value1,
            ref Quaternion value2,
            out Quaternion result)
        {
            result.X = value1.X + value2.X;
            result.Y = value1.Y + value2.Y;
            result.Z = value1.Z + value2.Z;
            result.W = value1.W + value2.W;
        }

        // Subtraction Operators //-------------------------------------------//

        /// <summary>
        /// Performs subtraction of two Quaternion objects.
        /// </summary>
        public static void Subtract (
            ref Quaternion value1,
            ref Quaternion value2,
            out Quaternion result)
        {
            result.X = value1.X - value2.X;
            result.Y = value1.Y - value2.Y;
            result.Z = value1.Z - value2.Z;
            result.W = value1.W - value2.W;
        }

        // Negation Operators //----------------------------------------------//

        /// <summary>
        /// Performs negation of a Quaternion object.
        /// </summary>
        public static void Negate (
            ref Quaternion value,
            out Quaternion result)
        {
            result.X = -value.X;
            result.Y = -value.Y;
            result.Z = -value.Z;
            result.W = -value.W;
        }

        // Multiplication Operators //----------------------------------------//

        /// <summary>
        /// Performs muliplication of two Quaternion objects.
        /// </summary>
        public static void Multiply (
            ref Quaternion value1,
            ref Quaternion value2,
            out Quaternion result)
        {
            <#= type #> x1 = value1.X;
            <#= type #> y1 = value1.Y;
            <#= type #> z1 = value1.Z;
            <#= type #> w1 = value1.W;

            <#= type #> x2 = value2.X;
            <#= type #> y2 = value2.Y;
            <#= type #> z2 = value2.Z;
            <#= type #> w2 = value2.W;

            <#= type #> a = (y1 * z2) - (z1 * y2);
            <#= type #> b = (z1 * x2) - (x1 * z2);
            <#= type #> c = (x1 * y2) - (y1 * x2);
            <#= type #> d = ((x1 * x2) + (y1 * y2)) + (z1 * z2);

            result.X = ((x1 * w2) + (x2 * w1)) + a;
            result.Y = ((y1 * w2) + (y2 * w1)) + b;
            result.Z = ((z1 * w2) + (z2 * w1)) + c;
            result.W = (w1 * w2) - d;
        }

        /// <summary>
        /// Performs multiplication of a Quaternion object and a <#= type #>
        /// precision scaling factor.
        /// </summary>
        public static void Multiply (
            ref Quaternion value1,
            ref <#= type #> scaleFactor,
            out Quaternion result)
        {
            result.X = value1.X * scaleFactor;
            result.Y = value1.Y * scaleFactor;
            result.Z = value1.Z * scaleFactor;
            result.W = value1.W * scaleFactor;
        }

        // Division Operators //----------------------------------------------//

        /// <summary>
        /// Performs division of two Quaternion objects.
        /// </summary>
        public static void Divide (
            ref Quaternion value1,
            ref Quaternion value2,
            out Quaternion result)
        {
            <#= type #> one = 1;

            <#= type #> x = value1.X;
            <#= type #> y = value1.Y;
            <#= type #> z = value1.Z;
            <#= type #> w = value1.W;

            <#= type #> a =
                (value2.X * value2.X) +
                (value2.Y * value2.Y) +
                (value2.Z * value2.Z) +
                (value2.W * value2.W);

            <#= type #> b = one / a;

            <#= type #> c = -value2.X * b;
            <#= type #> d = -value2.Y * b;
            <#= type #> e = -value2.Z * b;
            <#= type #> f = value2.W * b;

            <#= type #> g = (y * e) - (z * d);
            <#= type #> h = (z * c) - (x * e);
            <#= type #> i = (x * d) - (y * c);
            <#= type #> j = ((x * c) + (y * d)) + (z * e);

            result.X = (x * f) + (c * w) + g;
            result.Y = (y * f) + (d * w) + h;
            result.Z = (z * f) + (e * w) + i;
            result.W = (w * f) - j;
        }

        /// <summary>
        /// Performs division of a Quaternion object and a <#= type #> precision
        /// scaling factor.
        /// </summary>
        public static void Divide (
            ref Quaternion value1,
            ref <#= type #> divider,
            out Quaternion result)
        {
            <#= type #> one = 1;
            <#= type #> a = one / divider;

            result.X = value1.X * a;
            result.Y = value1.Y * a;
            result.Z = value1.Z * a;
            result.W = value1.W * a;
        }

