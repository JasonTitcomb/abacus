        // Equality Operators //----------------------------------------------//

        /// <summary>
        /// Determines whether or not two Quaternion objects are equal using the
        /// (X==Y) operator.
        /// </summary>
        public static void Equals (
            ref Quaternion quaternion1,
            ref Quaternion quaternion2,
            out Boolean result)
        {
            result =
                (quaternion1.I == quaternion2.I) &&
                (quaternion1.J == quaternion2.J) &&
                (quaternion1.K == quaternion2.K) &&
                (quaternion1.U == quaternion2.U);
        }

        // Addition Operators //----------------------------------------------//

        /// <summary>
        /// Performs addition of two Quaternion objects.
        /// </summary>
        public static void Add (
            ref Quaternion quaternion1,
            ref Quaternion quaternion2,
            out Quaternion result)
        {
            result.I = quaternion1.I + quaternion2.I;
            result.J = quaternion1.J + quaternion2.J;
            result.K = quaternion1.K + quaternion2.K;
            result.U = quaternion1.U + quaternion2.U;
        }

        // Subtraction Operators //-------------------------------------------//

        /// <summary>
        /// Performs subtraction of two Quaternion objects.
        /// </summary>
        public static void Subtract (
            ref Quaternion quaternion1,
            ref Quaternion quaternion2,
            out Quaternion result)
        {
            result.I = quaternion1.I - quaternion2.I;
            result.J = quaternion1.J - quaternion2.J;
            result.K = quaternion1.K - quaternion2.K;
            result.U = quaternion1.U - quaternion2.U;
        }

        // Negation Operators //----------------------------------------------//

        /// <summary>
        /// Performs negation of a Quaternion object.
        /// </summary>
        public static void Negate (
            ref Quaternion quaternion,
            out Quaternion result)
        {
            result.I = -quaternion.I;
            result.J = -quaternion.J;
            result.K = -quaternion.K;
            result.U = -quaternion.U;
        }

        // Multiplication Operators //----------------------------------------//

        /// <summary>
        /// Performs muliplication of two Quaternion objects,
        /// (Quaternion multiplication is not commutative),
        /// (i^2 = j^2 = k^2 = i j k = -1).
        /// </summary>
        public static void Multiply (
            ref Quaternion quaternion1,
            ref Quaternion quaternion2,
            out Quaternion result)
        {
            <#= type #> i1 = quaternion1.I;
            <#= type #> j1 = quaternion1.J;
            <#= type #> k1 = quaternion1.K;
            <#= type #> u1 = quaternion1.U;

            <#= type #> i2 = quaternion2.I;
            <#= type #> j2 = quaternion2.J;
            <#= type #> k2 = quaternion2.K;
            <#= type #> u2 = quaternion2.U;

            // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/arithmetic/index.htm

            result.I = i1*u2 + u1*i2 + j1*k2 - k1*j2;
            result.J = u1*j2 - i1*k2 + j1*u2 + k1*i2;
            result.K = u1*k2 + i1*j2 - j1*i2 + k1*u2;
            result.U = u1*u2 - i1*i2 - j1*j2 - k1*k2;
        }

/* Should not be


        /// <summary>
        /// Performs multiplication of a Quaternion object and a <#= type #>
        /// precision scaling factor.
        /// </summary>
        public static void Multiply (
            ref Quaternion quaternion1,
            ref <#= type #> scaleFactor,
            out Quaternion result)
        {
            result.I = quaternion1.I * scaleFactor;
            result.J = quaternion1.J * scaleFactor;
            result.K = quaternion1.K * scaleFactor;
            result.U = quaternion1.U * scaleFactor;
        }

        // Division Operators //----------------------------------------------//

        /// <summary>
        /// Performs division of two Quaternion objects.
        /// </summary>
        public static void Divide (
            ref Quaternion quaternion1,
            ref Quaternion quaternion2,
            out Quaternion result)
        {
            <#= type #> one = 1;

            <#= type #> x = quaternion1.I;
            <#= type #> y = quaternion1.J;
            <#= type #> z = quaternion1.K;
            <#= type #> w = quaternion1.U;

            <#= type #> a =
                (quaternion2.I * quaternion2.I) +
                (quaternion2.J * quaternion2.J) +
                (quaternion2.K * quaternion2.K) +
                (quaternion2.U * quaternion2.U);

            <#= type #> b = one / a;

            <#= type #> c = -quaternion2.I * b;
            <#= type #> d = -quaternion2.J * b;
            <#= type #> e = -quaternion2.K * b;
            <#= type #> f = quaternion2.U * b;

            <#= type #> g = (y * e) - (z * d);
            <#= type #> h = (z * c) - (x * e);
            <#= type #> i = (x * d) - (y * c);
            <#= type #> j = ((x * c) + (y * d)) + (z * e);

            result.I = (x * f) + (c * w) + g;
            result.J = (y * f) + (d * w) + h;
            result.K = (z * f) + (e * w) + i;
            result.U = (w * f) - j;
        }

        /// <summary>
        /// Performs division of a Quaternion object and a <#= type #> precision
        /// scaling factor.
        /// </summary>
        public static void Divide (
            ref Quaternion quaternion1,
            ref <#= type #> divider,
            out Quaternion result)
        {
            <#= type #> one = 1;
            <#= type #> a = one / divider;

            result.I = quaternion1.I * a;
            result.J = quaternion1.J * a;
            result.K = quaternion1.K * a;
            result.U = quaternion1.U * a;
        }
*/
