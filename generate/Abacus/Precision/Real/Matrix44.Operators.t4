        // Equality Operators //----------------------------------------------//

        /// <summary>
        /// Determines whether or not two Matrix44 objects are equal using the
        /// (X==Y) operator.
        /// </summary>
        public static void Equals (
            ref Matrix44 value1,
            ref Matrix44 value2,
            out Boolean result)
        {
            result =
                (value1.M00 == value2.M00) &&
                (value1.M11 == value2.M11) &&
                (value1.M22 == value2.M22) &&
                (value1.M33 == value2.M33) &&
                (value1.M01 == value2.M01) &&
                (value1.M02 == value2.M02) &&
                (value1.M03 == value2.M03) &&
                (value1.M10 == value2.M10) &&
                (value1.M12 == value2.M12) &&
                (value1.M13 == value2.M13) &&
                (value1.M20 == value2.M20) &&
                (value1.M21 == value2.M21) &&
                (value1.M23 == value2.M23) &&
                (value1.M30 == value2.M30) &&
                (value1.M31 == value2.M31) &&
                (value1.M32 == value2.M32);
        }

        // Addition Operators //----------------------------------------------//

        /// <summary>
        /// Performs addition of two Matrix44 objects.
        /// </summary>
        public static void Add (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.M00 = matrix1.M00 + matrix2.M00;
            result.M01 = matrix1.M01 + matrix2.M01;
            result.M02 = matrix1.M02 + matrix2.M02;
            result.M03 = matrix1.M03 + matrix2.M03;
            result.M10 = matrix1.M10 + matrix2.M10;
            result.M11 = matrix1.M11 + matrix2.M11;
            result.M12 = matrix1.M12 + matrix2.M12;
            result.M13 = matrix1.M13 + matrix2.M13;
            result.M20 = matrix1.M20 + matrix2.M20;
            result.M21 = matrix1.M21 + matrix2.M21;
            result.M22 = matrix1.M22 + matrix2.M22;
            result.M23 = matrix1.M23 + matrix2.M23;
            result.M30 = matrix1.M30 + matrix2.M30;
            result.M31 = matrix1.M31 + matrix2.M31;
            result.M32 = matrix1.M32 + matrix2.M32;
            result.M33 = matrix1.M33 + matrix2.M33;
        }

        // Subtraction Operators //-------------------------------------------//

        /// <summary>
        /// Performs subtraction of two Matrix44 objects.
        /// </summary>
        public static void Subtract (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.M00 = matrix1.M00 - matrix2.M00;
            result.M01 = matrix1.M01 - matrix2.M01;
            result.M02 = matrix1.M02 - matrix2.M02;
            result.M03 = matrix1.M03 - matrix2.M03;
            result.M10 = matrix1.M10 - matrix2.M10;
            result.M11 = matrix1.M11 - matrix2.M11;
            result.M12 = matrix1.M12 - matrix2.M12;
            result.M13 = matrix1.M13 - matrix2.M13;
            result.M20 = matrix1.M20 - matrix2.M20;
            result.M21 = matrix1.M21 - matrix2.M21;
            result.M22 = matrix1.M22 - matrix2.M22;
            result.M23 = matrix1.M23 - matrix2.M23;
            result.M30 = matrix1.M30 - matrix2.M30;
            result.M31 = matrix1.M31 - matrix2.M31;
            result.M32 = matrix1.M32 - matrix2.M32;
            result.M33 = matrix1.M33 - matrix2.M33;
        }

        // Negation Operators //----------------------------------------------//

        /// <summary>
        /// Performs negation of a Matrix44 object.
        /// </summary>
        public static void Negate (ref Matrix44 matrix, out Matrix44 result)
        {
            result.M00 = -matrix.M00;
            result.M01 = -matrix.M01;
            result.M02 = -matrix.M02;
            result.M03 = -matrix.M03;
            result.M10 = -matrix.M10;
            result.M11 = -matrix.M11;
            result.M12 = -matrix.M12;
            result.M13 = -matrix.M13;
            result.M20 = -matrix.M20;
            result.M21 = -matrix.M21;
            result.M22 = -matrix.M22;
            result.M23 = -matrix.M23;
            result.M30 = -matrix.M30;
            result.M31 = -matrix.M31;
            result.M32 = -matrix.M32;
            result.M33 = -matrix.M33;
        }

        // Multiplication Operators //----------------------------------------//

        /// <summary>
        /// Performs muliplication of two Matrix44 objects.
        /// </summary>
        public static void Multiply (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.M00 =
                (matrix1.M00 * matrix2.M00) +
                (matrix1.M01 * matrix2.M10) +
                (matrix1.M02 * matrix2.M20) +
                (matrix1.M03 * matrix2.M30);

            result.M01 =
                (matrix1.M00 * matrix2.M01) +
                (matrix1.M01 * matrix2.M11) +
                (matrix1.M02 * matrix2.M21) +
                (matrix1.M03 * matrix2.M31);

            result.M02 =
                (matrix1.M00 * matrix2.M02) +
                (matrix1.M01 * matrix2.M12) +
                (matrix1.M02 * matrix2.M22) +
                (matrix1.M03 * matrix2.M32);

            result.M03 =
                (matrix1.M00 * matrix2.M03) +
                (matrix1.M01 * matrix2.M13) +
                (matrix1.M02 * matrix2.M23) +
                (matrix1.M03 * matrix2.M33);

            result.M10 =
                (matrix1.M10 * matrix2.M00) +
                (matrix1.M11 * matrix2.M10) +
                (matrix1.M12 * matrix2.M20) +
                (matrix1.M13 * matrix2.M30);

            result.M11 =
                (matrix1.M10 * matrix2.M01) +
                (matrix1.M11 * matrix2.M11) +
                (matrix1.M12 * matrix2.M21) +
                (matrix1.M13 * matrix2.M31);

            result.M12 =
                (matrix1.M10 * matrix2.M02) +
                (matrix1.M11 * matrix2.M12) +
                (matrix1.M12 * matrix2.M22) +
                (matrix1.M13 * matrix2.M32);

            result.M13 =
                (matrix1.M10 * matrix2.M03) +
                (matrix1.M11 * matrix2.M13) +
                (matrix1.M12 * matrix2.M23) +
                (matrix1.M13 * matrix2.M33);

            result.M20 =
                (matrix1.M20 * matrix2.M00) +
                (matrix1.M21 * matrix2.M10) +
                (matrix1.M22 * matrix2.M20) +
                (matrix1.M23 * matrix2.M30);

            result.M21 =
                (matrix1.M20 * matrix2.M01) +
                (matrix1.M21 * matrix2.M11) +
                (matrix1.M22 * matrix2.M21) +
                (matrix1.M23 * matrix2.M31);

            result.M22 =
                (matrix1.M20 * matrix2.M02) +
                (matrix1.M21 * matrix2.M12) +
                (matrix1.M22 * matrix2.M22) +
                (matrix1.M23 * matrix2.M32);

            result.M23 =
                (matrix1.M20 * matrix2.M03) +
                (matrix1.M21 * matrix2.M13) +
                (matrix1.M22 * matrix2.M23) +
                (matrix1.M23 * matrix2.M33);

            result.M30 =
                (matrix1.M30 * matrix2.M00) +
                (matrix1.M31 * matrix2.M10) +
                (matrix1.M32 * matrix2.M20) +
                (matrix1.M33 * matrix2.M30);

            result.M31 =
                (matrix1.M30 * matrix2.M01) +
                (matrix1.M31 * matrix2.M11) +
                (matrix1.M32 * matrix2.M21) +
                (matrix1.M33 * matrix2.M31);

            result.M32 =
                (matrix1.M30 * matrix2.M02) +
                (matrix1.M31 * matrix2.M12) +
                (matrix1.M32 * matrix2.M22) +
                (matrix1.M33 * matrix2.M32);

            result.M33 =
                (matrix1.M30 * matrix2.M03) +
                (matrix1.M31 * matrix2.M13) +
                (matrix1.M32 * matrix2.M23) +
                (matrix1.M33 * matrix2.M33);
        }

        /// <summary>
        /// Performs multiplication of a Matrix44 object and a <#= type #>
        /// precision scaling factor.
        /// </summary>
        public static void Multiply (
            ref Matrix44 matrix1,
            ref <#= type #> scaleFactor,
            out Matrix44 result)
        {
            result.M00 = matrix1.M00 * scaleFactor;
            result.M01 = matrix1.M01 * scaleFactor;
            result.M02 = matrix1.M02 * scaleFactor;
            result.M03 = matrix1.M03 * scaleFactor;
            result.M10 = matrix1.M10 * scaleFactor;
            result.M11 = matrix1.M11 * scaleFactor;
            result.M12 = matrix1.M12 * scaleFactor;
            result.M13 = matrix1.M13 * scaleFactor;
            result.M20 = matrix1.M20 * scaleFactor;
            result.M21 = matrix1.M21 * scaleFactor;
            result.M22 = matrix1.M22 * scaleFactor;
            result.M23 = matrix1.M23 * scaleFactor;
            result.M30 = matrix1.M30 * scaleFactor;
            result.M31 = matrix1.M31 * scaleFactor;
            result.M32 = matrix1.M32 * scaleFactor;
            result.M33 = matrix1.M33 * scaleFactor;
        }

        // Division Operators //----------------------------------------------//

        /// <summary>
        /// Performs division of two Matrix44 objects.
        /// </summary>
        public static void Divide (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.M00 = matrix1.M00 / matrix2.M00;
            result.M01 = matrix1.M01 / matrix2.M01;
            result.M02 = matrix1.M02 / matrix2.M02;
            result.M03 = matrix1.M03 / matrix2.M03;
            result.M10 = matrix1.M10 / matrix2.M10;
            result.M11 = matrix1.M11 / matrix2.M11;
            result.M12 = matrix1.M12 / matrix2.M12;
            result.M13 = matrix1.M13 / matrix2.M13;
            result.M20 = matrix1.M20 / matrix2.M20;
            result.M21 = matrix1.M21 / matrix2.M21;
            result.M22 = matrix1.M22 / matrix2.M22;
            result.M23 = matrix1.M23 / matrix2.M23;
            result.M30 = matrix1.M30 / matrix2.M30;
            result.M31 = matrix1.M31 / matrix2.M31;
            result.M32 = matrix1.M32 / matrix2.M32;
            result.M33 = matrix1.M33 / matrix2.M33;
        }

        /// <summary>
        /// Performs division of a Matrix44 object and a <#= type #> precision
        /// scaling factor.
        /// </summary>
        public static void Divide (
            ref Matrix44 matrix1,
            ref <#= type #> divider,
            out Matrix44 result)
        {
            result.M00 = matrix1.M00 / divider;
            result.M01 = matrix1.M01 / divider;
            result.M02 = matrix1.M02 / divider;
            result.M03 = matrix1.M03 / divider;
            result.M10 = matrix1.M10 / divider;
            result.M11 = matrix1.M11 / divider;
            result.M12 = matrix1.M12 / divider;
            result.M13 = matrix1.M13 / divider;
            result.M20 = matrix1.M20 / divider;
            result.M21 = matrix1.M21 / divider;
            result.M22 = matrix1.M22 / divider;
            result.M23 = matrix1.M23 / divider;
            result.M30 = matrix1.M30 / divider;
            result.M31 = matrix1.M31 / divider;
            result.M32 = matrix1.M32 / divider;
            result.M33 = matrix1.M33 / divider;
        }

