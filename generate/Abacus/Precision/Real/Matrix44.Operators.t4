		// Equality Operators //----------------------------------------------//

		/// <summary>
		/// Determines whether or not this Matrix44 object is equal to another
		/// object
		/// </summary>
		public override Boolean Equals (Object obj)
		{
			Boolean flag = false;

			if (obj is Matrix44)
			{
				flag = this.Equals ((Matrix44) obj);
			}
			
			return flag;
		}

		#region IEquatable<Matrix44>

		/// <summary>
		/// Determines whether or not this Matrix44 object is equal to another
		/// Matrix44 object.
		/// </summary>
		public Boolean Equals (Matrix44 other)
		{
			return 
				(this.M11 == other.M11) && 
				(this.M22 == other.M22) && 
				(this.M33 == other.M33) && 
				(this.M44 == other.M44) && 
				(this.M12 == other.M12) && 
				(this.M13 == other.M13) && 
				(this.M14 == other.M14) && 
				(this.M21 == other.M21) && 
				(this.M23 == other.M23) && 
				(this.M24 == other.M24) && 
				(this.M31 == other.M31) && 
				(this.M32 == other.M32) && 
				(this.M34 == other.M34) && 
				(this.M41 == other.M41) && 
				(this.M42 == other.M42) && 
				(this.M43 == other.M43);
		}

		#endregion

		/// <summary>
		/// Determines whether or not two Matrix44 objects are equal using the
		/// (X==Y) operator.
		/// </summary>
		public static Boolean operator == (Matrix44 matrix1, Matrix44 matrix2)
		{
			return ((((((matrix1.M11 == matrix2.M11) && (matrix1.M22 == matrix2.M22)) && ((matrix1.M33 == matrix2.M33) && (matrix1.M44 == matrix2.M44))) && (((matrix1.M12 == matrix2.M12) && (matrix1.M13 == matrix2.M13)) && ((matrix1.M14 == matrix2.M14) && (matrix1.M21 == matrix2.M21)))) && ((((matrix1.M23 == matrix2.M23) && (matrix1.M24 == matrix2.M24)) && ((matrix1.M31 == matrix2.M31) && (matrix1.M32 == matrix2.M32))) && (((matrix1.M34 == matrix2.M34) && (matrix1.M41 == matrix2.M41)) && (matrix1.M42 == matrix2.M42)))) && (matrix1.M43 == matrix2.M43));
		}
		
		/// <summary>
		/// Determines whether or not two Matrix44 objects are not equal using
		/// the (X!=Y) operator.
		/// </summary>
		public static Boolean operator != (Matrix44 matrix1, Matrix44 matrix2)
		{
			if ((matrix1.M11 == matrix2.M11) && 
				(matrix1.M12 == matrix2.M12) && 
				(matrix1.M13 == matrix2.M13) && 
				(matrix1.M14 == matrix2.M14) && 
				(matrix1.M21 == matrix2.M21) && 
				(matrix1.M22 == matrix2.M22) && 
				(matrix1.M23 == matrix2.M23) && 
				(matrix1.M24 == matrix2.M24) && 
				(matrix1.M31 == matrix2.M31) && 
				(matrix1.M32 == matrix2.M32) && 
				(matrix1.M33 == matrix2.M33) && 
				(matrix1.M34 == matrix2.M34) && 
				(matrix1.M41 == matrix2.M41) && 
				(matrix1.M42 == matrix2.M42) && 
				(matrix1.M43 == matrix2.M43))
			{
				return !(matrix1.M44 == matrix2.M44);
			}

			return true;
		}

		// Addition Operators //----------------------------------------------//

		/// <summary>
		/// Performs addition of two Matrix44 objects.
		/// </summary>
		public static void Add (ref Matrix44 matrix1, ref Matrix44 matrix2, out Matrix44 result)
		{
			result.M11 = matrix1.M11 + matrix2.M11;
			result.M12 = matrix1.M12 + matrix2.M12;
			result.M13 = matrix1.M13 + matrix2.M13;
			result.M14 = matrix1.M14 + matrix2.M14;
			result.M21 = matrix1.M21 + matrix2.M21;
			result.M22 = matrix1.M22 + matrix2.M22;
			result.M23 = matrix1.M23 + matrix2.M23;
			result.M24 = matrix1.M24 + matrix2.M24;
			result.M31 = matrix1.M31 + matrix2.M31;
			result.M32 = matrix1.M32 + matrix2.M32;
			result.M33 = matrix1.M33 + matrix2.M33;
			result.M34 = matrix1.M34 + matrix2.M34;
			result.M41 = matrix1.M41 + matrix2.M41;
			result.M42 = matrix1.M42 + matrix2.M42;
			result.M43 = matrix1.M43 + matrix2.M43;
			result.M44 = matrix1.M44 + matrix2.M44;
		}

		/// <summary>
		/// Performs addition of two Matrix44 objects using the (X+Y) operator. 
		/// </summary>
		public static Matrix44 operator + (Matrix44 matrix1, Matrix44 matrix2)
		{
			Matrix44 result;
			result.M11 = matrix1.M11 + matrix2.M11;
			result.M12 = matrix1.M12 + matrix2.M12;
			result.M13 = matrix1.M13 + matrix2.M13;
			result.M14 = matrix1.M14 + matrix2.M14;
			result.M21 = matrix1.M21 + matrix2.M21;
			result.M22 = matrix1.M22 + matrix2.M22;
			result.M23 = matrix1.M23 + matrix2.M23;
			result.M24 = matrix1.M24 + matrix2.M24;
			result.M31 = matrix1.M31 + matrix2.M31;
			result.M32 = matrix1.M32 + matrix2.M32;
			result.M33 = matrix1.M33 + matrix2.M33;
			result.M34 = matrix1.M34 + matrix2.M34;
			result.M41 = matrix1.M41 + matrix2.M41;
			result.M42 = matrix1.M42 + matrix2.M42;
			result.M43 = matrix1.M43 + matrix2.M43;
			result.M44 = matrix1.M44 + matrix2.M44;
			return result;
		}

		// Subtraction Operators //-------------------------------------------//

		/// <summary>
		/// Performs subtraction of two Matrix44 objects.
		/// </summary>
		public static void Subtract (ref Matrix44 matrix1, ref Matrix44 matrix2, out Matrix44 result)
		{
			result.M11 = matrix1.M11 - matrix2.M11;
			result.M12 = matrix1.M12 - matrix2.M12;
			result.M13 = matrix1.M13 - matrix2.M13;
			result.M14 = matrix1.M14 - matrix2.M14;
			result.M21 = matrix1.M21 - matrix2.M21;
			result.M22 = matrix1.M22 - matrix2.M22;
			result.M23 = matrix1.M23 - matrix2.M23;
			result.M24 = matrix1.M24 - matrix2.M24;
			result.M31 = matrix1.M31 - matrix2.M31;
			result.M32 = matrix1.M32 - matrix2.M32;
			result.M33 = matrix1.M33 - matrix2.M33;
			result.M34 = matrix1.M34 - matrix2.M34;
			result.M41 = matrix1.M41 - matrix2.M41;
			result.M42 = matrix1.M42 - matrix2.M42;
			result.M43 = matrix1.M43 - matrix2.M43;
			result.M44 = matrix1.M44 - matrix2.M44;
		}

		/// <summary>
		/// Performs subtraction of two Matrix44 objects using the (X-Y) 
		/// operator.
		/// </summary>
		public static Matrix44 operator - (Matrix44 matrix1, Matrix44 matrix2)
		{
			Matrix44 result;
			result.M11 = matrix1.M11 - matrix2.M11;
			result.M12 = matrix1.M12 - matrix2.M12;
			result.M13 = matrix1.M13 - matrix2.M13;
			result.M14 = matrix1.M14 - matrix2.M14;
			result.M21 = matrix1.M21 - matrix2.M21;
			result.M22 = matrix1.M22 - matrix2.M22;
			result.M23 = matrix1.M23 - matrix2.M23;
			result.M24 = matrix1.M24 - matrix2.M24;
			result.M31 = matrix1.M31 - matrix2.M31;
			result.M32 = matrix1.M32 - matrix2.M32;
			result.M33 = matrix1.M33 - matrix2.M33;
			result.M34 = matrix1.M34 - matrix2.M34;
			result.M41 = matrix1.M41 - matrix2.M41;
			result.M42 = matrix1.M42 - matrix2.M42;
			result.M43 = matrix1.M43 - matrix2.M43;
			result.M44 = matrix1.M44 - matrix2.M44;
			return result;
		}

		// Negation Operators //----------------------------------------------//
		
		/// <summary>
		/// Performs negation of a Matrix44 object.
		/// </summary>
		public static void Negate (ref Matrix44 matrix, out Matrix44 result)
		{
			result.M11 = -matrix.M11;
			result.M12 = -matrix.M12;
			result.M13 = -matrix.M13;
			result.M14 = -matrix.M14;
			result.M21 = -matrix.M21;
			result.M22 = -matrix.M22;
			result.M23 = -matrix.M23;
			result.M24 = -matrix.M24;
			result.M31 = -matrix.M31;
			result.M32 = -matrix.M32;
			result.M33 = -matrix.M33;
			result.M34 = -matrix.M34;
			result.M41 = -matrix.M41;
			result.M42 = -matrix.M42;
			result.M43 = -matrix.M43;
			result.M44 = -matrix.M44;
		}

		/// <summary>
		/// Performs negation of a Matrix44 object using the (-X) operator.
		/// </summary>
		public static Matrix44 operator - (Matrix44 matrix)
		{
			Matrix44 result;
			result.M11 = -matrix.M11;
			result.M12 = -matrix.M12;
			result.M13 = -matrix.M13;
			result.M14 = -matrix.M14;
			result.M21 = -matrix.M21;
			result.M22 = -matrix.M22;
			result.M23 = -matrix.M23;
			result.M24 = -matrix.M24;
			result.M31 = -matrix.M31;
			result.M32 = -matrix.M32;
			result.M33 = -matrix.M33;
			result.M34 = -matrix.M34;
			result.M41 = -matrix.M41;
			result.M42 = -matrix.M42;
			result.M43 = -matrix.M43;
			result.M44 = -matrix.M44;
			return result;
		}
		
		// Multiplication Operators //----------------------------------------//

		/// <summary>
		/// Performs muliplication of two Matrix44 objects.
		/// </summary>
		public static void Multiply (ref Matrix44 matrix1, ref Matrix44 matrix2, out Matrix44 result)
		{	
			result.M11 = 
				(matrix1.M11 * matrix2.M11) + 
				(matrix1.M12 * matrix2.M21) + 
				(matrix1.M13 * matrix2.M31) + 
				(matrix1.M14 * matrix2.M41);

			result.M12 =
				(matrix1.M11 * matrix2.M12) + 
				(matrix1.M12 * matrix2.M22) + 
				(matrix1.M13 * matrix2.M32) + 
				(matrix1.M14 * matrix2.M42);

			result.M13 = 
				(matrix1.M11 * matrix2.M13) + 
				(matrix1.M12 * matrix2.M23) + 
				(matrix1.M13 * matrix2.M33) + 
				(matrix1.M14 * matrix2.M43);

			result.M14 = 
				(matrix1.M11 * matrix2.M14) + 
				(matrix1.M12 * matrix2.M24) + 
				(matrix1.M13 * matrix2.M34) + 
				(matrix1.M14 * matrix2.M44);

			result.M21 = 
				(matrix1.M21 * matrix2.M11) + 
				(matrix1.M22 * matrix2.M21) + 
				(matrix1.M23 * matrix2.M31) + 
				(matrix1.M24 * matrix2.M41);

			result.M22 = 
				(matrix1.M21 * matrix2.M12) + 
				(matrix1.M22 * matrix2.M22) + 
				(matrix1.M23 * matrix2.M32) + 
				(matrix1.M24 * matrix2.M42);

			result.M23 = 
				(matrix1.M21 * matrix2.M13) + 
				(matrix1.M22 * matrix2.M23) + 
				(matrix1.M23 * matrix2.M33) + 
				(matrix1.M24 * matrix2.M43);

			result.M24 = 
				(matrix1.M21 * matrix2.M14) + 
				(matrix1.M22 * matrix2.M24) + 
				(matrix1.M23 * matrix2.M34) + 
				(matrix1.M24 * matrix2.M44);

			result.M31 = 
				(matrix1.M31 * matrix2.M11) + 
				(matrix1.M32 * matrix2.M21) + 
				(matrix1.M33 * matrix2.M31) + 
				(matrix1.M34 * matrix2.M41);

			result.M32 = 
				(matrix1.M31 * matrix2.M12) + 
				(matrix1.M32 * matrix2.M22) + 
				(matrix1.M33 * matrix2.M32) + 
				(matrix1.M34 * matrix2.M42);

			result.M33 = 
				(matrix1.M31 * matrix2.M13) + 
				(matrix1.M32 * matrix2.M23) + 
				(matrix1.M33 * matrix2.M33) + 
				(matrix1.M34 * matrix2.M43);

			result.M34 = 
				(matrix1.M31 * matrix2.M14) + 
				(matrix1.M32 * matrix2.M24) + 
				(matrix1.M33 * matrix2.M34) + 
				(matrix1.M34 * matrix2.M44);

			result.M41 = 
				(matrix1.M41 * matrix2.M11) + 
				(matrix1.M42 * matrix2.M21) + 
				(matrix1.M43 * matrix2.M31) + 
				(matrix1.M44 * matrix2.M41);

			result.M42 = 
				(matrix1.M41 * matrix2.M12) + 
				(matrix1.M42 * matrix2.M22) + 
				(matrix1.M43 * matrix2.M32) + 
				(matrix1.M44 * matrix2.M42);

			result.M43 = 
				(matrix1.M41 * matrix2.M13) + 
				(matrix1.M42 * matrix2.M23) + 
				(matrix1.M43 * matrix2.M33) + 
				(matrix1.M44 * matrix2.M43);

			result.M44 = 
				(matrix1.M41 * matrix2.M14) + 
				(matrix1.M42 * matrix2.M24) + 
				(matrix1.M43 * matrix2.M34) + 
				(matrix1.M44 * matrix2.M44);
		}

		/// <summary>
		/// Performs multiplication of a Matrix44 object and a <#= type #>
		/// precision scaling factor.
		/// </summary>
		public static void Multiply (ref Matrix44 matrix1, <#= type #> scaleFactor, out Matrix44 result)
		{
			result.M11 = matrix1.M11 * scaleFactor;
			result.M12 = matrix1.M12 * scaleFactor;
			result.M13 = matrix1.M13 * scaleFactor;
			result.M14 = matrix1.M14 * scaleFactor;
			result.M21 = matrix1.M21 * scaleFactor;
			result.M22 = matrix1.M22 * scaleFactor;
			result.M23 = matrix1.M23 * scaleFactor;
			result.M24 = matrix1.M24 * scaleFactor;
			result.M31 = matrix1.M31 * scaleFactor;
			result.M32 = matrix1.M32 * scaleFactor;
			result.M33 = matrix1.M33 * scaleFactor;
			result.M34 = matrix1.M34 * scaleFactor;
			result.M41 = matrix1.M41 * scaleFactor;
			result.M42 = matrix1.M42 * scaleFactor;
			result.M43 = matrix1.M43 * scaleFactor;
			result.M44 = matrix1.M44 * scaleFactor;
		}

		/// <summary>
		/// Performs muliplication of two Matrix44 objects using the (X*Y)
		/// operator.
		/// </summary>
		public static Matrix44 operator * (Matrix44 matrix1, Matrix44 matrix2)
		{
			Matrix44 result;
			
			result.M11 = 
				(matrix1.M11 * matrix2.M11) + 
				(matrix1.M12 * matrix2.M21) + 
				(matrix1.M13 * matrix2.M31) + 
				(matrix1.M14 * matrix2.M41);

			result.M12 =
				(matrix1.M11 * matrix2.M12) + 
				(matrix1.M12 * matrix2.M22) + 
				(matrix1.M13 * matrix2.M32) + 
				(matrix1.M14 * matrix2.M42);

			result.M13 = 
				(matrix1.M11 * matrix2.M13) + 
				(matrix1.M12 * matrix2.M23) + 
				(matrix1.M13 * matrix2.M33) + 
				(matrix1.M14 * matrix2.M43);

			result.M14 = 
				(matrix1.M11 * matrix2.M14) + 
				(matrix1.M12 * matrix2.M24) + 
				(matrix1.M13 * matrix2.M34) + 
				(matrix1.M14 * matrix2.M44);

			result.M21 = 
				(matrix1.M21 * matrix2.M11) + 
				(matrix1.M22 * matrix2.M21) + 
				(matrix1.M23 * matrix2.M31) + 
				(matrix1.M24 * matrix2.M41);

			result.M22 = 
				(matrix1.M21 * matrix2.M12) + 
				(matrix1.M22 * matrix2.M22) + 
				(matrix1.M23 * matrix2.M32) + 
				(matrix1.M24 * matrix2.M42);

			result.M23 = 
				(matrix1.M21 * matrix2.M13) + 
				(matrix1.M22 * matrix2.M23) + 
				(matrix1.M23 * matrix2.M33) + 
				(matrix1.M24 * matrix2.M43);

			result.M24 = 
				(matrix1.M21 * matrix2.M14) + 
				(matrix1.M22 * matrix2.M24) + 
				(matrix1.M23 * matrix2.M34) + 
				(matrix1.M24 * matrix2.M44);

			result.M31 = 
				(matrix1.M31 * matrix2.M11) + 
				(matrix1.M32 * matrix2.M21) + 
				(matrix1.M33 * matrix2.M31) + 
				(matrix1.M34 * matrix2.M41);

			result.M32 = 
				(matrix1.M31 * matrix2.M12) + 
				(matrix1.M32 * matrix2.M22) + 
				(matrix1.M33 * matrix2.M32) + 
				(matrix1.M34 * matrix2.M42);

			result.M33 = 
				(matrix1.M31 * matrix2.M13) + 
				(matrix1.M32 * matrix2.M23) + 
				(matrix1.M33 * matrix2.M33) + 
				(matrix1.M34 * matrix2.M43);

			result.M34 = 
				(matrix1.M31 * matrix2.M14) + 
				(matrix1.M32 * matrix2.M24) + 
				(matrix1.M33 * matrix2.M34) + 
				(matrix1.M34 * matrix2.M44);

			result.M41 = 
				(matrix1.M41 * matrix2.M11) + 
				(matrix1.M42 * matrix2.M21) + 
				(matrix1.M43 * matrix2.M31) + 
				(matrix1.M44 * matrix2.M41);

			result.M42 = 
				(matrix1.M41 * matrix2.M12) + 
				(matrix1.M42 * matrix2.M22) + 
				(matrix1.M43 * matrix2.M32) + 
				(matrix1.M44 * matrix2.M42);

			result.M43 = 
				(matrix1.M41 * matrix2.M13) + 
				(matrix1.M42 * matrix2.M23) + 
				(matrix1.M43 * matrix2.M33) + 
				(matrix1.M44 * matrix2.M43);

			result.M44 = 
				(matrix1.M41 * matrix2.M14) + 
				(matrix1.M42 * matrix2.M24) + 
				(matrix1.M43 * matrix2.M34) + 
				(matrix1.M44 * matrix2.M44);

			return result;
		}
		
		/// <summary>
		/// Performs multiplication of a Matrix44 object and a <#= type #>
		/// precision scaling factor using the (X*y) operator.
		/// </summary>
		public static Matrix44 operator * (Matrix44 matrix1, <#= type #> scaleFactor)
		{
			Matrix44 result;
			result.M11 = matrix1.M11 * scaleFactor;
			result.M12 = matrix1.M12 * scaleFactor;
			result.M13 = matrix1.M13 * scaleFactor;
			result.M14 = matrix1.M14 * scaleFactor;
			result.M21 = matrix1.M21 * scaleFactor;
			result.M22 = matrix1.M22 * scaleFactor;
			result.M23 = matrix1.M23 * scaleFactor;
			result.M24 = matrix1.M24 * scaleFactor;
			result.M31 = matrix1.M31 * scaleFactor;
			result.M32 = matrix1.M32 * scaleFactor;
			result.M33 = matrix1.M33 * scaleFactor;
			result.M34 = matrix1.M34 * scaleFactor;
			result.M41 = matrix1.M41 * scaleFactor;
			result.M42 = matrix1.M42 * scaleFactor;
			result.M43 = matrix1.M43 * scaleFactor;
			result.M44 = matrix1.M44 * scaleFactor;
			return result;
		}
		
		/// <summary>
		/// Performs multiplication of a <#= type #> precision scaling factor 
		/// and aMatrix44 object using the (x*Y) operator.
		/// </summary>
		public static Matrix44 operator * (<#= type #> scaleFactor, Matrix44 matrix1)
		{
			Matrix44 result;
			result.M11 = matrix1.M11 * scaleFactor;
			result.M12 = matrix1.M12 * scaleFactor;
			result.M13 = matrix1.M13 * scaleFactor;
			result.M14 = matrix1.M14 * scaleFactor;
			result.M21 = matrix1.M21 * scaleFactor;
			result.M22 = matrix1.M22 * scaleFactor;
			result.M23 = matrix1.M23 * scaleFactor;
			result.M24 = matrix1.M24 * scaleFactor;
			result.M31 = matrix1.M31 * scaleFactor;
			result.M32 = matrix1.M32 * scaleFactor;
			result.M33 = matrix1.M33 * scaleFactor;
			result.M34 = matrix1.M34 * scaleFactor;
			result.M41 = matrix1.M41 * scaleFactor;
			result.M42 = matrix1.M42 * scaleFactor;
			result.M43 = matrix1.M43 * scaleFactor;
			result.M44 = matrix1.M44 * scaleFactor;
			return result;
		}
		
		// Division Operators //----------------------------------------------//

		/// <summary>
		/// Performs division of two Matrix44 objects.
		/// </summary>
		public static void Divide (ref Matrix44 matrix1, ref Matrix44 matrix2, out Matrix44 result)
		{
			result.M11 = matrix1.M11 / matrix2.M11;
			result.M12 = matrix1.M12 / matrix2.M12;
			result.M13 = matrix1.M13 / matrix2.M13;
			result.M14 = matrix1.M14 / matrix2.M14;
			result.M21 = matrix1.M21 / matrix2.M21;
			result.M22 = matrix1.M22 / matrix2.M22;
			result.M23 = matrix1.M23 / matrix2.M23;
			result.M24 = matrix1.M24 / matrix2.M24;
			result.M31 = matrix1.M31 / matrix2.M31;
			result.M32 = matrix1.M32 / matrix2.M32;
			result.M33 = matrix1.M33 / matrix2.M33;
			result.M34 = matrix1.M34 / matrix2.M34;
			result.M41 = matrix1.M41 / matrix2.M41;
			result.M42 = matrix1.M42 / matrix2.M42;
			result.M43 = matrix1.M43 / matrix2.M43;
			result.M44 = matrix1.M44 / matrix2.M44;
		}

		/// <summary>
		/// Performs division of a Matrix44 object and a <#= type #> precision
		/// scaling factor.
		/// </summary>
		public static void Divide (ref Matrix44 matrix1, <#= type #> divider, out Matrix44 result)
		{
			result.M11 = matrix1.M11 / divider;
			result.M12 = matrix1.M12 / divider;
			result.M13 = matrix1.M13 / divider;
			result.M14 = matrix1.M14 / divider;
			result.M21 = matrix1.M21 / divider;
			result.M22 = matrix1.M22 / divider;
			result.M23 = matrix1.M23 / divider;
			result.M24 = matrix1.M24 / divider;
			result.M31 = matrix1.M31 / divider;
			result.M32 = matrix1.M32 / divider;
			result.M33 = matrix1.M33 / divider;
			result.M34 = matrix1.M34 / divider;
			result.M41 = matrix1.M41 / divider;
			result.M42 = matrix1.M42 / divider;
			result.M43 = matrix1.M43 / divider;
			result.M44 = matrix1.M44 / divider;
		}

		/// <summary>
		/// Performs division of two Matrix44 objects using the (X/Y) operator.
		/// </summary>
		public static Matrix44 operator / (Matrix44 matrix1, Matrix44 matrix2)
		{
			Matrix44 result;

			result.M11 = matrix1.M11 / matrix2.M11;
			result.M12 = matrix1.M12 / matrix2.M12;
			result.M13 = matrix1.M13 / matrix2.M13;
			result.M14 = matrix1.M14 / matrix2.M14;
			result.M21 = matrix1.M21 / matrix2.M21;
			result.M22 = matrix1.M22 / matrix2.M22;
			result.M23 = matrix1.M23 / matrix2.M23;
			result.M24 = matrix1.M24 / matrix2.M24;
			result.M31 = matrix1.M31 / matrix2.M31;
			result.M32 = matrix1.M32 / matrix2.M32;
			result.M33 = matrix1.M33 / matrix2.M33;
			result.M34 = matrix1.M34 / matrix2.M34;
			result.M41 = matrix1.M41 / matrix2.M41;
			result.M42 = matrix1.M42 / matrix2.M42;
			result.M43 = matrix1.M43 / matrix2.M43;
			result.M44 = matrix1.M44 / matrix2.M44;

			return result;
		}
		
		/// <summary>
		/// Performs division of a Matrix44 object and a <#= type #> precision
		/// scaling factor using the (X/y) operator.
		/// </summary>
		public static Matrix44 operator / (Matrix44 matrix1, <#= type #> divider)
		{
			Matrix44 result;

			result.M11 = matrix1.M11 / divider;
			result.M12 = matrix1.M12 / divider;
			result.M13 = matrix1.M13 / divider;
			result.M14 = matrix1.M14 / divider;
			result.M21 = matrix1.M21 / divider;
			result.M22 = matrix1.M22 / divider;
			result.M23 = matrix1.M23 / divider;
			result.M24 = matrix1.M24 / divider;
			result.M31 = matrix1.M31 / divider;
			result.M32 = matrix1.M32 / divider;
			result.M33 = matrix1.M33 / divider;
			result.M34 = matrix1.M34 / divider;
			result.M41 = matrix1.M41 / divider;
			result.M42 = matrix1.M42 / divider;
			result.M43 = matrix1.M43 / divider;
			result.M44 = matrix1.M44 / divider;

			return result;
		}

