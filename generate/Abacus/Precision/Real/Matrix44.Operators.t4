        // Equality Operators //----------------------------------------------//

        /// <summary>
        /// Determines whether or not two Matrix44 objects are equal using the
        /// (X==Y) operator.
        /// </summary>
        public static void Equals (
            ref Matrix44 value1,
            ref Matrix44 value2,
            out Boolean result)
        {
            result =
                (value1.M11 == value2.M11) &&
                (value1.M22 == value2.M22) &&
                (value1.M33 == value2.M33) &&
                (value1.M44 == value2.M44) &&
                (value1.M12 == value2.M12) &&
                (value1.M13 == value2.M13) &&
                (value1.M14 == value2.M14) &&
                (value1.M21 == value2.M21) &&
                (value1.M23 == value2.M23) &&
                (value1.M24 == value2.M24) &&
                (value1.M31 == value2.M31) &&
                (value1.M32 == value2.M32) &&
                (value1.M34 == value2.M34) &&
                (value1.M41 == value2.M41) &&
                (value1.M42 == value2.M42) &&
                (value1.M43 == value2.M43);
        }

        // Addition Operators //----------------------------------------------//

        /// <summary>
        /// Performs addition of two Matrix44 objects.
        /// </summary>
        public static void Add (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.M11 = matrix1.M11 + matrix2.M11;
            result.M12 = matrix1.M12 + matrix2.M12;
            result.M13 = matrix1.M13 + matrix2.M13;
            result.M14 = matrix1.M14 + matrix2.M14;
            result.M21 = matrix1.M21 + matrix2.M21;
            result.M22 = matrix1.M22 + matrix2.M22;
            result.M23 = matrix1.M23 + matrix2.M23;
            result.M24 = matrix1.M24 + matrix2.M24;
            result.M31 = matrix1.M31 + matrix2.M31;
            result.M32 = matrix1.M32 + matrix2.M32;
            result.M33 = matrix1.M33 + matrix2.M33;
            result.M34 = matrix1.M34 + matrix2.M34;
            result.M41 = matrix1.M41 + matrix2.M41;
            result.M42 = matrix1.M42 + matrix2.M42;
            result.M43 = matrix1.M43 + matrix2.M43;
            result.M44 = matrix1.M44 + matrix2.M44;
        }

        // Subtraction Operators //-------------------------------------------//

        /// <summary>
        /// Performs subtraction of two Matrix44 objects.
        /// </summary>
        public static void Subtract (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.M11 = matrix1.M11 - matrix2.M11;
            result.M12 = matrix1.M12 - matrix2.M12;
            result.M13 = matrix1.M13 - matrix2.M13;
            result.M14 = matrix1.M14 - matrix2.M14;
            result.M21 = matrix1.M21 - matrix2.M21;
            result.M22 = matrix1.M22 - matrix2.M22;
            result.M23 = matrix1.M23 - matrix2.M23;
            result.M24 = matrix1.M24 - matrix2.M24;
            result.M31 = matrix1.M31 - matrix2.M31;
            result.M32 = matrix1.M32 - matrix2.M32;
            result.M33 = matrix1.M33 - matrix2.M33;
            result.M34 = matrix1.M34 - matrix2.M34;
            result.M41 = matrix1.M41 - matrix2.M41;
            result.M42 = matrix1.M42 - matrix2.M42;
            result.M43 = matrix1.M43 - matrix2.M43;
            result.M44 = matrix1.M44 - matrix2.M44;
        }

        // Negation Operators //----------------------------------------------//

        /// <summary>
        /// Performs negation of a Matrix44 object.
        /// </summary>
        public static void Negate (ref Matrix44 matrix, out Matrix44 result)
        {
            result.M11 = -matrix.M11;
            result.M12 = -matrix.M12;
            result.M13 = -matrix.M13;
            result.M14 = -matrix.M14;
            result.M21 = -matrix.M21;
            result.M22 = -matrix.M22;
            result.M23 = -matrix.M23;
            result.M24 = -matrix.M24;
            result.M31 = -matrix.M31;
            result.M32 = -matrix.M32;
            result.M33 = -matrix.M33;
            result.M34 = -matrix.M34;
            result.M41 = -matrix.M41;
            result.M42 = -matrix.M42;
            result.M43 = -matrix.M43;
            result.M44 = -matrix.M44;
        }

        // Multiplication Operators //----------------------------------------//

        /// <summary>
        /// Performs muliplication of two Matrix44 objects.
        /// </summary>
        public static void Multiply (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.M11 =
                (matrix1.M11 * matrix2.M11) +
                (matrix1.M12 * matrix2.M21) +
                (matrix1.M13 * matrix2.M31) +
                (matrix1.M14 * matrix2.M41);

            result.M12 =
                (matrix1.M11 * matrix2.M12) +
                (matrix1.M12 * matrix2.M22) +
                (matrix1.M13 * matrix2.M32) +
                (matrix1.M14 * matrix2.M42);

            result.M13 =
                (matrix1.M11 * matrix2.M13) +
                (matrix1.M12 * matrix2.M23) +
                (matrix1.M13 * matrix2.M33) +
                (matrix1.M14 * matrix2.M43);

            result.M14 =
                (matrix1.M11 * matrix2.M14) +
                (matrix1.M12 * matrix2.M24) +
                (matrix1.M13 * matrix2.M34) +
                (matrix1.M14 * matrix2.M44);

            result.M21 =
                (matrix1.M21 * matrix2.M11) +
                (matrix1.M22 * matrix2.M21) +
                (matrix1.M23 * matrix2.M31) +
                (matrix1.M24 * matrix2.M41);

            result.M22 =
                (matrix1.M21 * matrix2.M12) +
                (matrix1.M22 * matrix2.M22) +
                (matrix1.M23 * matrix2.M32) +
                (matrix1.M24 * matrix2.M42);

            result.M23 =
                (matrix1.M21 * matrix2.M13) +
                (matrix1.M22 * matrix2.M23) +
                (matrix1.M23 * matrix2.M33) +
                (matrix1.M24 * matrix2.M43);

            result.M24 =
                (matrix1.M21 * matrix2.M14) +
                (matrix1.M22 * matrix2.M24) +
                (matrix1.M23 * matrix2.M34) +
                (matrix1.M24 * matrix2.M44);

            result.M31 =
                (matrix1.M31 * matrix2.M11) +
                (matrix1.M32 * matrix2.M21) +
                (matrix1.M33 * matrix2.M31) +
                (matrix1.M34 * matrix2.M41);

            result.M32 =
                (matrix1.M31 * matrix2.M12) +
                (matrix1.M32 * matrix2.M22) +
                (matrix1.M33 * matrix2.M32) +
                (matrix1.M34 * matrix2.M42);

            result.M33 =
                (matrix1.M31 * matrix2.M13) +
                (matrix1.M32 * matrix2.M23) +
                (matrix1.M33 * matrix2.M33) +
                (matrix1.M34 * matrix2.M43);

            result.M34 =
                (matrix1.M31 * matrix2.M14) +
                (matrix1.M32 * matrix2.M24) +
                (matrix1.M33 * matrix2.M34) +
                (matrix1.M34 * matrix2.M44);

            result.M41 =
                (matrix1.M41 * matrix2.M11) +
                (matrix1.M42 * matrix2.M21) +
                (matrix1.M43 * matrix2.M31) +
                (matrix1.M44 * matrix2.M41);

            result.M42 =
                (matrix1.M41 * matrix2.M12) +
                (matrix1.M42 * matrix2.M22) +
                (matrix1.M43 * matrix2.M32) +
                (matrix1.M44 * matrix2.M42);

            result.M43 =
                (matrix1.M41 * matrix2.M13) +
                (matrix1.M42 * matrix2.M23) +
                (matrix1.M43 * matrix2.M33) +
                (matrix1.M44 * matrix2.M43);

            result.M44 =
                (matrix1.M41 * matrix2.M14) +
                (matrix1.M42 * matrix2.M24) +
                (matrix1.M43 * matrix2.M34) +
                (matrix1.M44 * matrix2.M44);
        }

        /// <summary>
        /// Performs multiplication of a Matrix44 object and a <#= type #>
        /// precision scaling factor.
        /// </summary>
        public static void Multiply (
            ref Matrix44 matrix1,
            ref <#= type #> scaleFactor,
            out Matrix44 result)
        {
            result.M11 = matrix1.M11 * scaleFactor;
            result.M12 = matrix1.M12 * scaleFactor;
            result.M13 = matrix1.M13 * scaleFactor;
            result.M14 = matrix1.M14 * scaleFactor;
            result.M21 = matrix1.M21 * scaleFactor;
            result.M22 = matrix1.M22 * scaleFactor;
            result.M23 = matrix1.M23 * scaleFactor;
            result.M24 = matrix1.M24 * scaleFactor;
            result.M31 = matrix1.M31 * scaleFactor;
            result.M32 = matrix1.M32 * scaleFactor;
            result.M33 = matrix1.M33 * scaleFactor;
            result.M34 = matrix1.M34 * scaleFactor;
            result.M41 = matrix1.M41 * scaleFactor;
            result.M42 = matrix1.M42 * scaleFactor;
            result.M43 = matrix1.M43 * scaleFactor;
            result.M44 = matrix1.M44 * scaleFactor;
        }

        // Division Operators //----------------------------------------------//

        /// <summary>
        /// Performs division of two Matrix44 objects.
        /// </summary>
        public static void Divide (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.M11 = matrix1.M11 / matrix2.M11;
            result.M12 = matrix1.M12 / matrix2.M12;
            result.M13 = matrix1.M13 / matrix2.M13;
            result.M14 = matrix1.M14 / matrix2.M14;
            result.M21 = matrix1.M21 / matrix2.M21;
            result.M22 = matrix1.M22 / matrix2.M22;
            result.M23 = matrix1.M23 / matrix2.M23;
            result.M24 = matrix1.M24 / matrix2.M24;
            result.M31 = matrix1.M31 / matrix2.M31;
            result.M32 = matrix1.M32 / matrix2.M32;
            result.M33 = matrix1.M33 / matrix2.M33;
            result.M34 = matrix1.M34 / matrix2.M34;
            result.M41 = matrix1.M41 / matrix2.M41;
            result.M42 = matrix1.M42 / matrix2.M42;
            result.M43 = matrix1.M43 / matrix2.M43;
            result.M44 = matrix1.M44 / matrix2.M44;
        }

        /// <summary>
        /// Performs division of a Matrix44 object and a <#= type #> precision
        /// scaling factor.
        /// </summary>
        public static void Divide (
            ref Matrix44 matrix1,
            ref <#= type #> divider,
            out Matrix44 result)
        {
            result.M11 = matrix1.M11 / divider;
            result.M12 = matrix1.M12 / divider;
            result.M13 = matrix1.M13 / divider;
            result.M14 = matrix1.M14 / divider;
            result.M21 = matrix1.M21 / divider;
            result.M22 = matrix1.M22 / divider;
            result.M23 = matrix1.M23 / divider;
            result.M24 = matrix1.M24 / divider;
            result.M31 = matrix1.M31 / divider;
            result.M32 = matrix1.M32 / divider;
            result.M33 = matrix1.M33 / divider;
            result.M34 = matrix1.M34 / divider;
            result.M41 = matrix1.M41 / divider;
            result.M42 = matrix1.M42 / divider;
            result.M43 = matrix1.M43 / divider;
            result.M44 = matrix1.M44 / divider;
        }

