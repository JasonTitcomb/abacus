        // Equality Operators //----------------------------------------------//

        /// <summary>
        /// Determines whether or not two Matrix44 objects are equal using the
        /// (X==Y) operator.
        /// </summary>
        public static void Equals (
            ref Matrix44 value1,
            ref Matrix44 value2,
            out Boolean result)
        {
            result =
                (value1.R0C0 == value2.R0C0) &&
                (value1.R1C1 == value2.R1C1) &&
                (value1.R2C2 == value2.R2C2) &&
                (value1.R3C3 == value2.R3C3) &&
                (value1.R0C1 == value2.R0C1) &&
                (value1.R0C2 == value2.R0C2) &&
                (value1.R0C3 == value2.R0C3) &&
                (value1.R1C0 == value2.R1C0) &&
                (value1.R1C2 == value2.R1C2) &&
                (value1.R1C3 == value2.R1C3) &&
                (value1.R2C0 == value2.R2C0) &&
                (value1.R2C1 == value2.R2C1) &&
                (value1.R2C3 == value2.R2C3) &&
                (value1.R3C0 == value2.R3C0) &&
                (value1.R3C1 == value2.R3C1) &&
                (value1.R3C2 == value2.R3C2);
        }

        // Addition Operators //----------------------------------------------//

        /// <summary>
        /// Performs addition of two Matrix44 objects.
        /// </summary>
        public static void Add (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.R0C0 = matrix1.R0C0 + matrix2.R0C0;
            result.R0C1 = matrix1.R0C1 + matrix2.R0C1;
            result.R0C2 = matrix1.R0C2 + matrix2.R0C2;
            result.R0C3 = matrix1.R0C3 + matrix2.R0C3;
            result.R1C0 = matrix1.R1C0 + matrix2.R1C0;
            result.R1C1 = matrix1.R1C1 + matrix2.R1C1;
            result.R1C2 = matrix1.R1C2 + matrix2.R1C2;
            result.R1C3 = matrix1.R1C3 + matrix2.R1C3;
            result.R2C0 = matrix1.R2C0 + matrix2.R2C0;
            result.R2C1 = matrix1.R2C1 + matrix2.R2C1;
            result.R2C2 = matrix1.R2C2 + matrix2.R2C2;
            result.R2C3 = matrix1.R2C3 + matrix2.R2C3;
            result.R3C0 = matrix1.R3C0 + matrix2.R3C0;
            result.R3C1 = matrix1.R3C1 + matrix2.R3C1;
            result.R3C2 = matrix1.R3C2 + matrix2.R3C2;
            result.R3C3 = matrix1.R3C3 + matrix2.R3C3;
        }

        // Subtraction Operators //-------------------------------------------//

        /// <summary>
        /// Performs subtraction of two Matrix44 objects.
        /// </summary>
        public static void Subtract (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.R0C0 = matrix1.R0C0 - matrix2.R0C0;
            result.R0C1 = matrix1.R0C1 - matrix2.R0C1;
            result.R0C2 = matrix1.R0C2 - matrix2.R0C2;
            result.R0C3 = matrix1.R0C3 - matrix2.R0C3;
            result.R1C0 = matrix1.R1C0 - matrix2.R1C0;
            result.R1C1 = matrix1.R1C1 - matrix2.R1C1;
            result.R1C2 = matrix1.R1C2 - matrix2.R1C2;
            result.R1C3 = matrix1.R1C3 - matrix2.R1C3;
            result.R2C0 = matrix1.R2C0 - matrix2.R2C0;
            result.R2C1 = matrix1.R2C1 - matrix2.R2C1;
            result.R2C2 = matrix1.R2C2 - matrix2.R2C2;
            result.R2C3 = matrix1.R2C3 - matrix2.R2C3;
            result.R3C0 = matrix1.R3C0 - matrix2.R3C0;
            result.R3C1 = matrix1.R3C1 - matrix2.R3C1;
            result.R3C2 = matrix1.R3C2 - matrix2.R3C2;
            result.R3C3 = matrix1.R3C3 - matrix2.R3C3;
        }

        // Negation Operators //----------------------------------------------//

        /// <summary>
        /// Performs negation of a Matrix44 object.
        /// </summary>
        public static void Negate (ref Matrix44 matrix, out Matrix44 result)
        {
            result.R0C0 = -matrix.R0C0;
            result.R0C1 = -matrix.R0C1;
            result.R0C2 = -matrix.R0C2;
            result.R0C3 = -matrix.R0C3;
            result.R1C0 = -matrix.R1C0;
            result.R1C1 = -matrix.R1C1;
            result.R1C2 = -matrix.R1C2;
            result.R1C3 = -matrix.R1C3;
            result.R2C0 = -matrix.R2C0;
            result.R2C1 = -matrix.R2C1;
            result.R2C2 = -matrix.R2C2;
            result.R2C3 = -matrix.R2C3;
            result.R3C0 = -matrix.R3C0;
            result.R3C1 = -matrix.R3C1;
            result.R3C2 = -matrix.R3C2;
            result.R3C3 = -matrix.R3C3;
        }

        // Multiplication Operators //----------------------------------------//

        /// <summary>
        /// Performs muliplication of two Matrix44 objects.
        /// </summary>
        public static void Multiply (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.R0C0 =
                (matrix1.R0C0 * matrix2.R0C0) +
                (matrix1.R0C1 * matrix2.R1C0) +
                (matrix1.R0C2 * matrix2.R2C0) +
                (matrix1.R0C3 * matrix2.R3C0);

            result.R0C1 =
                (matrix1.R0C0 * matrix2.R0C1) +
                (matrix1.R0C1 * matrix2.R1C1) +
                (matrix1.R0C2 * matrix2.R2C1) +
                (matrix1.R0C3 * matrix2.R3C1);

            result.R0C2 =
                (matrix1.R0C0 * matrix2.R0C2) +
                (matrix1.R0C1 * matrix2.R1C2) +
                (matrix1.R0C2 * matrix2.R2C2) +
                (matrix1.R0C3 * matrix2.R3C2);

            result.R0C3 =
                (matrix1.R0C0 * matrix2.R0C3) +
                (matrix1.R0C1 * matrix2.R1C3) +
                (matrix1.R0C2 * matrix2.R2C3) +
                (matrix1.R0C3 * matrix2.R3C3);

            result.R1C0 =
                (matrix1.R1C0 * matrix2.R0C0) +
                (matrix1.R1C1 * matrix2.R1C0) +
                (matrix1.R1C2 * matrix2.R2C0) +
                (matrix1.R1C3 * matrix2.R3C0);

            result.R1C1 =
                (matrix1.R1C0 * matrix2.R0C1) +
                (matrix1.R1C1 * matrix2.R1C1) +
                (matrix1.R1C2 * matrix2.R2C1) +
                (matrix1.R1C3 * matrix2.R3C1);

            result.R1C2 =
                (matrix1.R1C0 * matrix2.R0C2) +
                (matrix1.R1C1 * matrix2.R1C2) +
                (matrix1.R1C2 * matrix2.R2C2) +
                (matrix1.R1C3 * matrix2.R3C2);

            result.R1C3 =
                (matrix1.R1C0 * matrix2.R0C3) +
                (matrix1.R1C1 * matrix2.R1C3) +
                (matrix1.R1C2 * matrix2.R2C3) +
                (matrix1.R1C3 * matrix2.R3C3);

            result.R2C0 =
                (matrix1.R2C0 * matrix2.R0C0) +
                (matrix1.R2C1 * matrix2.R1C0) +
                (matrix1.R2C2 * matrix2.R2C0) +
                (matrix1.R2C3 * matrix2.R3C0);

            result.R2C1 =
                (matrix1.R2C0 * matrix2.R0C1) +
                (matrix1.R2C1 * matrix2.R1C1) +
                (matrix1.R2C2 * matrix2.R2C1) +
                (matrix1.R2C3 * matrix2.R3C1);

            result.R2C2 =
                (matrix1.R2C0 * matrix2.R0C2) +
                (matrix1.R2C1 * matrix2.R1C2) +
                (matrix1.R2C2 * matrix2.R2C2) +
                (matrix1.R2C3 * matrix2.R3C2);

            result.R2C3 =
                (matrix1.R2C0 * matrix2.R0C3) +
                (matrix1.R2C1 * matrix2.R1C3) +
                (matrix1.R2C2 * matrix2.R2C3) +
                (matrix1.R2C3 * matrix2.R3C3);

            result.R3C0 =
                (matrix1.R3C0 * matrix2.R0C0) +
                (matrix1.R3C1 * matrix2.R1C0) +
                (matrix1.R3C2 * matrix2.R2C0) +
                (matrix1.R3C3 * matrix2.R3C0);

            result.R3C1 =
                (matrix1.R3C0 * matrix2.R0C1) +
                (matrix1.R3C1 * matrix2.R1C1) +
                (matrix1.R3C2 * matrix2.R2C1) +
                (matrix1.R3C3 * matrix2.R3C1);

            result.R3C2 =
                (matrix1.R3C0 * matrix2.R0C2) +
                (matrix1.R3C1 * matrix2.R1C2) +
                (matrix1.R3C2 * matrix2.R2C2) +
                (matrix1.R3C3 * matrix2.R3C2);

            result.R3C3 =
                (matrix1.R3C0 * matrix2.R0C3) +
                (matrix1.R3C1 * matrix2.R1C3) +
                (matrix1.R3C2 * matrix2.R2C3) +
                (matrix1.R3C3 * matrix2.R3C3);
        }

        /// <summary>
        /// Performs multiplication of a Matrix44 object and a <#= type #>
        /// precision scaling factor.
        /// </summary>
        public static void Multiply (
            ref Matrix44 matrix1,
            ref <#= type #> scaleFactor,
            out Matrix44 result)
        {
            result.R0C0 = matrix1.R0C0 * scaleFactor;
            result.R0C1 = matrix1.R0C1 * scaleFactor;
            result.R0C2 = matrix1.R0C2 * scaleFactor;
            result.R0C3 = matrix1.R0C3 * scaleFactor;
            result.R1C0 = matrix1.R1C0 * scaleFactor;
            result.R1C1 = matrix1.R1C1 * scaleFactor;
            result.R1C2 = matrix1.R1C2 * scaleFactor;
            result.R1C3 = matrix1.R1C3 * scaleFactor;
            result.R2C0 = matrix1.R2C0 * scaleFactor;
            result.R2C1 = matrix1.R2C1 * scaleFactor;
            result.R2C2 = matrix1.R2C2 * scaleFactor;
            result.R2C3 = matrix1.R2C3 * scaleFactor;
            result.R3C0 = matrix1.R3C0 * scaleFactor;
            result.R3C1 = matrix1.R3C1 * scaleFactor;
            result.R3C2 = matrix1.R3C2 * scaleFactor;
            result.R3C3 = matrix1.R3C3 * scaleFactor;
        }

        // Division Operators //----------------------------------------------//

        /// <summary>
        /// Performs division of two Matrix44 objects.
        /// </summary>
        public static void Divide (
            ref Matrix44 matrix1,
            ref Matrix44 matrix2,
            out Matrix44 result)
        {
            result.R0C0 = matrix1.R0C0 / matrix2.R0C0;
            result.R0C1 = matrix1.R0C1 / matrix2.R0C1;
            result.R0C2 = matrix1.R0C2 / matrix2.R0C2;
            result.R0C3 = matrix1.R0C3 / matrix2.R0C3;
            result.R1C0 = matrix1.R1C0 / matrix2.R1C0;
            result.R1C1 = matrix1.R1C1 / matrix2.R1C1;
            result.R1C2 = matrix1.R1C2 / matrix2.R1C2;
            result.R1C3 = matrix1.R1C3 / matrix2.R1C3;
            result.R2C0 = matrix1.R2C0 / matrix2.R2C0;
            result.R2C1 = matrix1.R2C1 / matrix2.R2C1;
            result.R2C2 = matrix1.R2C2 / matrix2.R2C2;
            result.R2C3 = matrix1.R2C3 / matrix2.R2C3;
            result.R3C0 = matrix1.R3C0 / matrix2.R3C0;
            result.R3C1 = matrix1.R3C1 / matrix2.R3C1;
            result.R3C2 = matrix1.R3C2 / matrix2.R3C2;
            result.R3C3 = matrix1.R3C3 / matrix2.R3C3;
        }

        /// <summary>
        /// Performs division of a Matrix44 object and a <#= type #> precision
        /// scaling factor.
        /// </summary>
        public static void Divide (
            ref Matrix44 matrix1,
            ref <#= type #> divider,
            out Matrix44 result)
        {
            result.R0C0 = matrix1.R0C0 / divider;
            result.R0C1 = matrix1.R0C1 / divider;
            result.R0C2 = matrix1.R0C2 / divider;
            result.R0C3 = matrix1.R0C3 / divider;
            result.R1C0 = matrix1.R1C0 / divider;
            result.R1C1 = matrix1.R1C1 / divider;
            result.R1C2 = matrix1.R1C2 / divider;
            result.R1C3 = matrix1.R1C3 / divider;
            result.R2C0 = matrix1.R2C0 / divider;
            result.R2C1 = matrix1.R2C1 / divider;
            result.R2C2 = matrix1.R2C2 / divider;
            result.R2C3 = matrix1.R2C3 / divider;
            result.R3C0 = matrix1.R3C0 / divider;
            result.R3C1 = matrix1.R3C1 / divider;
            result.R3C2 = matrix1.R3C2 / divider;
            result.R3C3 = matrix1.R3C3 / divider;
        }

