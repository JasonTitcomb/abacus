        /// <summary>
        /// todo
        /// </summary>
        public static void LengthSquared (
            ref Quaternion quaternion,
            out <#= type #> result)
        {
            result =
                (quaternion.I * quaternion.I) +
                (quaternion.J * quaternion.J) +
                (quaternion.K * quaternion.K) +
                (quaternion.U * quaternion.U);
        }

        /// <summary>
        /// todo
        /// </summary>
        public static void Length (
            ref Quaternion quaternion,
            out <#= type #> result)
        {
            <#= type #> lengthSquared =
                (quaternion.I * quaternion.I) +
                (quaternion.J * quaternion.J) +
                (quaternion.K * quaternion.K) +
                (quaternion.U * quaternion.U);

            result = Maths.Sqrt (lengthSquared);
        }

        /// <summary>
        /// todo
        /// </summary>
        public static void IsUnit (
            ref Quaternion quaternion,
            out Boolean result)
        {
            <#= type #> one = 1;

            result = Maths.IsZero(
                one -
                quaternion.U * quaternion.U -
                quaternion.I * quaternion.I -
                quaternion.J * quaternion.J -
                quaternion.K * quaternion.K);
        }


        /// <summary>
        /// todo
        /// </summary>
        public static void Conjugate (
            ref Quaternion value,
            out Quaternion result)
        {
            result.I = -value.I;
            result.J = -value.J;
            result.K = -value.K;
            result.U = value.U;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static void Inverse (
            ref Quaternion quaternion,
            out Quaternion result)
        {
            <#= type #> one = 1;
            <#= type #> a =
                (quaternion.I * quaternion.I) +
                (quaternion.J * quaternion.J) +
                (quaternion.K * quaternion.K) +
                (quaternion.U * quaternion.U);

            <#= type #> b = one / a;

            result.I = -quaternion.I * b;
            result.J = -quaternion.J * b;
            result.K = -quaternion.K * b;
            result.U =  quaternion.U * b;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static void Dot (
            ref Quaternion quaternion1,
            ref Quaternion quaternion2,
            out <#= type #> result)
        {
            result =
                (quaternion1.I * quaternion2.I) +
                (quaternion1.J * quaternion2.J) +
                (quaternion1.K * quaternion2.K) +
                (quaternion1.U * quaternion2.U);
        }

        /// <summary>
        /// todo
        /// </summary>
        public static void Concatenate (
            ref Quaternion value1,
            ref Quaternion value2,
            out Quaternion result)
        {
            <#= type #> i1 = value1.I;
            <#= type #> j1 = value1.J;
            <#= type #> k1 = value1.K;
            <#= type #> u1 = value1.U;

            <#= type #> i2 = value2.I;
            <#= type #> j2 = value2.J;
            <#= type #> k2 = value2.K;
            <#= type #> u2 = value2.U;

            <#= type #> a = (j2 * k1) - (k2 * j1);
            <#= type #> b = (k2 * i1) - (i2 * k1);
            <#= type #> c = (i2 * j1) - (j2 * i1);
            <#= type #> d = (i2 * i1) - (j2 * j1);

            result.I = (i2 * u1) + (i1 * u2) + a;
            result.J = (j2 * u1) + (j1 * u2) + b;
            result.K = (k2 * u1) + (k1 * u2) + c;
            result.U = (u2 * u1) - (k2 * k1) - d;
        }

        /// <summary>
        /// todo
        /// </summary>
        public static void Normalise (
            ref Quaternion quaternion,
            out Quaternion result)
        {
            <#= type #> one = 1;

            <#= type #> a =
                (quaternion.I * quaternion.I) +
                (quaternion.J * quaternion.J) +
                (quaternion.K * quaternion.K) +
                (quaternion.U * quaternion.U);

            <#= type #> b = one / Maths.Sqrt (a);

            result.I = quaternion.I * b;
            result.J = quaternion.J * b;
            result.K = quaternion.K * b;
            result.U = quaternion.U * b;
        }

