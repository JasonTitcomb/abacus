        /// <summary>
        /// Transposes the rows and columns of a matrix.  The transpose of a
        /// given matrix is the matrix which is formed by turning all the rows
        /// of a given matrix into columns and vice-versa.
        /// N.B. On a computer, one can often avoid explicitly transposing a
        /// matrix in memory by simply accessing the same data in a
        /// different order.
        /// </summary>
        public static void Transpose (ref Matrix44 input, out Matrix44 output)
        {
            output.R0C0 = input.R0C0;
            output.R1C1 = input.R1C1;
            output.R2C2 = input.R2C2;
            output.R3C3 = input.R3C3;

            <#=T#> temp = input.R0C1;
            output.R0C1 = input.R1C0;
            output.R1C0 = temp;

            temp = input.R0C2;
            output.R0C2 = input.R2C0;
            output.R2C0 = temp;

            temp = input.R0C3;
            output.R0C3 = input.R3C0;
            output.R3C0 = temp;

            temp = input.R1C2;
            output.R1C2 = input.R2C1;
            output.R2C1 = temp;

            temp = input.R1C3;
            output.R1C3 = input.R3C1;
            output.R3C1 = temp;

            temp =  input.R2C3;
            output.R2C3 = input.R3C2;
            output.R3C2 = temp;
        }

        /// <summary>
        /// Reference Implementation:
        /// Essential Mathemathics For Games & Interactive Applications
        /// </summary>
        public static void Decompose (
            ref Matrix44 matrix,
            out Vector3 scale,
            out Quaternion rotation,
            out Vector3 translation,
            out Boolean result)
        {
            translation.X = matrix.R3C0;
            translation.Y = matrix.R3C1;
            translation.Z = matrix.R3C2;

            Vector3 a = new Vector3(matrix.R0C0, matrix.R1C0, matrix.R2C0);
            Vector3 b = new Vector3(matrix.R0C1, matrix.R1C1, matrix.R2C1);
            Vector3 c = new Vector3(matrix.R0C2, matrix.R1C2, matrix.R2C2);

            <#=T#> aLen; Vector3.Length(ref a, out aLen); scale.X = aLen;
            <#=T#> bLen; Vector3.Length(ref b, out bLen); scale.Y = bLen;
            <#=T#> cLen; Vector3.Length(ref c, out cLen); scale.Z = cLen;

            if ( Maths.IsZero(scale.X) ||
                 Maths.IsZero(scale.Y) ||
                 Maths.IsZero(scale.Z) )
            {
                rotation = Quaternion.Identity;
                result = false;
            }

            <#=T#> epsilon; Maths.Epsilon(out epsilon);

            if (aLen < epsilon) a = Vector3.Zero;
            else Vector3.Normalise(ref a, out a);

            if (bLen < epsilon) b = Vector3.Zero;
            else Vector3.Normalise(ref b, out b);

            if (cLen < epsilon) c = Vector3.Zero;
            else Vector3.Normalise(ref c, out c);

            Vector3 right = new Vector3(a.X, b.X, c.X);
            Vector3 up = new Vector3(a.Y, b.Y, c.Y);
            Vector3 backward = new Vector3(a.Z, b.Z, c.Z);

            if (right == Vector3.Zero) right = Vector3.Right;
            if (up == Vector3.Zero) up = Vector3.Up;
            if (backward == Vector3.Zero) backward = Vector3.Backward;

            Vector3.Normalise(ref right, out right);
            Vector3.Normalise(ref up, out up);
            Vector3.Normalise(ref backward, out backward);

            Matrix44 rotMat;
            Matrix44.CreateFromAllAxis(
                ref right, ref up, ref backward, out rotMat);

            Quaternion.CreateFromRotationMatrix(ref rotMat, out rotation);

            result = true;
        }

        ////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
        // TODO: FROM XNA, NEEDS REVIEW
        ////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// todo
        /// </summary>
        public void Determinant (ref Matrix44 matrix, out <#=T#> result)
        {
            <#=T#> num22 = matrix.R0C0;
            <#=T#> num21 = matrix.R0C1;
            <#=T#> num20 = matrix.R0C2;
            <#=T#> num19 = matrix.R0C3;
            <#=T#> num12 = matrix.R1C0;
            <#=T#> num11 = matrix.R1C1;
            <#=T#> num10 = matrix.R1C2;
            <#=T#> num9 = matrix.R1C3;
            <#=T#> num8 = matrix.R2C0;
            <#=T#> num7 = matrix.R2C1;
            <#=T#> num6 = matrix.R2C2;
            <#=T#> num5 = matrix.R2C3;
            <#=T#> num4 = matrix.R3C0;
            <#=T#> num3 = matrix.R3C1;
            <#=T#> num2 = matrix.R3C2;
            <#=T#> num = matrix.R3C3;

            <#=T#> num18 = (num6 * num) - (num5 * num2);
            <#=T#> num17 = (num7 * num) - (num5 * num3);
            <#=T#> num16 = (num7 * num2) - (num6 * num3);
            <#=T#> num15 = (num8 * num) - (num5 * num4);
            <#=T#> num14 = (num8 * num2) - (num6 * num4);
            <#=T#> num13 = (num8 * num3) - (num7 * num4);

            result = ((((num22 * (((num11 * num18) - (num10 * num17)) + (num9 * num16))) - (num21 * (((num12 * num18) - (num10 * num15)) + (num9 * num14)))) + (num20 * (((num12 * num17) - (num11 * num15)) + (num9 * num13)))) - (num19 * (((num12 * num16) - (num11 * num14)) + (num10 * num13))));
        }

        ////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
        // TODO: FROM XNA, NEEDS REVIEW
        ////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// todo
        /// </summary>
        public static void Invert (ref Matrix44 matrix, out Matrix44 result)
        {
            <#=T#> one = 1;
            <#=T#> num5 = matrix.R0C0;
            <#=T#> num4 = matrix.R0C1;
            <#=T#> num3 = matrix.R0C2;
            <#=T#> num2 = matrix.R0C3;
            <#=T#> num9 = matrix.R1C0;
            <#=T#> num8 = matrix.R1C1;
            <#=T#> num7 = matrix.R1C2;
            <#=T#> num6 = matrix.R1C3;
            <#=T#> num17 = matrix.R2C0;
            <#=T#> num16 = matrix.R2C1;
            <#=T#> num15 = matrix.R2C2;
            <#=T#> num14 = matrix.R2C3;
            <#=T#> num13 = matrix.R3C0;
            <#=T#> num12 = matrix.R3C1;
            <#=T#> num11 = matrix.R3C2;
            <#=T#> num10 = matrix.R3C3;
            <#=T#> num23 = (num15 * num10) - (num14 * num11);
            <#=T#> num22 = (num16 * num10) - (num14 * num12);
            <#=T#> num21 = (num16 * num11) - (num15 * num12);
            <#=T#> num20 = (num17 * num10) - (num14 * num13);
            <#=T#> num19 = (num17 * num11) - (num15 * num13);
            <#=T#> num18 = (num17 * num12) - (num16 * num13);
            <#=T#> num39 = ((num8 * num23) - (num7 * num22)) + (num6 * num21);
            <#=T#> num38 = -(((num9 * num23) - (num7 * num20)) + (num6 * num19));
            <#=T#> num37 = ((num9 * num22) - (num8 * num20)) + (num6 * num18);
            <#=T#> num36 = -(((num9 * num21) - (num8 * num19)) + (num7 * num18));
            <#=T#> num = one / ((((num5 * num39) + (num4 * num38)) + (num3 * num37)) + (num2 * num36));
            result.R0C0 = num39 * num;
            result.R1C0 = num38 * num;
            result.R2C0 = num37 * num;
            result.R3C0 = num36 * num;
            result.R0C1 = -(((num4 * num23) - (num3 * num22)) + (num2 * num21)) * num;
            result.R1C1 = (((num5 * num23) - (num3 * num20)) + (num2 * num19)) * num;
            result.R2C1 = -(((num5 * num22) - (num4 * num20)) + (num2 * num18)) * num;
            result.R3C1 = (((num5 * num21) - (num4 * num19)) + (num3 * num18)) * num;
            <#=T#> num35 = (num7 * num10) - (num6 * num11);
            <#=T#> num34 = (num8 * num10) - (num6 * num12);
            <#=T#> num33 = (num8 * num11) - (num7 * num12);
            <#=T#> num32 = (num9 * num10) - (num6 * num13);
            <#=T#> num31 = (num9 * num11) - (num7 * num13);
            <#=T#> num30 = (num9 * num12) - (num8 * num13);
            result.R0C2 = (((num4 * num35) - (num3 * num34)) + (num2 * num33)) * num;
            result.R1C2 = -(((num5 * num35) - (num3 * num32)) + (num2 * num31)) * num;
            result.R2C2 = (((num5 * num34) - (num4 * num32)) + (num2 * num30)) * num;
            result.R3C2 = -(((num5 * num33) - (num4 * num31)) + (num3 * num30)) * num;
            <#=T#> num29 = (num7 * num14) - (num6 * num15);
            <#=T#> num28 = (num8 * num14) - (num6 * num16);
            <#=T#> num27 = (num8 * num15) - (num7 * num16);
            <#=T#> num26 = (num9 * num14) - (num6 * num17);
            <#=T#> num25 = (num9 * num15) - (num7 * num17);
            <#=T#> num24 = (num9 * num16) - (num8 * num17);
            result.R0C3 = -(((num4 * num29) - (num3 * num28)) + (num2 * num27)) * num;
            result.R1C3 = (((num5 * num29) - (num3 * num26)) + (num2 * num25)) * num;
            result.R2C3 = -(((num5 * num28) - (num4 * num26)) + (num2 * num24)) * num;
            result.R3C3 = (((num5 * num27) - (num4 * num25)) + (num3 * num24)) * num;
        }

        ////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
        // TODO: FROM XNA, NEEDS REVIEW
        ////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// Transforms a Matrix by applying a Quaternion rotation.
        /// </summary>
        public static void Transform (ref Matrix44 value, ref Quaternion rotation, out Matrix44 result)
        {
            <#=T#> one = 1;

            <#=T#> num21 = rotation.I + rotation.I;
            <#=T#> num11 = rotation.J + rotation.J;
            <#=T#> num10 = rotation.K + rotation.K;

            <#=T#> num20 = rotation.U * num21;
            <#=T#> num19 = rotation.U * num11;
            <#=T#> num18 = rotation.U * num10;
            <#=T#> num17 = rotation.I * num21;
            <#=T#> num16 = rotation.I * num11;
            <#=T#> num15 = rotation.I * num10;
            <#=T#> num14 = rotation.J * num11;
            <#=T#> num13 = rotation.J * num10;
            <#=T#> num12 = rotation.K * num10;

            <#=T#> num9 = (one - num14) - num12;

            <#=T#> num8 = num16 - num18;
            <#=T#> num7 = num15 + num19;
            <#=T#> num6 = num16 + num18;

            <#=T#> num5 = (one - num17) - num12;

            <#=T#> num4 = num13 - num20;
            <#=T#> num3 = num15 - num19;
            <#=T#> num2 = num13 + num20;

            <#=T#> num = (one - num17) - num14;

            <#=T#> num37 = ((value.R0C0 * num9) + (value.R0C1 * num8)) + (value.R0C2 * num7);
            <#=T#> num36 = ((value.R0C0 * num6) + (value.R0C1 * num5)) + (value.R0C2 * num4);
            <#=T#> num35 = ((value.R0C0 * num3) + (value.R0C1 * num2)) + (value.R0C2 * num);

            <#=T#> num34 = value.R0C3;

            <#=T#> num33 = ((value.R1C0 * num9) + (value.R1C1 * num8)) + (value.R1C2 * num7);
            <#=T#> num32 = ((value.R1C0 * num6) + (value.R1C1 * num5)) + (value.R1C2 * num4);
            <#=T#> num31 = ((value.R1C0 * num3) + (value.R1C1 * num2)) + (value.R1C2 * num);

            <#=T#> num30 = value.R1C3;

            <#=T#> num29 = ((value.R2C0 * num9) + (value.R2C1 * num8)) + (value.R2C2 * num7);
            <#=T#> num28 = ((value.R2C0 * num6) + (value.R2C1 * num5)) + (value.R2C2 * num4);
            <#=T#> num27 = ((value.R2C0 * num3) + (value.R2C1 * num2)) + (value.R2C2 * num);

            <#=T#> num26 = value.R2C3;

            <#=T#> num25 = ((value.R3C0 * num9) + (value.R3C1 * num8)) + (value.R3C2 * num7);
            <#=T#> num24 = ((value.R3C0 * num6) + (value.R3C1 * num5)) + (value.R3C2 * num4);
            <#=T#> num23 = ((value.R3C0 * num3) + (value.R3C1 * num2)) + (value.R3C2 * num);

            <#=T#> num22 = value.R3C3;

            result.R0C0 = num37;
            result.R0C1 = num36;
            result.R0C2 = num35;
            result.R0C3 = num34;
            result.R1C0 = num33;
            result.R1C1 = num32;
            result.R1C2 = num31;
            result.R1C3 = num30;
            result.R2C0 = num29;
            result.R2C1 = num28;
            result.R2C2 = num27;
            result.R2C3 = num26;
            result.R3C0 = num25;
            result.R3C1 = num24;
            result.R3C2 = num23;
            result.R3C3 = num22;
        }

