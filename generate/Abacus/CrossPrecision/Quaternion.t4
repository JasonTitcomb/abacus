    /// <summary>
    /// <#= type #> precision Quaternion.
    /// </summary>
    [StructLayout (LayoutKind.Sequential), Serializable]
    public struct Quaternion
        : IEquatable<Quaternion>
    {
        /// <summary>
        /// Gets or sets the imaginary I-component of the Quaternion.
        /// </summary>
        public <#= type #> I;

        /// <summary>
        /// Gets or sets the imaginary J-component of the Quaternion.
        /// </summary>
        public <#= type #> J;

        /// <summary>
        /// Gets or sets the imaginary K-component of the Quaternion.
        /// </summary>
        public <#= type #> K;

        /// <summary>
        /// Gets or sets the real U-component of the Quaternion.
        /// </summary>
        public <#= type #> U;

        /// <summary>
        /// Initilises a new instance of Quaternion from three imaginary
        /// <#= type #> values and one real <#= type #> value representing
        /// I, J, K and U respectively.
        /// </summary>
        public Quaternion (
            <#= type #> i,
            <#= type #> j,
            <#= type #> k,
            <#= type #> u)
        {
            this.I = i;
            this.J = j;
            this.K = k;
            this.U = u;
        }

        /// <summary>
        /// Initilises a new instance of Quaternion from a Vector3 representing
        /// the imaginary parts of the quaternion (I, J & K) and one
        /// <#= type #> value representing the real part of the
        /// Quaternion (U).
        /// </summary>
        public Quaternion (Vector3 vectorPart, <#= type #> scalarPart)
        {
            this.I = vectorPart.X;
            this.J = vectorPart.Y;
            this.K = vectorPart.Z;
            this.U = scalarPart;
        }

        /// <summary>
        /// Retrieves a string representation of the current object.
        /// </summary>
        public override String ToString ()
        {
            return String.Format (
                "{{I:{0} J:{1} K:{2} U:{3}}}",
                new Object[] {
                    this.I.ToString (),
                    this.J.ToString (),
                    this.K.ToString (),
                    this.U.ToString () });
        }

        /// <summary>
        /// Gets the hash code of the Quaternion object.
        /// </summary>
        public override Int32 GetHashCode ()
        {
            return U.GetHashCode ().ShiftAndWrap (6)
                 ^ K.GetHashCode ().ShiftAndWrap (4)
                 ^ J.GetHashCode ().ShiftAndWrap (2)
                 ^ I.GetHashCode ();
        }

        /// <summary>
        /// Determines whether or not this Quaternion object is equal to another
        /// object
        /// </summary>
        public override Boolean Equals (Object obj)
        {
            Boolean flag = false;

            if (obj is Quaternion)
            {
                flag = this.Equals ((Quaternion) obj);
            }

            return flag;
        }

        #region IEquatable<Quaternion>

        /// <summary>
        /// Determines whether or not this Quaternion object is equal to another
        /// Quaternion object.
        /// </summary>
        public Boolean Equals (Quaternion other)
        {
            return
                (this.I == other.I) &&
                (this.J == other.J) &&
                (this.K == other.K) &&
                (this.U == other.U);
        }

        #endregion

<#@ include file="Quaternion.Constants.t4"#>
<#@ include file="Quaternion.Create.t4"#>
<#@ include file="Quaternion.Maths.t4"#>
<#@ include file="Quaternion.Operators.t4"#>
<#@ include file="Quaternion.Utilities.t4"#>

#if (VARIANTS_ENABLED)

<#@ include file="Variants/Quaternion.Variants.Create.t4"#>
<#@ include file="Variants/Quaternion.Variants.Maths.t4"#>
<#@ include file="Variants/Quaternion.Variants.Operators.t4"#>
<#@ include file="Variants/Quaternion.Variants.Utilities.t4"#>

<#@ include file="Variants/Quaternion.Variants.MemberFunctions.t4"#>

#endif
    }
