        /// <summary>
        /// Creates a Quaternion from a vector and an angle to rotate about
        /// the vector.
        /// </summary>
        public static void CreateFromAxisAngle (
            ref Vector3 axis, ref <#=T#> angle, out Quaternion result)
        {
            <#=T#> half; Maths.Half(out half);
            <#=T#> theta = angle * half;

            <#=T#> sin = Maths.Sin (theta);
            <#=T#> cos = Maths.Cos (theta);

            result.I = axis.X * sin;
            result.J = axis.Y * sin;
            result.K = axis.Z * sin;

            result.U = cos;
        }

        /// <summary>
        /// Creates a new Quaternion from specified yaw, pitch, and roll angles.
        /// </summary>
        public static void CreateFromYawPitchRoll (
            ref <#=T#> yaw, ref <#=T#> pitch,
            ref <#=T#> roll, out Quaternion result)
        {
            <#=T#> half; Maths.Half(out half);

            <#=T#> hr = roll * half;
            <#=T#> hp = pitch * half;
            <#=T#> hy = yaw * half;

            <#=T#> shr = Maths.Sin (hr);
            <#=T#> chr = Maths.Cos (hr);
            <#=T#> shp = Maths.Sin (hp);
            <#=T#> chp = Maths.Cos (hp);
            <#=T#> shy = Maths.Sin (hy);
            <#=T#> chy = Maths.Cos (hy);

            result.I = (chy * shp * chr) + (shy * chp * shr);
            result.J = (shy * chp * chr) - (chy * shp * shr);
            result.K = (chy * chp * shr) - (shy * shp * chr);
            result.U = (chy * chp * chr) + (shy * shp * shr);
        }

        /// <summary>
        /// Creates a Quaternion from a rotation Matrix44.
        /// </summary>
        public static void CreateFromRotationMatrix (
            ref Matrix44 m, out Quaternion result)
        {
            // http://www.euclideanspace.com/maths/geometry/rotations/conversions/mToQuaternion/
            <#=T#> zero = 0;
            <#=T#> half; Maths.Half(out half);
            <#=T#> one = 1;

            <#=T#> tr = (m.R0C0 + m.R1C1) + m.R2C2;

            if (tr > zero)
            {
                <#=T#> s = Maths.Sqrt (tr + one);
                result.U = s * half;
                s = half / s;
                result.I = (m.R1C2 - m.R2C1) * s;
                result.J = (m.R2C0 - m.R0C2) * s;
                result.K = (m.R0C1 - m.R1C0) * s;
            }
            else if ((m.R0C0 >= m.R1C1) && (m.R0C0 >= m.R2C2))
            {
                <#=T#> s7 = Maths.Sqrt (((one + m.R0C0) - m.R1C1) - m.R2C2);
                <#=T#> s4 = half / s7;

                result.U = (m.R1C2 - m.R2C1) * s4;
                result.I = half * s7;
                result.J = (m.R0C1 + m.R1C0) * s4;
                result.K = (m.R0C2 + m.R2C0) * s4;
            }
            else if (m.R1C1 > m.R2C2)
            {
                <#=T#> s6 =Maths.Sqrt (((one + m.R1C1) - m.R0C0) - m.R2C2);
                <#=T#> s3 = half / s6;

                result.U = (m.R2C0 - m.R0C2) * s3;
                result.I = (m.R1C0 + m.R0C1) * s3;
                result.J = half * s6;
                result.K = (m.R2C1 + m.R1C2) * s3;
            }
            else
            {
                <#=T#> s5 = Maths.Sqrt (((one + m.R2C2) - m.R0C0) - m.R1C1);
                <#=T#> s2 = half / s5;

                result.U = (m.R0C1 - m.R1C0) * s2;
                result.I = (m.R2C0 + m.R0C2) * s2;
                result.J = (m.R2C1 + m.R1C2) * s2;
                result.K = half * s5;
            }
        }
