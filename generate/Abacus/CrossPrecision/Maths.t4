    /// <summary>
    /// This class provides maths functions with consistent function
    /// signatures across all supported precisions.  The idea being
    /// the more you use this, the more you will be able to write
    /// code once and easily change the precision later.
    /// </summary>
    public static class Maths
    {
<# GenerateMathsConstant (type, "E"); #>
<# GenerateMathsConstant (type, "Epsilon"); #>
<# GenerateMathsConstant (type, "Half"); #>
<# GenerateMathsConstant (type, "Log10E"); #>
<# GenerateMathsConstant (type, "Log2E"); #>
<# GenerateMathsConstant (type, "Pi"); #>
<# GenerateMathsConstant (type, "Root2"); #>
<# GenerateMathsConstant (type, "Root3"); #>
<# GenerateMathsConstant (type, "Tau"); #>
<# GenerateMathsConstant (type, "Zero"); #>
<# GenerateMathsConstant (type, "One"); #>

<# GenerateMathsFunction (type, "ArcCos"); #>
<# GenerateMathsFunction (type, "ArcSin"); #>
<# GenerateMathsFunction (type, "ArcTan"); #>
<# GenerateMathsFunction (type, "Cos"); #>
<# GenerateMathsFunction (type, "Sin"); #>
<# GenerateMathsFunction (type, "Tan"); #>
<# GenerateMathsFunction (type, "Sqrt"); #>
<# GenerateMathsFunction (type, "Square"); #>
<# GenerateMathsFunction (type, "Abs"); #>

        /// <summary>
        /// ToRadians
        /// </summary>
        public static <#= type #> ToRadians(<#= type #> input)
        {
            <#= type #> tau; Tau(out tau);
            return input * tau / ((<#= type #>)360);
        }

        /// <summary>
        /// ToDegrees
        /// </summary>
        public static <#= type #> ToDegrees(<#= type #> input)
        {
            <#= type #> tau; Tau(out tau);
            return input / tau * ((<#= type #>)360);
        }

        /// <summary>
        /// FromFraction
        /// </summary>
        public static void FromFraction(Int32 numerator, Int32 denominator, out <#= type #> value)
        {
            value = (<#= type #>) numerator / (<#= type #>) denominator;
        }

        /// <summary>
        /// FromString
        /// </summary>
        public static void FromString(String str, out <#= type #> value)
        {
            <#= type #>.TryParse(str, out value);
        }

        /// <summary>
        /// IsZero
        /// </summary>
        public static Boolean IsZero(<#= type #> value)
        {
            <#= type #> ep;
            Epsilon(out ep);
            return Abs(value) < ep;
        }

        /// <summary>
        /// Min
        /// </summary>
        public static <#= type #> Min(<#= type #> a, <#= type #> b)
        {
            return a < b ? a : b;
        }

        /// <summary>
        /// Max
        /// </summary>
        public static <#= type #> Max(<#= type #> a, <#= type #> b)
        {
            return a > b ? a : b;
        }

        /// <summary>
        /// WithinEpsilon
        /// </summary>
        public static Boolean WithinEpsilon(<#= type #> a, <#= type #> b)
        {
            <#= type #> num = a - b;
            return ((-<#= type #>.Epsilon <= num) && (num <= <#= type #>.Epsilon));
        }

        /// <summary>
        /// Sign
        /// </summary>
        public static Int32 Sign(<#= type #> value)
        {
            if (value > 0)
            {
                return 1;
            }
            else if (value < 0)
            {
                return -1;
            }

            return 0;
        }
    }
