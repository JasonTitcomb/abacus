        #region Operators

        public static implicit operator Int32 (Fixed32 src)
        {
            return src.ToInt32 ();
        }

        public static explicit operator Single (Fixed32 src)
        {
            return src.ToSingle ();
        }

        public static explicit operator Double (Fixed32 src)
        {
            return src.ToDouble ();
        }

        public static implicit operator Fixed32 (Int32 src)
        {
            return new Fixed32(src);
        }

        public static implicit operator Fixed32(Single src)
        {
            return new Fixed32(src);
        }

        public static implicit operator Fixed32(Double src)
        {
            return new Fixed32(src);
        }

        public static Fixed32 operator * (Fixed32 one, Fixed32 other)
        {
            Fixed32 output;
            Multiply(ref one, ref other, out output);
            return output;
        }
        
        public static Fixed32 operator * (Fixed32 one, Int32 multi)
        {
            return CreateFromRaw (one.numerator * multi);
        }

        public static Fixed32 operator *(Int32 multi, Fixed32 one)
        {
            return CreateFromRaw (one.numerator * multi);
        }

        public static Fixed32 operator / (Fixed32 one, Fixed32 other)
        {
            Fixed32 output;
            Divide(ref one, ref other, out output);
            return output;
        }

        public static Fixed32 operator /(Fixed32 one, Int32 divisor)
        {
            return one / new Fixed32(divisor);
        }

        public static Fixed32 operator /(Int32 divisor, Fixed32 one)
        {
            return new Fixed32 (divisor) / one;
        }

        public static Fixed32 operator % (Fixed32 one, Fixed32 other)
        {
            return CreateFromRaw (one.numerator % other.numerator);
        }

        public static Fixed32 operator %(Fixed32 one, Int32 divisor)
        {
            return one % new Fixed32 (divisor);
        }

        public static Fixed32 operator %(Int32 divisor, Fixed32 one)
        {
            return new Fixed32 (divisor) % one;
        }

        public static Fixed32 operator + (Fixed32 one, Fixed32 other)
        {
            Fixed32 output;
            Add(ref one, ref other, out output);
            return output;
        }

        public static Fixed32 operator +(Fixed32 one, Int32 other)
        {
            return one + new Fixed32 (other);
        }

        public static Fixed32 operator +(Int32 other, Fixed32 one)
        {
            return one + new Fixed32 (other);
        }

        public static Fixed32 operator - (Fixed32 one, Fixed32 other)
        {
            Fixed32 output;
            Subtract(ref one, ref other, out output);
            return output;
        }

        public static Fixed32 operator -(Fixed32 one, Int32 other)
        {
            return one - new Fixed32 (other);
        }

        public static Fixed32 operator -(Int32 other, Fixed32 one)
        {
            return new Fixed32 (other) - one;
        }
        
        public static Fixed32 operator - (Fixed32 f)
        {
            return CreateFromRaw (-f.numerator);
        }

        public static Boolean operator != (Fixed32 one, Fixed32 other)
        {
            return one.numerator != other.numerator;
        }

        public static Boolean operator !=(Fixed32 one, Int32 other)
        {
            return one != new Fixed32 (other);
        }

        public static Boolean operator !=(Int32 other, Fixed32 one)
        {
            return new Fixed32 (other) != one;
        }

        public static Boolean operator >= (Fixed32 one, Fixed32 other)
        {
            return one.numerator >= other.numerator;
        }

        public static Boolean operator >=(Fixed32 one, Int32 other)
        {
            return one >= new Fixed32 (other);
        }

        public static Boolean operator >=(Int32 other, Fixed32 one)
        {
            return new Fixed32 (other) >= one;
        }

        public static Boolean operator <= (Fixed32 one, Fixed32 other)
        {
            return one.numerator <= other.numerator;
        }

        public static Boolean operator <=(Fixed32 one, Int32 other)
        {
            return one <= new Fixed32 (other);
        }

        public static Boolean operator <=(Int32 other, Fixed32 one)
        {
            return new Fixed32 (other) <= one;
        }

        public static Boolean operator > (Fixed32 one, Fixed32 other)
        {
            return one.numerator > other.numerator;
        }

        public static Boolean operator >(Fixed32 one, Int32 other)
        {
            return one > new Fixed32 (other);
        }

        public static Boolean operator >(Int32 other, Fixed32 one)
        {
            return new Fixed32 (other) > one;
        }

        public static Boolean operator < (Fixed32 one, Fixed32 other)
        {
            return one.numerator < other.numerator;
        }

        public static Boolean operator <(Fixed32 one, Int32 other)
        {
            return one < new Fixed32 (other);
        }

        public static Boolean operator <(Int32 other, Fixed32 one)
        {
            return new Fixed32 (other) < one;
        }

        public static Fixed32 operator <<(Fixed32 one, Int32 amount)
        {
            return CreateFromRaw (one.numerator << amount);
        }

        public static Fixed32 operator >>(Fixed32 one, Int32 amount)
        {
            return CreateFromRaw (one.numerator >> amount);
        }

        public static Boolean operator == (Fixed32 one, Fixed32 other)
        {
            return one.numerator == other.numerator;
        }

        public static Boolean operator ==(Fixed32 one, Int32 other)
        {
            return one == new Fixed32 (other);
        }
        
        public static Boolean operator == (Int32 other, Fixed32 one)
        {
            return new Fixed32 (other) == one;
        }

        #endregion

