    /// <summary>
    ///
    /// </summary>
    [TestFixture]
    public class Matrix44Tests
    {
<#@ include file="Matrix44.TestHelpers.t4"#>

        /// <summary>
        /// This test makes sure that the struct layout has been defined
        /// correctly.
        /// </summary>
        [Test]
        public void Test_StructLayout_i ()
        {
            Type t = typeof(Matrix44);

            Assert.That(
                t.StructLayoutAttribute.Value,
                Is.EqualTo(LayoutKind.Sequential));
        }

        /// <summary>
        /// This test makes sure that when examining the memory addresses of the
        /// member variables of a number of randomly generated Matrix44
        /// objects the results are as expected.
        /// </summary>
        [Test]
        public unsafe void Test_StructLayout_ii ()
        {
            for( Int32 i = 0; i < 100; ++ i)
            {
                Matrix44 mat = GetNextRandomMatrix44();

                GCHandle h_vec = GCHandle.Alloc(mat, GCHandleType.Pinned);

                IntPtr vecAddress = h_vec.AddrOfPinnedObject();

                <#= type #>[] data = new <#= type #>[16];

                // nb: when Fixed32 and Half are moved back into the main
                //     dev branch there will be need for an extension method for
                //     Marshal that will perform the copy for those types.
                MarshalHelper.Copy(vecAddress, data, 0, 16);
                Assert.That(data[0], Is.EqualTo(mat.R0C0));
                Assert.That(data[1], Is.EqualTo(mat.R0C1));
                Assert.That(data[2], Is.EqualTo(mat.R0C2));
                Assert.That(data[3], Is.EqualTo(mat.R0C3));
                Assert.That(data[4], Is.EqualTo(mat.R1C0));
                Assert.That(data[5], Is.EqualTo(mat.R1C1));
                Assert.That(data[6], Is.EqualTo(mat.R1C2));
                Assert.That(data[7], Is.EqualTo(mat.R1C3));
                Assert.That(data[8], Is.EqualTo(mat.R2C0));
                Assert.That(data[9], Is.EqualTo(mat.R2C1));
                Assert.That(data[10], Is.EqualTo(mat.R2C2));
                Assert.That(data[11], Is.EqualTo(mat.R2C3));
                Assert.That(data[12], Is.EqualTo(mat.R3C0));
                Assert.That(data[13], Is.EqualTo(mat.R3C1));
                Assert.That(data[14], Is.EqualTo(mat.R3C2));
                Assert.That(data[15], Is.EqualTo(mat.R3C3));

                h_vec.Free();
            }
        }

        /// <summary>
        /// This test goes though each public constuctor and ensures that the
        /// data members of the structure have been properly set.
        /// </summary>
        [Test]
        public void Test_Constructors ()
        {
            {
                // Test default values
                Matrix44 a = new Matrix44();
                Assert.That(a, Is.EqualTo(Matrix44.Zero));
            }
            {
                // Test Matrix44(
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #>,
                //     <#= type #> )
                <#= type #> a = -18759;
                <#= type #> b = 345;
                <#= type #> c = 774;
                <#= type #> d = -3431;
                <#= type #> e = -55;
                <#= type #> f = 47;
                <#= type #> g = 45;
                <#= type #> h = 3461;
                <#= type #> i = -4;
                <#= type #> j = 453;
                <#= type #> k = -3;
                <#= type #> l = -3441;
                <#= type #> m = -189;
                <#= type #> n = 5;
                <#= type #> o = -87;
                <#= type #> p = 341;

                Matrix44 expected = new Matrix44(
                    a, b, c, d,
                    e, f, g, h,
                    i, j, k, l,
                    m, n, o, p);

                Assert.That(expected.R0C0, Is.EqualTo(a));
                Assert.That(expected.R0C1, Is.EqualTo(b));
                Assert.That(expected.R0C2, Is.EqualTo(c));
                Assert.That(expected.R0C3, Is.EqualTo(d));
                Assert.That(expected.R1C0, Is.EqualTo(e));
                Assert.That(expected.R1C1, Is.EqualTo(f));
                Assert.That(expected.R1C2, Is.EqualTo(g));
                Assert.That(expected.R1C3, Is.EqualTo(h));
                Assert.That(expected.R2C0, Is.EqualTo(i));
                Assert.That(expected.R2C1, Is.EqualTo(j));
                Assert.That(expected.R2C2, Is.EqualTo(k));
                Assert.That(expected.R2C3, Is.EqualTo(l));
                Assert.That(expected.R3C0, Is.EqualTo(m));
                Assert.That(expected.R3C1, Is.EqualTo(n));
                Assert.That(expected.R3C2, Is.EqualTo(o));
                Assert.That(expected.R3C3, Is.EqualTo(p));
            }
        }

        [Test]
        public void TestMemberFn_ToString ()
        {
            throw new InconclusiveException("Not Implemented");
        }

        [Test]
        public void TestMemberFn_GetHashCode ()
        {
            var hs1 = new System.Collections.Generic.HashSet<Matrix44>();
            var hs2 = new System.Collections.Generic.HashSet<Int32>();

            for(Int32 i = 0; i < 10000; ++i)
            {
                var a = GetNextRandomMatrix44 ();

                hs1.Add(a);
                hs2.Add(a.GetHashCode ());
            }

            Assert.That(hs1.Count, Is.EqualTo(hs2.Count).Within(10));
        }

<#@ include file="Matrix44.Constants.Tests.t4"#>
<#@ include file="Matrix44.Create.Tests.t4"#>
<#@ include file="Matrix44.Maths.Tests.t4"#>
<#@ include file="Matrix44.Operators.Tests.t4"#>
<#@ include file="Matrix44.Utilities.Tests.t4"#>
    }
