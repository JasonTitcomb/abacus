        // Test Operator: Equality //-----------------------------------------//

        /// <summary>
        /// Helper method for testing equality.
        /// </summary>
        void TestEquality (Matrix44 a, Matrix44 b, Boolean expected )
        {
            // This test asserts the following:
            //   (a == b) == expected
            //   (b == a) == expected
            //   (a != b) == !expected
            //   (b != a) == !expected

            Boolean result_1a = (a == b);
            Boolean result_1b = (a.Equals(b));
            Boolean result_1c = (a.Equals((Object)b));

            Boolean result_2a = (b == a);
            Boolean result_2b = (b.Equals(a));
            Boolean result_2c = (b.Equals((Object)a));

            Boolean result_3a = (a != b);
            Boolean result_4a = (b != a);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_1c, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
            Assert.That(result_2c, Is.EqualTo(expected));
            Assert.That(result_3a, Is.EqualTo(!expected));
            Assert.That(result_4a, Is.EqualTo(!expected));
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of TRUE when two equal
        /// Matrix44 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_i ()
        {
            var a = new Matrix44(44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);
            var b = new Matrix44(44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);

            Boolean expected = true;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of FALSE when two unequal
        /// Matrix44 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_ii ()
        {
            var a = new Matrix44(44, 54, 2, 11, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);
            var b = new Matrix44(44, -54, 2, -1, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);

            Boolean expected = false;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Tests to make sure that all the equality opperators and functions
        /// yield the expected result of TRUE when used on a number of randomly
        /// generated pairs of equal Matrix44 objects.
        /// </summary>
        [Test]
        public void TestOperator_Equality_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();

                Matrix44 b = a;

                this.TestEquality(a, b, true);
            }
        }


        // Test Operator: Addition //-----------------------------------------//

        /// <summary>
        /// Helper method for testing addition.
        /// </summary>
        void TestAddition (Matrix44 a, Matrix44 b, Matrix44 expected )
        {
            // This test asserts the following:
            //   a + b == expected
            //   b + a == expected

            var result_1a = a + b;
            var result_2a = b + a;

            Matrix44 result_1b; Matrix44.Add(ref a, ref b, out result_1b);
            Matrix44 result_2b; Matrix44.Add(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example, all the addition opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_i ()
        {
            var a = new Matrix44(
                  3, - 6,  44,  11,
                 44, -34, -22,  11,
                 36, -34, -22,  34,
                 44, -34, - 3,  12);

            var b = new Matrix44(
                - 6,  12,  18, - 3,
                 44, -34, -22,  11,
                 44, -54, -34,  11,
                 34, -54, -22,  11);

            var expected = new Matrix44(
                - 3,   6,  62,  8,
                 88, -68, -44, 22,
                 80, -88, -56, 45,
                 78, -88, -25, 23);

            this.TestAddition(a, b, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving the identity matrix, all the
        /// addition opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_ii ()
        {
            var a = new Matrix44(
                  3, - 6,  44,  11,
                 44, -34, -22,  11,
                 36, -34, -22,  34,
                 44, -34, - 3,  12);

            var expected = a;
            expected.M11++;
            expected.M22++;
            expected.M33++;
            expected.M44++;

            this.TestAddition(a, Matrix44.Identity, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving two identity matricies,
        /// all the addition opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iii ()
        {
            var i = Matrix44.Identity;

            var expected = new Matrix44(
                2, 0, 0, 0,
                0, 2, 0, 0,
                0, 0, 2, 0,
                0, 0, 0, 2);

            this.TestAddition(i, i, expected);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// addition opperators and functions yield the same results as a
        /// manual addition calculation.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();
                var b = GetNextRandomMatrix44();

                var expected = new Matrix44(
                    a.M11 + b.M11,
                    a.M12 + b.M12,
                    a.M13 + b.M13,
                    a.M14 + b.M14,
                    a.M21 + b.M21,
                    a.M22 + b.M22,
                    a.M23 + b.M23,
                    a.M24 + b.M24,
                    a.M31 + b.M31,
                    a.M32 + b.M32,
                    a.M33 + b.M33,
                    a.M34 + b.M34,
                    a.M41 + b.M41,
                    a.M42 + b.M42,
                    a.M43 + b.M43,
                    a.M44 + b.M44
                    );

                this.TestAddition(a, b, expected);
            }
        }

        // Test Operator: Subtraction //--------------------------------------//

        /// <summary>
        /// Helper method for testing subtraction.
        /// </summary>
        void TestSubtraction (Matrix44 a, Matrix44 b, Matrix44 expected )
        {
            // This test asserts the following:
            //   a - b == expected
            //   b - a == -expected

            var result_1a = a - b;
            var result_2a = b - a;

            Matrix44 result_1b; Matrix44.Subtract(ref a, ref b, out result_1b);
            Matrix44 result_2b; Matrix44.Subtract(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(-expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(-expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the subtraction opperators
        /// and functions yield the correct result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_i ()
        {
            var a = new Matrix44(12, -4, 14, 18, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);
            var b = new Matrix44(15, 11, 7, 27, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);
            var expected = new Matrix44(-3, -15, 7, -9, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);
            this.TestSubtraction(a, b, expected);

            var c = new Matrix44(-423, 342, 7, -800, 44, -54, -22, 11, 44, -54, -22, 11, 44, -54, -22, 11);
            this.TestSubtraction(c, Matrix44.Identity, c);
        }

        /// <summary>
        /// Assert that when subtracting the zero matrix fromt the zero matrix,
        /// all the subtraction opperators and functions yield the correct
        /// result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_ii ()
        {
            this.TestSubtraction(Matrix44.Identity, Matrix44.Identity, Matrix44.Identity);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// subtraction opperators and functions yield the same results as a
        /// manual subtraction calculation.
        /// </summary>
        [Test]
        public void TestOperator_Subtraction_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();
                var b = GetNextRandomMatrix44();

                var expected = new Matrix44(
                    a.M11 - b.M11,
                    a.M12 - b.M12,
                    a.M13 - b.M13,
                    a.M14 - b.M14,
                    a.M21 - b.M21,
                    a.M22 - b.M22,
                    a.M23 - b.M23,
                    a.M24 - b.M24,
                    a.M31 - b.M31,
                    a.M32 - b.M32,
                    a.M33 - b.M33,
                    a.M34 - b.M34,
                    a.M41 - b.M41,
                    a.M42 - b.M42,
                    a.M43 - b.M43,
                    a.M44 - b.M44
                    );

                this.TestSubtraction(a, b, expected);
            }
        }

        // Test Operator: Negation //-----------------------------------------//

        /// <summary>
        /// Helper method for testing negation.
        /// </summary>
        void TestNegation (Matrix44 a, Matrix44 expected )
        {
            // This test asserts the following:
            //   -a == expected

            var result_1a = -a;

            Matrix44 result_1b;
            Matrix44.Negate(ref a, out result_1b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the negation opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_i ()
        {
            <#= type #> r = 3432;
            <#= type #> s = -6218;
            <#= type #> t = -3432;
            <#= type #> u = 6218;

            var a = new Matrix44(r, s, t, u, r, s, t, u, r, s, t, u, r, s, t, u);
            var b = new Matrix44(u, t, s, r, r, s, t, u, r, s, t, u, r, s, t, u);
            var c = new Matrix44(t, u, r, s, r, s, t, u, r, s, t, u, r, s, t, u);
            var d = new Matrix44(s, r, u, t, r, s, t, u, r, s, t, u, r, s, t, u);

            this.TestNegation(a, c);
            this.TestNegation(b, d);
        }

        /// <summary>
        /// Assert that, for known examples involving the zero matrix, all the
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_ii ()
        {
            <#= type #> t = -3432;
            <#= type #> u = 6218;
            <#= type #> r = 3432;
            <#= type #> s = -6218;

            var c = new Matrix44(t, u, r, s, r, s, t, u, r, s, t, u, r, s, t, u);
            var d = new Matrix44(s, r, u, t, r, s, t, u, r, s, t, u, r, s, t, u);

            this.TestNegation(c, Matrix44.Identity - c);
            this.TestNegation(d, Matrix44.Identity - d);
        }

        /// <summary>
        /// Assert that when negating the zero matrix, all the
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iii ()
        {
            this.TestNegation(Matrix44.Identity, Matrix44.Identity);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// negation opperators and functions yield the same results as a
        /// manual negation calculation.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();
                this.TestNegation(a, Matrix44.Identity - a);
            }
        }

        // Test Operator: Multiplication //-----------------------------------//

        /// <summary>
        /// Helper method for testing multiplication.
        /// </summary>
        void TestMultiplication (Matrix44 a, Matrix44 b, Matrix44 expected )
        {
            // This test asserts the following:
            //   a * b == expected
            //   b * a == expected

            var result_1a = a * b;
            var result_2a = b * a;

            Matrix44 result_1b; Matrix44.Multiply(ref a, ref b, out result_1b);
            Matrix44 result_2b; Matrix44.Multiply(ref b, ref a, out result_2b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example, all the multiplication opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_i ()
        {
            var a = new Matrix44();
            a.M11 = -27;
            a.M12 = 36;
            a.M13 = 9;
            a.M14 = -54;

            a.M21 = 36;
            a.M22 = 3;
            a.M23 = 9;
            a.M24 = 9;

            a.M31 = 9;
            a.M32 = 9;
            a.M33 = -36;
            a.M34 = 6;

            a.M41 = -24;
            a.M42 = 9;
            a.M43 = 36;
            a.M44 = -12;

            var b = new Matrix44();
            b.M11 = 3402;
            b.M12 = -1269;
            b.M13 = -2187;
            b.M14 = 2484;

            b.M21 = -999;
            b.M22 = 1467;
            b.M23 = 351;
            b.M24 = -1971;

            b.M31 = -387;
            b.M32 = 81;
            b.M33 = 1674;
            b.M34 = -693;

            b.M41 = 1584;
            b.M42 = -621;
            b.M43 = -1863;
            b.M44 = 1737;

            this.TestMultiplication(a, a, b);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// multiplication opperators and functions yield the same results as a
        /// manual multiplication calculation.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_ii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();
                var b = GetNextRandomMatrix44();

                var c = new Matrix44(
                    a.M11 * b.M11,
                    a.M12 * b.M12,
                    a.M13 * b.M13,
                    a.M14 * b.M14,
                    a.M21 * b.M21,
                    a.M22 * b.M22,
                    a.M23 * b.M23,
                    a.M24 * b.M24,
                    a.M31 * b.M31,
                    a.M32 * b.M32,
                    a.M33 * b.M33,
                    a.M34 * b.M34,
                    a.M41 * b.M41,
                    a.M42 * b.M42,
                    a.M43 * b.M43,
                    a.M44 * b.M44
                    );

                this.TestMultiplication(a, b, c);
            }
        }


        // Test Operator: Division //-----------------------------------------//

        /// <summary>
        /// Helper method for testing division.
        /// </summary>
        void TestDivision (Matrix44 a, Matrix44 b, Matrix44 expected )
        {
            // This test asserts the following:
            //   a / b == expected

            var result_1a = a / b;

            Matrix44 result_1b; Matrix44.Divide(ref a, ref b, out result_1b);

            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example using whole numbers, all the
        /// division opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Division_i ()
        {
            Single r = 10;
            Single s = -40;
            Single t = 1;
            Single u = -400;

            Single w = 1200;
            Single x = 4000;
            Single y = 200;
            Single z = -300;

            var a = new Matrix44(
                w, x, y, z,
                x, y, z, w,
                y, z, w, x,
                z, w, x, y);

            var b = new Matrix44(
                r, s, t, u,
                r, s, t, u,
                r, s, t, u,
                r, s, t, u);

            <#= type #> i = (<#= type #>) 3 / (<#= type #>) 4;
            <#= type #> j = (<#= type #>) 1 / (<#= type #>) 2;
            <#= type #> k = (<#= type #>) 15 / (<#= type #>) 2;

            var expected = new Matrix44(
                120, -100, 200, i,
                400, -5, -300, -3,
                20, k, 1200, -10,
                -30, -30, 4000, -j);

            this.TestDivision(a, b, expected);
        }

        /// <summary>
        /// Assert that, for a known example using fractional numbers, all the
        /// division opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Division_ii ()
        {
            <#= type #> r = 5;
            <#= type #> s = 4;
            <#= type #> t = ((<#= type #>) 1 ) / ((<#= type #>) 10);
            <#= type #> u = ((<#= type #>) (-1) ) / ((<#= type #>) 40 );
            <#= type #> v = -20;
            <#= type #> w = 100;
            <#= type #> x = 2000;
            <#= type #> y = 200;
            <#= type #> z = -5;

            var a = new Matrix44(y, z, w, v, r, s, t, u, r, s, t, u, r, s, t, u);
            var b = new Matrix44(x, y, z, z, r, s, t, u, r, s, t, u, r, s, t, u);
            var c = new Matrix44(t, u, v, s, r, s, t, u, r, s, t, u, r, s, t, u);

            this.TestDivision(a, b, c);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the
        /// division opperators and functions yield the same results as a
        /// manual addition division.
        /// </summary>
        [Test]
        public void TestOperator_Division_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomMatrix44();
                var b = GetNextRandomMatrix44();

                var c = new Matrix44(
                    a.M11 / b.M11,
                    a.M12 / b.M12,
                    a.M13 / b.M13,
                    a.M14 / b.M14,
                    a.M21 / b.M21,
                    a.M22 / b.M22,
                    a.M23 / b.M23,
                    a.M24 / b.M24,
                    a.M31 / b.M31,
                    a.M32 / b.M32,
                    a.M33 / b.M33,
                    a.M34 / b.M34,
                    a.M41 / b.M41,
                    a.M42 / b.M42,
                    a.M43 / b.M43,
                    a.M44 / b.M44
                    );

                this.TestDivision(a, b, c);
            }
        }

