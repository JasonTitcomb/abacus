    /// <summary>
    /// todo
    /// </summary>
    [TestFixture]
    public class Vector2Tests
    {
<#@ include file="Vector2.TestHelpers.t4"#>

        // Test: StructLayout //----------------------------------------------//

        /// <summary>
        /// This test makes sure that the struct layout has been defined
        /// correctly.
        /// </summary>
        [Test]
        public void Test_StructLayout_i ()
        {
            Type t = typeof(Vector2);

            Assert.That(
                t.StructLayoutAttribute.Value,
                Is.EqualTo(LayoutKind.Sequential));
        }

        /// <summary>
        /// This test makes sure that when examining the memory addresses of the
        /// X and Y member variables of a number of randomly generated Vector2
        /// objects the results are as expected.
        /// </summary>
        [Test]
        public unsafe void Test_StructLayout_ii ()
        {
            for( Int32 i = 0; i < 100; ++ i)
            {
                Vector2 vec = GetNextRandomVector2();

                GCHandle h_vec = GCHandle.Alloc(vec, GCHandleType.Pinned);

                IntPtr vecAddress = h_vec.AddrOfPinnedObject();

                <#= type #>[] data = new <#= type #>[2];

                // nb: when Fixed32 and Half are moved back into the main
                //     dev branch there will be need for an extension method for
                //     Marshal that will perform the copy for those types.
                MarshalHelper.Copy(vecAddress, data, 0, 2);
                Assert.That(data[0], Is.EqualTo(vec.X));
                Assert.That(data[1], Is.EqualTo(vec.Y));

                h_vec.Free();
            }
        }

        // Test: Constructors //----------------------------------------------//

        /// <summary>
        /// This test goes though each public constuctor and ensures that the
        /// data members of the structure have been properly set.
        /// </summary>
        [Test]
        public void Test_Constructors_i ()
        {
            {
                // Test default values
                Vector2 a = new Vector2();
                Assert.That(a, Is.EqualTo(Vector2.Zero));
            }
            {
                // Test Vector2( <#= type #>, <#= type #> )
                <#= type #> u = -189;
                <#= type #> v = 429;
                Vector2 c = new Vector2(u, v);
                Assert.That(c.X, Is.EqualTo(u));
                Assert.That(c.Y, Is.EqualTo(v));
            }
        }

        // Test Member Fn: ToString //----------------------------------------//

        /// <summary>
        /// For a given example, this test ensures that the ToString function
        /// yields the expected string.
        /// </summary>
        [Test]
        public void TestMemberFn_ToString_i ()
        {
            Vector2 a = new Vector2(42, -17);

            String result = a.ToString();

            String expected = "{X:42 Y:-17}";

            Assert.That(result, Is.EqualTo(expected));
        }

        // Test Member Fn: GetHashCode //-------------------------------------//

        /// <summary>
        /// Makes sure that the hashing function is good by testing 10,000
        /// random scenarios and ensuring that there are no more than 10
        /// collisions.
        /// </summary>
        [Test]
        public void TestMemberFn_GetHashCode_i ()
        {
            var hs1 = new System.Collections.Generic.HashSet<Vector2>();
            var hs2 = new System.Collections.Generic.HashSet<Int32>();

            for(Int32 i = 0; i < 10000; ++i)
            {
                var a = GetNextRandomVector2();

                hs1.Add(a);
                hs2.Add(a.GetHashCode());
            }

            Assert.That(hs1.Count, Is.EqualTo(hs2.Count).Within(10));
        }

        // Test Member Fn: Length //------------------------------------------//

        /// <summary>
        /// Tests that for a known example the Length member function yields
        /// the correct result.
        /// </summary>
        [Test]
        public void TestMemberFn_Length_i ()
        {
            Vector2 a = new Vector2(3, -4);

            <#= type #> expected = 5;

            <#= type #> result = a.Length();

            Assert.That(result, Is.EqualTo(expected));
        }

        // Test Member Fn: LengthSquared //-----------------------------------//

        /// <summary>
        /// Tests that for a known example the LengthSquared member function
        /// yields the correct result.
        /// </summary>
        [Test]
        public void TestMemberFn_LengthSquared_i ()
        {
            Vector2 a = new Vector2(3, -4);

            <#= type #> expected = 25;

            <#= type #> result = a.LengthSquared();

            Assert.That(result, Is.EqualTo(expected));
        }

        // Test Member Fn: IsUnit //------------------------------------------//

        /// <summary>
        /// Tests that for the simple vectors the IsUnit member function
        /// returns the correct result of TRUE.
        /// </summary>
        [Test]
        public void TestMemberFn_IsUnit_i ()
        {
            Vector2 a = new Vector2( 1,  0);
            Vector2 b = new Vector2(-1,  0);
            Vector2 c = new Vector2( 0,  1);
            Vector2 d = new Vector2( 0, -1);
            Vector2 e = new Vector2( 1,  1);
            Vector2 f = new Vector2( 0,  0);

            Boolean aIsUnit;
            Boolean bIsUnit;
            Boolean cIsUnit;
            Boolean dIsUnit;
            Boolean eIsUnit;
            Boolean fIsUnit;

            Vector2.IsUnit(ref a, out aIsUnit);
            Vector2.IsUnit(ref b, out bIsUnit);
            Vector2.IsUnit(ref c, out cIsUnit);
            Vector2.IsUnit(ref d, out dIsUnit);
            Vector2.IsUnit(ref e, out eIsUnit);
            Vector2.IsUnit(ref f, out fIsUnit);

            Assert.That(aIsUnit, Is.EqualTo(true));
            Assert.That(bIsUnit, Is.EqualTo(true));
            Assert.That(cIsUnit, Is.EqualTo(true));
            Assert.That(dIsUnit, Is.EqualTo(true));

            Assert.That(eIsUnit, Is.EqualTo(false));
            Assert.That(fIsUnit, Is.EqualTo(false));
        }

        /// <summary>
        /// This test makes sure that the IsUnit member function returns the
        /// correct result of TRUE for a number of scenarios where the test
        /// vector is both random and normalised.
        /// </summary>
        [Test]
        public void TestMemberFn_IsUnit_ii ()
        {
            for( Int32 i = 0; i < 100; ++ i)
            {
                Vector2 a = GetNextRandomVector2();

                Vector2 b; Vector2.Normalise(ref a, out b);

                Boolean bIsUnit;
                Vector2.IsUnit(ref b, out bIsUnit);

                Assert.That(bIsUnit, Is.EqualTo(true));
            }
        }

        /// <summary>
        /// This test ensures that the IsUnit member function correctly
        /// returns TRUE for a collection of vectors, all known to be of unit
        /// length.
        /// </summary>
        [Test]
        public void TestMemberFn_IsUnit_iii ()
        {
            <#= type #> radius = 1;

            <#= type #> pi; RealMaths.Pi(out pi);

            for( Int32 i = 0; i <= 1000; ++ i)
            {
                <#= type #> theta = 2 * pi * i * radius / 100;

                <#= type #> x = RealMaths.Sin(theta);
                <#= type #> y = RealMaths.Cos(theta);

                Vector2 a = new Vector2(x,  y);
                Boolean aIsUnit;
                Vector2.IsUnit(ref a, out aIsUnit);

                Assert.That(aIsUnit, Is.EqualTo(true));
            }
        }

        /// <summary>
        /// This test makes sure that the IsUnit member function returns the
        /// correct result of FALSE for a number of scenarios where the test
        /// vector is randomly generated and not normalised.  It's highly
        /// unlikely that the random generator will create a unit vector!
        /// </summary>
        [Test]
        public void TestMemberFn_IsUnit_iv ()
        {
            for( Int32 i = 0; i < 100; ++ i)
            {
                Vector2 a = GetNextRandomVector2();
                Boolean aIsUnit;
                Vector2.IsUnit(ref a, out aIsUnit);
                Assert.That(aIsUnit, Is.EqualTo(false));
            }
        }

<#@ include file="Vector2.Constants.Tests.t4"#>
<#@ include file="Vector2.Maths.Tests.t4"#>
<#@ include file="Vector2.Operators.Tests.t4"#>
<#@ include file="Vector2.Splines.Tests.t4"#>
<#@ include file="Vector2.Utilities.Tests.t4"#>

    }
