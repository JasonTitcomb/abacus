        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateTranslation_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateTranslation_ii ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateScale_i ()
        {
            throw new NotImplementedException();
        }

        //// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateScale_ii ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateScale_iii ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateRotationX_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateRotationY_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateRotationZ_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromAxisAngle_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromAllAxis_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateWorldNew_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateWorld_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromQuaternion_i ()
        {
            <#= type #> yaw; RealMaths.Pi(out yaw); yaw /= (<#= type #>) 4;
            <#= type #> pitch; RealMaths.Pi(out pitch); pitch /= (<#= type #>) (-8);
            <#= type #> roll; RealMaths.Pi(out roll); roll /= (<#= type #>) 2;

            Quaternion q; Quaternion.CreateFromYawPitchRoll(yaw, pitch, roll, out q);
            q.Normalise();

            Matrix44 m; Matrix44.CreateFromQuaternion(ref q, out m);

            Matrix44 expected = new Matrix44 ();
            expected.M11 = <#= type #>.Parse("-0.270598"); // this is a grim way to do it, make it so we can cast double to fixed
            expected.M12 = <#= type #>.Parse("0.9238795");
            expected.M13 = <#= type #>.Parse("-0.270598");
            expected.M14 = 0;
            expected.M21 = <#= type #>.Parse("-0.7071067");
            expected.M22 = <#= type #>.Parse("6.705523E-08");
            expected.M23 = <#= type #>.Parse("0.7071067");
            expected.M24 = 0;
            expected.M31 = <#= type #>.Parse("0.6532815");
            expected.M32 = <#= type #>.Parse("0.3826834");
            expected.M33 = <#= type #>.Parse("0.6532815");
            expected.M34 = 0;
            expected.M41 = 0;
            expected.M42 = 0;
            expected.M43 = 0;
            expected.M44 = 1;


            AssertEqualWithinReason(m, expected);

        }

        /// <summary>
        /// Assert that, for a number of examples, a random quaternion can be
        /// selected, converted to a Matrix44 then converted back to the same
        /// quaternion (assuming that the conversion back is correct).
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromQuaternion_ii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                Quaternion q = QuaternionTests.GetNextRandomQuaternion();
                Quaternion.Normalise(ref q, out q);

                Matrix44 m;
                Matrix44.CreateFromQuaternion(ref q, out m);

                Quaternion q2;
                Quaternion.CreateFromRotationMatrix(ref m, out q2);

                QuaternionTests.AssertEqualWithinReason(q, q2);
            }
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateFromYawPitchRoll_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateBillboard_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateConstrainedBillboard_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreatePerspectiveFieldOfView_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreatePerspective_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreatePerspectiveOffCenter_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateOrthographic_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void CreateOrthographicOffCenter_i ()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// todo
        /// </summary>
        [Test]
        public void TestStaticFn_CreateLookAt_i ()
        {
            throw new NotImplementedException();
        }

