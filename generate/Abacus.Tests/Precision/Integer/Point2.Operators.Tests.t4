        // Test Operator: Equality //-----------------------------------------//

        /// <summary>
        /// Helper method for testing equality.
        /// </summary>
        void TestEquality (Point2 a, Point2 b, Boolean expected )
        {
            // This test asserts the following:
            //   (a == b) == expected
            //   (b == a) == expected
            //   (a != b) == !expected
            //   (b != a) == !expected

            Boolean result_1a = (a == b);
            Boolean result_1b = (a.Equals(b));
            Boolean result_1c = (a.Equals((Object)b));
            
            Boolean result_2a = (b == a);
            Boolean result_2b = (b.Equals(a));
            Boolean result_2c = (b.Equals((Object)a));

            Boolean result_3a = (a != b);
            Boolean result_4a = (b != a);
            
            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_1c, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
            Assert.That(result_2c, Is.EqualTo(expected));
            Assert.That(result_3a, Is.EqualTo(!expected));
            Assert.That(result_4a, Is.EqualTo(!expected));
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of TRUE when two equal  
        /// Point2 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_i ()
        {
            var a = new Point2(44, -54);
            var b = new Point2(44, -54);

            Boolean expected = true;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Makes sure that, for a known example, all the equality opperators
        /// and functions yield the expected result of FALSE when two unequal  
        /// Point2 objects are compared.
        /// </summary>
        [Test]
        public void TestOperator_Equality_ii ()
        {
            var a = new Point2(44, 54);
            var b = new Point2(44, -54);

            Boolean expected = false;

            this.TestEquality(a, b, expected);
        }

        /// <summary>
        /// Tests to make sure that all the equality opperators and functions 
        /// yield the expected result of TRUE when used on a number of randomly 
        /// generated pairs of equal Point2 objects.
        /// </summary>
        [Test]
        public void TestOperator_Equality_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomPoint2();

                Point2 b = a;

                this.TestEquality(a, b, true);
            }
        }


        // Test Operator: Addition //-----------------------------------------//

        /// <summary>
        /// Helper method for testing addition.
        /// </summary>
        void TestAddition (Point2 a, Point2 b, Point2 expected )
        {
            // This test asserts the following:
            //   a + b == expected
            //   b + a == expected

            var result_1a = a + b;
            var result_2a = b + a;

            Point2 result_1b; Point2.Add(ref a, ref b, out result_1b);
            Point2 result_2b; Point2.Add(ref b, ref a, out result_2b);
            
            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example, all the addition opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_i ()
        {
            var a = new Point2(3, -6);
            var b = new Point2(-6, 12);

            var expected = new Point2(-3, 6);

            this.TestAddition(a, b, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving the zero point, all the 
        /// addition opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Addition_ii ()
        {
            var a = new Point2(-2313, 88);

            var expected = a;

            this.TestAddition(a, Point2.Zero, expected);
        }

        /// <summary>
        /// Assert that, for a known example involving two zero points, all the 
        /// addition opperators and functions yield the correct result of zero.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iii ()
        {
            this.TestAddition(Point2.Zero, Point2.Zero, Point2.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the 
        /// addition opperators and functions yield the same results as a
        /// manual addition calculation.
        /// </summary>
        [Test]
        public void TestOperator_Addition_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomPoint2();
                var b = GetNextRandomPoint2();

                var expected = new Point2(a.X + b.X, a.Y + b.Y);

                this.TestAddition(a, b, expected);
            }
        }

        // Test Operator: Subtraction //--------------------------------------//
        
        /// <summary>
        /// Helper method for testing subtraction.
        /// </summary>
        void TestSubtraction (Point2 a, Point2 b, Point2 expected )
        {
            // This test asserts the following:
            //   a - b == expected
            //   b - a == -expected

            var result_1a = a - b;
            var result_2a = b - a;

            Point2 result_1b; Point2.Subtract(ref a, ref b, out result_1b);
            Point2 result_2b; Point2.Subtract(ref b, ref a, out result_2b);
            
            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(-expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(-expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the subtraction opperators
        /// and functions yield the correct result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_i ()
        {
            var a = new Point2(12, -4);
            var b = new Point2(15, 11);
            var expected = new Point2(-3, -15);
            this.TestSubtraction(a, b, expected);

            var c = new Point2(-423, 342);
            this.TestSubtraction(c, Point2.Zero, c);
        }

        /// <summary>
        /// Assert that when subtracting the zero point fromt the zero point, 
        /// all the subtraction opperators and functions yield the correct 
        /// result.
        /// <summary>
        [Test]
        public void TestOperator_Subtraction_ii ()
        {
            this.TestSubtraction(Point2.Zero, Point2.Zero, Point2.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the 
        /// subtraction opperators and functions yield the same results as a
        /// manual subtraction calculation.
        /// </summary>
        [Test]
        public void TestOperator_Subtraction_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomPoint2();
                var b = GetNextRandomPoint2();

                var expected = new Point2(a.X - b.X, a.Y - b.Y);

                this.TestSubtraction(a, b, expected);
            }
        }

        // Test Operator: Negation //-----------------------------------------//
        
        /// <summary>
        /// Helper method for testing negation.
        /// </summary>
        void TestNegation (Point2 a, Point2 expected )
        {
            // This test asserts the following:
            //   -a == expected

            var result_1a = -a;

            Point2 result_1b; Point2.Negate(ref a, out result_1b);
            
            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for known examples, all the negation opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_i ()
        {
            <#= type #> r = 3432;
            <#= type #> s = -6218;
            <#= type #> t = -3432;
            <#= type #> u = 6218;

            var a = new Point2(r, s);
            var b = new Point2(u, t);
            var c = new Point2(t, u);
            var d = new Point2(s, r);

            this.TestNegation(a, c);
            this.TestNegation(b, d);
        }

        /// <summary>
        /// Assert that, for known examples involving the zero point, all the 
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_ii ()
        {
            <#= type #> t = -3432;
            <#= type #> u = 6218;
            <#= type #> r = 3432;
            <#= type #> s = -6218;

            var c = new Point2(t, u);
            var d = new Point2(s, r);

            this.TestNegation(c, Point2.Zero - c);
            this.TestNegation(d, Point2.Zero - d);
        }

        /// <summary>
        /// Assert that when negating the zero point, all the 
        /// negation opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iii ()
        {
            this.TestNegation(Point2.Zero, Point2.Zero);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the 
        /// negation opperators and functions yield the same results as a
        /// manual negation calculation.
        /// </summary>
        [Test]
        public void TestOperator_Negation_iv ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomPoint2();
                this.TestNegation(a, Point2.Zero - a);
            }
        }

        // Test Operator: Multiplication //-----------------------------------//

        /// <summary>
        /// Helper method for testing multiplication.
        /// </summary>
        void TestMultiplication (Point2 a, Point2 b, Point2 expected )
        {
            // This test asserts the following:
            //   a * b == expected
            //   b * a == expected

            var result_1a = a * b;
            var result_2a = b * a;

            Point2 result_1b; Point2.Multiply(ref a, ref b, out result_1b);
            Point2 result_2b; Point2.Multiply(ref b, ref a, out result_2b);
            
            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_2a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
            Assert.That(result_2b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example, all the multiplication opperators
        /// and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_i ()
        {
            <#= type #> r = 18;
            <#= type #> s = -54;

            <#= type #> x = 3;
            <#= type #> y = 6;
            <#= type #> z = -9;

            var a = new Point2(x, y);
            var b = new Point2(y, z);
            var c = new Point2(r, s);

            this.TestMultiplication(a, b, c);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the 
        /// multiplication opperators and functions yield the same results as a
        /// manual multiplication calculation.
        /// </summary>
        [Test]
        public void TestOperator_Multiplication_ii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomPoint2();
                var b = GetNextRandomPoint2();

                var c = new Point2(a.X * b.X, a.Y * b.Y);

                this.TestMultiplication(a, b, c);
            }
        }


        // Test Operator: Division //-----------------------------------------//

        /// <summary>
        /// Helper method for testing division.
        /// </summary>
        void TestDivision (Point2 a, Point2 b, Point2 expected )
        {
            // This test asserts the following:
            //   a / b == expected

            var result_1a = a / b;

            Point2 result_1b; Point2.Divide(ref a, ref b, out result_1b);
            
            Assert.That(result_1a, Is.EqualTo(expected));
            Assert.That(result_1b, Is.EqualTo(expected));
        }

        /// <summary>
        /// Assert that, for a known example using whole numbers, all the 
        /// division opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Division_i ()
        {
            <#= type #> r = 10;
            <#= type #> s = -40;

            <#= type #> x = 2000;
            <#= type #> y = 200;
            <#= type #> z = -5;

            var a = new Point2(x, y);
            var b = new Point2(y, z);
            var c = new Point2(r, s);

            this.TestDivision(a, b, c);
        }

        /// <summary>
        /// Assert that, for a known example using fractional numbers, all the 
        /// division opperators and functions yield the correct result.
        /// </summary>
        [Test]
        public void TestOperator_Division_ii ()
        {
            <#= type #> t = ((<#= type #>) 1 ) / ((<#= type #>) 10);
            <#= type #> u = ((<#= type #>) (-1) ) / ((<#= type #>) 40 );
            <#= type #> x = 2000;
            <#= type #> y = 200;
            <#= type #> z = -5;

            var a = new Point2(y, z);
            var b = new Point2(x, y);
            var c = new Point2(t, u);

            this.TestDivision(a, b, c);
        }

        /// <summary>
        /// Assert that, for a number of randomly generated scenarios, all the 
        /// division opperators and functions yield the same results as a
        /// manual addition division.
        /// </summary>
        [Test]
        public void TestOperator_Division_iii ()
        {
            for(Int32 i = 0; i < 100; ++i)
            {
                var a = GetNextRandomPoint2();
                var b = GetNextRandomPoint2();

                var c = new Point2(a.X / b.X, a.Y / b.Y);

                this.TestDivision(a, b, c);
            }
        }

