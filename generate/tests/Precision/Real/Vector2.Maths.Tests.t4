		#region Maths

		[Test]
		public void TestStaticFn_Distance_i ()
		{
			Vector2 a = new Vector2(0, 4);
			Vector2 b = new Vector2(3, 0);

			<#= type #> expected = 5;
			<#= type #> result; Vector2.Distance(ref a, ref b, out result);

			Assert.That(result, Is.EqualTo(expected));
		}

		[Test]
		public void TestStaticFn_Distance_ii ()
		{
			Vector2 a = new Vector2(0, -4);
			Vector2 b = new Vector2(3, 0);

			<#= type #> expected = 5;
			<#= type #> result; Vector2.Distance(ref a, ref b, out result);

			Assert.That(result, Is.EqualTo(expected));
		}

		[Test]
		public void TestStaticFn_Distance_iii ()
		{
			Vector2 a = new Vector2(0, -4);
			Vector2 b = new Vector2(-3, 0);

			<#= type #> expected = 5;
			<#= type #> result; Vector2.Distance(ref a, ref b, out result);

			Assert.That(result, Is.EqualTo(expected));
		}

		[Test]
		public void TestStaticFn_DistanceSquared ()
		{
			Vector2 a = new Vector2(0, 4);
			Vector2 b = new Vector2(3, 0);

			<#= type #> expected = 25;
			<#= type #> result; Vector2.Distance(ref a, ref b, out result);

			Assert.That(result, Is.EqualTo(expected));
		}

		[Test]
		public void TestStaticFn_Dot ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestStaticFn_PerpDot ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestStaticFn_Perpendicular ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestStaticFn_Normalise ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestStaticFn_Reflect ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestStaticFn_TransformMatix44 ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestStaticFn_TransformNormal ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestStaticFn_TransformQuaternion ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		#endregion
