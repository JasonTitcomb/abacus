		// Test Static Fn: Distance //----------------------------------------//

		/// <summary>
		/// Assert that, for a number of known examples, the Distance method
		/// yeilds the correct results.
		/// </summary>
		[Test]
		public void TestStaticFn_Distance_i ()
		{
			{
				Vector3 a = new Vector3(0, 4, 12);
				Vector3 b = new Vector3(3, 0, 0);

				<#= type #> expected = 13;
				<#= type #> result;

				Vector3.Distance(ref a, ref b, out result);

				Assert.That(result, Is.EqualTo(expected));
			}

			{
				Vector3 a = new Vector3(0, -4, 12);
				Vector3 b = new Vector3(3, 0, 0);

				<#= type #> expected = 13;
				<#= type #> result;

				Vector3.Distance(ref a, ref b, out result);

				Assert.That(result, Is.EqualTo(expected));
			}

			{
				Vector3 a = new Vector3(0, -4, -12);
				Vector3 b = new Vector3(-3, 0, 0);

				<#= type #> expected = 13;
				<#= type #> result;

				Vector3.Distance(ref a, ref b, out result);

				Assert.That(result, Is.EqualTo(expected));
			}

			{
				Vector3 a = Vector3.Zero;

				<#= type #> expected = 0;
				<#= type #> result;

				Vector3.Distance(ref a, ref a, out result);

				Assert.That(result, Is.EqualTo(expected));
			}
		}

		/// <summary>
		/// Assert that, for a number of randomly generated examples, the 
		/// Distance method yeilds the same results as those obtained from
		/// performing a manual calculation.
		/// </summary>
		[Test]
		public void TestStaticFn_Distance_ii ()
		{
			for(Int32 i = 0; i < 100; ++i)
			{
				Vector3 a = GetNextRandomVector3();

				<#= type #> expected = 
					RealMaths.Sqrt((a.X * a.X) + (a.Y * a.Y) + (a.Z * a.Z));

				Assert.That(a.Length(), Is.EqualTo(expected));
			}
		}

		// Test Static Fn: DistanceSquared //---------------------------------//

		/// <summary>
		/// Assert that, for a number of known examples, the DistanceSquared 
		/// method yeilds the correct results.
		/// </summary>
		[Test]
		public void TestStaticFn_DistanceSquared_i ()
		{
			{
				Vector3 a = new Vector3(0, 4, 12);
				Vector3 b = new Vector3(3, 0, 0);

				<#= type #> expected = 161;
				<#= type #> result;

				Vector3.DistanceSquared(ref a, ref b, out result);

				Assert.That(result, Is.EqualTo(expected));
			}

			{
				Vector3 a = Vector3.Zero;

				<#= type #> expected = 0;
				<#= type #> result;

				Vector3.DistanceSquared(ref a, ref a, out result);

				Assert.That(result, Is.EqualTo(expected));
			}
		}


		/// <summary>
		/// Assert that, for a number of randomly generated examples, the 
		/// DistanceSquared method yeilds the same results as those obtained 
		/// from performing a manual calculation.
		/// </summary>
		[Test]
		public void TestStaticFn_DistanceSquared_ii ()
		{
			for(Int32 i = 0; i < 100; ++i)
			{
				Vector3 a = GetNextRandomVector3();
				Vector3 b = GetNextRandomVector3();

				Vector3 c = b - a;

				<#= type #> expected = (c.X * c.X) + (c.Y * c.Y) + (c.Z * c.Z);
				<#= type #> result;

				Vector3.DistanceSquared(ref a, ref b, out result);

				Assert.That(result, Is.EqualTo(expected));
			}
		}

		// Test Static Fn: Dot //---------------------------------------------//

		/// <summary>
		/// Assert that, for a number of randomly generated examples, the 
		/// Dot method yeilds the same results as those obtained from
		/// performing a manual calculation.
		/// </summary>
		[Test]
		public void TestStaticFn_Dot_i ()
		{
			for(Int32 i = 0; i < 100; ++i)
			{
				Vector3 a = GetNextRandomVector3();
				Vector3 b = GetNextRandomVector3();

				<#= type #> expected = (a.X * b.X) + (a.Y * b.Y) + (a.Z * b.Z);
				<#= type #> result; Vector3.Dot(ref a, ref b, out result);

				Assert.That(result, Is.EqualTo(expected));
			}
		}

		/// <summary>
		/// Assert that two unit vectors pointing in opposing directions yeild a
		/// dot product of negative one.
		/// </summary>
		[Test]
		public void TestStaticFn_Dot_ii ()
		{
			Vector3 a = new Vector3(0, 0, 1);
			Vector3 b = new Vector3(0, 0, -1);

			<#= type #> expected = -1;
			<#= type #> result; Vector3.Dot(ref a, ref b, out result);

			Assert.That(result, Is.EqualTo(expected));
		}

		/// <summary>
		/// Assert that two unit vectors pointing in the same direction yeild a
		/// dot product of one.
		/// </summary>
		[Test]
		public void TestStaticFn_Dot_iii ()
		{
			Vector3 a = new Vector3(0, 0, 1);
			Vector3 b = new Vector3(0, 0, 1);

			<#= type #> expected = 1;
			<#= type #> result; Vector3.Dot(ref a, ref b, out result);

			Assert.That(result, Is.EqualTo(expected));
		}

		/// <summary>
		/// Assert that two perpendicular unit vectors yeild a dot product of 
		/// zero.
		/// </summary>
		[Test]
		public void TestStaticFn_Dot_iv ()
		{
			Vector3 a = new Vector3(0, 1, 0);
			Vector3 b = new Vector3(0, 0, 1);

			<#= type #> expected = 0;
			<#= type #> result; Vector3.Dot(ref a, ref b, out result);

			Assert.That(result, Is.EqualTo(expected));
		}

		// Test Static Fn: Normalise //---------------------------------------//

		/// <summary>
		/// Assert that, for a known examples where the weighting parameter is
		/// is outside the allowed range, the correct exception is thrown.
		/// </summary>
		[Test]
		public void TestStaticFn_Normalise_i()
		{
			{
				Vector3 a = Vector3.Zero;

				Vector3 b;

				Assert.Throws(
					typeof(ArgumentOutOfRangeException), 
					() => 
					Vector3.Normalise(ref a, out b)
				);
			}

			{
				Vector3 a = new Vector3(
					<#= type #>.MaxValue, 
					<#= type #>.MaxValue, 
					<#= type #>.MaxValue);

				Vector3 b;

				Assert.Throws(
					typeof(ArgumentOutOfRangeException), 
					() => 
					Vector3.Normalise(ref a, out b)
				);
			}
		}

		/// <summary>
		/// Assert that, for a number of randomly generated examples, the 
		/// Normalise method yeilds a unit vector (with length equal to one);
		/// </summary>
		[Test]
		public void TestStaticFn_Normalise_ii ()
		{
			<#= type #> epsilon; RealMaths.Epsilon(out epsilon);

			for( Int32 i = 0; i < 100; ++ i)
			{
				Vector3 a = GetNextRandomVector3();

				Vector3 b; Vector3.Normalise(ref a, out b);
				<#= type #> expected = 1;
				<#= type #> result1 = b.Length();
				Assert.That(result1, Is.EqualTo(expected).Within(epsilon));

			 	// The normalise function takes both a ref and out parameter,
				// need to check that if we pass in the same value as both
				// parameters we get the same results.
				Vector3 c = a;
				Vector3.Normalise(ref c, out c);
				<#= type #> result2 = c.Length();
				Assert.That(result2, Is.EqualTo(expected).Within(epsilon));
			}
		}

		/// <summary>
		/// Assert that, for a number of randomly generated examples, the 
		/// Normalise method yeilds a vector, which when multipled by the 
		/// length of the original vector results in the same vector as the
		/// original vector;
		/// </summary>
		[Test]
		public void TestStaticFn_Normalise_iii ()
		{
			<#= type #> epsilon; RealMaths.Epsilon(out epsilon);

			for( Int32 i = 0; i < 100; ++ i)
			{
				Vector3 a = GetNextRandomVector3();
				<#= type #> l = a.Length();
				Vector3 expected = a;

				Vector3 b; Vector3.Normalise(ref a, out b);
				Vector3 result1 = b * l;
				AssertEqualWithinReason(result1, expected);

				Vector3 c = a;

				// The normalise function takes both a ref and out parameter,
				// need to check that if we pass in the same value as both
				// parameters we get the same results.
				Vector3.Normalise(ref c, out c);
				Vector3 result2 = c * l;
				AssertEqualWithinReason(result2, expected);
			}
		}

		// Test Static Fn: Cross //-------------------------------------------//
		[Test]
		public void TestStaticFn_Cross_i ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		// Test Static Fn: Reflect //-----------------------------------------//

		/// <summary>
		/// Assert that, for a number of known examples, the Reflect method
		/// yeilds the correct results.
		/// </summary>
		[Test]
		public void TestStaticFn_Reflect_i ()
		{
			{
				Vector3 incident = new Vector3(20, -5, 10);

				Vector3 normal = new Vector3(1, -1, 2);
				Vector3.Normalise(ref normal, out normal);

				Vector3 expected = new Vector3(-5, 20, 2);
				Vector3 result;
				Vector3.Reflect(ref incident, ref normal, out result);

				AssertEqualWithinReason(result, expected);
			}

			{
				Vector3 incident = new Vector3(20, -5, 10);

				Vector3 normal = new Vector3(2, -1, 2);
				Vector3.Normalise(ref normal, out normal);

				Vector3 expected = new Vector3(-16, 13, 2);
				Vector3 result;
				Vector3.Reflect(ref incident, ref normal, out result);

				AssertEqualWithinReason(result, expected);
			}

			{
				Vector3 incident = Vector3.Zero;

				Vector3 normal = new Vector3(0, 0, 1);

				Vector3 result;
				Vector3.Reflect(ref incident, ref normal, out result);

				AssertEqualWithinReason(result, Vector3.Zero);
			}
		}


		/// <summary>
		/// Assert that, for a number of randomly generated examples, the 
		/// Reflect method yeilds the same results as those obtained from
		/// performing a manual calculation.
		/// </summary>
		[Test]
		public void TestStaticFn_Reflect_ii ()
		{
			<#= type #> epsilon; RealMaths.Epsilon(out epsilon);

			for( Int32 i = 0; i < 100; ++ i)
			{
				Vector3 a = GetNextRandomVector3();

				Vector3 b = GetNextRandomVector3();

				Vector3.Normalise(ref b, out b);

				Vector3 result;
				Vector3.Reflect(ref a, ref b, out result);
				
				<#= type #> dot;
				Vector3.Dot(ref a, ref b, out dot);

				Vector3 expected = a - (2 * dot * b);

				AssertEqualWithinReason(result, expected);
			}
		}

		/// <summary>
		/// Assert that an argument exception is thrown if the value passed in
		/// to the normal parameter is not normalised.
		/// </summary>
		[Test]
		public void TestStaticFn_Reflect_iii ()
		{
			Vector3 incident = GetNextRandomVector3();
			Vector3 normal = new Vector3(12, -241, 123);

			Vector3 result; 

			Assert.Throws(
				typeof(ArgumentOutOfRangeException), 
				() => 
				Vector3.Reflect(ref incident, ref normal, out result)
			);
		}

		// Test Static Fn: TransformMatrix44 //-------------------------------//

		/// <summary>
		/// 
		/// </summary>
		[Test]
		public void TestStaticFn_TransformMatix44_i ()
		{
			Assert.That (true, Is.EqualTo (false));
		}

		// Test Static Fn: TransformNormal //---------------------------------//

		/// <summary>
		/// 
		/// </summary>
		[Test]
		public void TestStaticFn_TransformNormal_i ()
		{
			Assert.That (true, Is.EqualTo (false));
		}

		// Test Static Fn: TransformQuaternion //-----------------------------//

		/// <summary>
		/// 
		/// </summary>
		[Test]
		public void TestStaticFn_TransformQuaternion_i ()
		{
			Assert.That (true, Is.EqualTo (false));
		}

