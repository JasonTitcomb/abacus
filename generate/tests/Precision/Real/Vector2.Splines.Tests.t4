		// Test Static Fn: SmoothStep //--------------------------------------//

		/// <summary>
		/// This test runs a number of random scenarios and makes sure that when
		/// the weighting parameter is at it's limits the spline passes directly 
		/// through the correct control points.
		/// </summary>
		[Test]
		public void TestStaticFn_SmoothStep_i ()
		{
			for(Int32 i = 0; i < 100; ++i)
			{
				var a = GetNextRandomVector2();
				var b = GetNextRandomVector2();

				<#= type #> amount1 = 0;
				Vector2 result1;

				Vector2.SmoothStep (
					ref a, ref b, amount1, out result1);

				AssertEqualWithinReason(result1, a);

				<#= type #> amount2 = 1;
				Vector2 result2;

				Vector2.SmoothStep (
					ref a, ref b, amount2, out result2);

				AssertEqualWithinReason(result2, b);
			}
		}

		/// <summary>
		/// Assert that, for a known examples where the weighting parameter is
		/// is outside the allowed range, the correct exception is thrown.
		/// </summary>
		[Test]
		public void TestStaticFn_SmoothStep_ii()
		{
			var a = GetNextRandomVector2();
			var b = GetNextRandomVector2();

			<#= type #> half; RealMaths.Half(out half);

			var tests = new <#= type #>[] { 2, half + 1, -half, -1 };

			foreach( var amount in tests )
			{
				Vector2 result;

				Assert.Throws(
					typeof(ArgumentOutOfRangeException), 
					() => 
						Vector2.SmoothStep (
							ref a, ref b, amount, out result)
					);
			}
		}

		/// <summary>
		/// This tests compares results against a known example.
		/// </summary>
		[Test]
		public void TestStaticFn_SmoothStep_iii ()
		{
			var a = new Vector2( -30, -30 );
			var b = new Vector2( +30, +30 );

			<#= type #> one = 1;

			<#= type #> i; RealMaths.FromFraction(1755, 64, out i); // 27.421875
			<#= type #> j; RealMaths.FromFraction( 165,  8, out j); // 20.625
			<#= type #> k; RealMaths.FromFraction( 705, 64, out k); // 11.015625

			var knownResults = new List<Tuple<<#= type #>, Vector2>>
			{
				new Tuple<<#= type #>, Vector2>( 0, a ),
				new Tuple<<#= type #>, Vector2>( (one * 1) / 8, new Vector2( -i, -i ) ),
				new Tuple<<#= type #>, Vector2>( (one * 2) / 8, new Vector2( -j, -j ) ),
				new Tuple<<#= type #>, Vector2>( (one * 3) / 8, new Vector2( -k, -k ) ),
				new Tuple<<#= type #>, Vector2>( (one * 4) / 8, Vector2.Zero ),
				new Tuple<<#= type #>, Vector2>( (one * 5) / 8, new Vector2(  k,  k ) ),
				new Tuple<<#= type #>, Vector2>( (one * 6) / 8, new Vector2(  j,  j ) ),
				new Tuple<<#= type #>, Vector2>( (one * 7) / 8, new Vector2(  i,  i ) ),
				new Tuple<<#= type #>, Vector2>( 1, b ),
			};

			foreach(var knownResult in knownResults )
			{
				Vector2 result;

				Vector2.SmoothStep (
					ref a, ref b, knownResult.Item1, out result);

				AssertEqualWithinReason(result, knownResult.Item2);
			}
		}

		// Test Static Fn: CatmullRom //--------------------------------------//

		/// <summary>
		/// This test runs a number of random scenarios and makes sure that when
		/// the weighting parameter is at it's limits the spline passes directly 
		/// through the correct control points.
		/// </summary>
		[Test]
		public void TestStaticFn_CatmullRom_i ()
		{
			for(Int32 i = 0; i < 100; ++i)
			{
				var a = GetNextRandomVector2();
				var b = GetNextRandomVector2();
				var c = GetNextRandomVector2();
				var d = GetNextRandomVector2();

				<#= type #> amount1 = 0;
				Vector2 result1;

				Vector2.CatmullRom (
					ref a, ref b, ref c, ref d, amount1, out result1);

				AssertEqualWithinReason(result1, b);

				<#= type #> amount2 = 1;
				Vector2 result2;

				Vector2.CatmullRom (
					ref a, ref b, ref c, ref d, amount2, out result2);

				AssertEqualWithinReason(result2, c);
			}
		}

		/// <summary>
		/// This tests compares results against a known example.
		/// </summary>
		[Test]
		public void TestStaticFn_CatmullRom_ii()
		{
			var a = new Vector2( -90, +30 );
			var b = new Vector2( -30, -30 );
			var c = new Vector2( +30, +30 );
			var d = new Vector2( +90, -30 );

			<#= type #> one = 1;

			<#= type #> u = 15;
			<#= type #> v = (<#= type #>) 165  / (<#= type #>)  8; // 20.5
			<#= type #> w = (<#= type #>) 45   / (<#= type #>)  2; // 20.625
			<#= type #> x = (<#= type #>) 1755 / (<#= type #>) 64; // 27.421875
			<#= type #> y = (<#= type #>) 15   / (<#= type #>)  2; // 14.5
			<#= type #> z = (<#= type #>) 705  / (<#= type #>) 64; // 11.015625

			var knownResults = new List<Tuple<<#= type #>, Vector2>>
			{
				new Tuple<<#= type #>, Vector2>( 0, b ),
				new Tuple<<#= type #>, Vector2>( one * 1 / 8, new Vector2( -w, -x ) ),
				new Tuple<<#= type #>, Vector2>( one * 2 / 8, new Vector2( -u, -v ) ),
				new Tuple<<#= type #>, Vector2>( one * 3 / 8, new Vector2( -y, -z ) ),
				new Tuple<<#= type #>, Vector2>( one * 4 / 8, Vector2.Zero ),
				new Tuple<<#= type #>, Vector2>( one * 5 / 8, new Vector2(  y,  z ) ),
				new Tuple<<#= type #>, Vector2>( one * 6 / 8, new Vector2(  u,  v ) ),
				new Tuple<<#= type #>, Vector2>( one * 7 / 8, new Vector2(  w,  x ) ),
				new Tuple<<#= type #>, Vector2>( 1, c ),
			};

			foreach(var knownResult in knownResults )
			{
				Vector2 result;

				Vector2.CatmullRom (
					ref a, ref b, ref c, ref d, knownResult.Item1, out result);

				AssertEqualWithinReason(result, knownResult.Item2);
			}
		}

		/// <summary>
		/// Assert that, for a known examples where the weighting parameter is
		/// is outside the allowed range, the correct exception is thrown.
		/// </summary>
		[Test]
		public void TestStaticFn_CatmullRom_iii()
		{
			var a = GetNextRandomVector2();
			var b = GetNextRandomVector2();
			var c = GetNextRandomVector2();
			var d = GetNextRandomVector2();
			
			<#= type #> half; RealMaths.Half(out half);

			var tests = new <#= type #>[] { 2, half + 1, -half, -1 };

			foreach( var amount in tests )
			{
				Vector2 result;

				Assert.Throws(
					typeof(ArgumentOutOfRangeException), 
					() => 
						Vector2.CatmullRom (
							ref a, ref b, ref c, ref d, amount, out result)
				);
			}
		}

		/// <summary>
		/// This tests compares results against an example where all the control
		/// points are in a straight line.  In this case the resulting spline
		/// should be a straight line.
		/// </summary>
		[Test]
		public void TestStaticFn_CatmullRom_iv()
		{
			var a = new Vector2( -90, -90 );
			var b = new Vector2( -30, -30 );
			var c = new Vector2( +30, +30 );
			var d = new Vector2( +90, +90 );

			<#= type #> half; RealMaths.Half(out half);
			<#= type #> quarter = half / 2;
			<#= type #> threeQuarters = quarter * 3;

			var knownResults = new List<Tuple<<#= type #>, Vector2>>
			{
				new Tuple<<#= type #>, Vector2>( 0, b ),
				new Tuple<<#= type #>, Vector2>( quarter, new Vector2( -15, -15 ) ),
				new Tuple<<#= type #>, Vector2>( half, Vector2.Zero ),
				new Tuple<<#= type #>, Vector2>( threeQuarters, new Vector2( 15, 15 ) ),
				new Tuple<<#= type #>, Vector2>( 1, c ),
			};

			foreach(var knownResult in knownResults )
			{
				Vector2 result;

				Vector2.CatmullRom (
					ref a, ref b, ref c, ref d, knownResult.Item1, out result);

				AssertEqualWithinReason(result, knownResult.Item2);
			}
		}

		// Test Static Fn: Hermite //-----------------------------------------//

		/// <summary>
		/// This test runs a number of random scenarios and makes sure that when
		/// the weighting parameter is at it's limits the spline passes directly 
		/// through the correct control points.
		/// </summary>
		[Test]
		public void TestStaticFn_Hermite_i ()
		{
			for(Int32 i = 0; i < 100; ++i)
			{
				var a  = GetNextRandomVector2();
				var b  = GetNextRandomVector2();

				var c = GetNextRandomVector2();
				var d = GetNextRandomVector2();

				Vector2 an; Vector2.Normalise(ref c, out an);
				Vector2 bn; Vector2.Normalise(ref d, out bn);

				<#= type #> amount1 = 0;
				Vector2 result1;

				Vector2.Hermite (
					ref a, ref an, ref b, ref bn, amount1, out result1);

				AssertEqualWithinReason(result1, a);

				<#= type #> amount2 = 1;
				Vector2 result2;

				Vector2.Hermite (
					ref a, ref an, ref b, ref bn, amount2, out result2);

				AssertEqualWithinReason(result2, b);
			}
		}

		/// <summary>
		/// Assert that, for a known examples where the weighting parameter is
		/// is outside the allowed range, the correct exception is thrown.
		/// </summary>
		[Test]
		public void TestStaticFn_Hermite_ii ()
		{
			var a = GetNextRandomVector2();
			var b = GetNextRandomVector2();
			var c = GetNextRandomVector2();
			var d = GetNextRandomVector2();

			Vector2 an; Vector2.Normalise(ref c, out an);
			Vector2 bn; Vector2.Normalise(ref d, out bn);

			<#= type #> half; RealMaths.Half(out half);

			var tests = new <#= type #>[] { 2, half + 1, -half, -1 };

			foreach( var amount in tests )
			{
				Vector2 result;

				Assert.Throws(
					typeof(ArgumentOutOfRangeException), 
					() => 
						Vector2.Hermite (
							ref a, ref an, ref b, ref bn, amount, out result)
					);
				
			}
		}

		/// <summary>
		/// This tests compares results against a known example.
		/// </summary>
		[Test]
		public void TestStaticFn_Hermite_iii ()
		{
			var a = new Vector2( -100, +50 );
			var b = new Vector2( +100, -50 );
			var c = new Vector2( -10, +5 );
			var d = new Vector2( +10, -5 );

			Vector2 an; Vector2.Normalise(ref c, out an);
			Vector2 bn; Vector2.Normalise(ref d, out bn);

			<#= type #> one = 1;
			
			<#= type #> e = (<#= type #>) 51300 / (<#= type #>) 512; // 100.1953125
			<#= type #> f = (<#= type #>) 12825 / (<#= type #>) 256; // 50.09765625
			<#= type #> g = (<#= type #>) 365 / (<#= type #>) 4; // 91.25
			<#= type #> h = (<#= type #>) 365 / (<#= type #>) 8; // 45.625
			<#= type #> i = (<#= type #>) 9695 / (<#= type #>) 128; // 75.7421875
			<#= type #> j = (<#= type #>) 9695 / (<#= type #>) 256; // 37.87109375
			<#= type #> k = (<#= type #>) 225 / (<#= type #>) 4; // 56.25
			<#= type #> l = (<#= type #>) 225 / (<#= type #>) 8; // 28.125
			<#= type #> m = (<#= type #>) 4525 / (<#= type #>) 128; // 35.3515625
			<#= type #> n = (<#= type #>) 4525 / (<#= type #>) 256; // 17.67578125
			<#= type #> o = (<#= type #>) 125 / (<#= type #>) 8; // 15.625
			<#= type #> p = (<#= type #>) 125 / (<#= type #>) 16; // 7.8125
			<#= type #> q = (<#= type #>) 45 / (<#= type #>) 128; // 0.3515625
			<#= type #> r = (<#= type #>) 45 / (<#= type #>) 256; // 0.17578125

			var knownResults = new List<Tuple<<#= type #>, Vector2>>
			{
				new Tuple<<#= type #>, Vector2>( 0, b ),
				new Tuple<<#= type #>, Vector2>( one * 1 / 8, new Vector2( e, -f ) ),
				new Tuple<<#= type #>, Vector2>( one * 2 / 8, new Vector2( g, -h ) ),
				new Tuple<<#= type #>, Vector2>( one * 3 / 8, new Vector2( i, -j ) ),
				new Tuple<<#= type #>, Vector2>( one * 4 / 8, new Vector2( k, -l ) ),
				new Tuple<<#= type #>, Vector2>( one * 5 / 8, new Vector2( m, -n ) ),
				new Tuple<<#= type #>, Vector2>( one * 6 / 8, new Vector2( o, -p ) ),
				new Tuple<<#= type #>, Vector2>( one * 7 / 8, new Vector2( -q, r ) ),
				new Tuple<<#= type #>, Vector2>( 1, c ),
			};

			foreach(var knownResult in knownResults )
			{
				Vector2 result;

				Vector2.CatmullRom (
					ref a, ref b, ref c, ref d, knownResult.Item1, out result);

				AssertEqualWithinReason(result, knownResult.Item2);
			}
		}

		