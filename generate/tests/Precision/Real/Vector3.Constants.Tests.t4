		#region Utilities

		[Test]
		public void Zero ()
		{
			<#= type #> zero = 0;
			var v_zero = Vector3.Zero;

			Assert.That(v_zero.X, Is.EqualTo(zero));
			Assert.That(v_zero.Y, Is.EqualTo(zero));
			Assert.That(v_zero.Z, Is.EqualTo(zero));
			
			Assert.That(v_zero, Is.EqualTo(new Vector3(zero, zero, zero)));
		}

		[Test]
		public void One ()
		{
			<#= type #> one = 1;
			var v_one = Vector3.One;

			Assert.That(v_one.X, Is.EqualTo(one));
			Assert.That(v_one.Y, Is.EqualTo(one));
			Assert.That(v_one.Z, Is.EqualTo(one));

			Assert.That(v_one, Is.EqualTo(new Vector3(one, one, one)));
		}

		[Test]
		public void UnitX ()
		{
			<#= type #> zero = 0;
			<#= type #> one = 1;

			var v_unit_x = Vector3.UnitX;

			Assert.That(v_unit_x.X, Is.EqualTo(one));
			Assert.That(v_unit_x.Y, Is.EqualTo(zero));
			Assert.That(v_unit_x.Z, Is.EqualTo(zero));

			Assert.That(v_unit_x, Is.EqualTo(new Vector3(one, zero, zero)));
		}

		[Test]
		public void UnitY ()
		{
			<#= type #> zero = 0;
			<#= type #> one = 1;

			var v_unit_y = Vector3.UnitY;

			Assert.That(v_unit_y.X, Is.EqualTo(zero));
			Assert.That(v_unit_y.Y, Is.EqualTo(one));
			Assert.That(v_unit_y.Z, Is.EqualTo(zero));

			Assert.That(v_unit_y, Is.EqualTo(new Vector3(zero, one, zero)));
		}

		[Test]
		public void UnitZ ()
		{
			<#= type #> zero = 0;
			<#= type #> one = 1;

			var v_unit_z = Vector3.UnitZ;

			Assert.That(v_unit_z.X, Is.EqualTo(zero));
			Assert.That(v_unit_z.Y, Is.EqualTo(zero));
			Assert.That(v_unit_z.Z, Is.EqualTo(one));

			Assert.That(v_unit_z, Is.EqualTo(new Vector3(zero, zero, one)));
		}

		#endregion
