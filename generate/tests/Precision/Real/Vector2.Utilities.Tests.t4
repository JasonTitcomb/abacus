		#region Utilities

		[Test]
		public void TestStaticFn_Min ()
		{
			for(Int32 i = 0; i < 100; ++i)
			{
				Vector2 a = GetNextRandomVector2();
				Vector2 b = a * 2;

				Vector2 result; Vector2.Min (ref a, ref b, out result);

				Assert.That(result.X, Is.EqualTo(a.X < b.X ? a.X : b.X ));
				Assert.That(result.Y, Is.EqualTo(a.Y < b.Y ? a.Y : b.Y ));
			}
		}

		[Test]
		public void TestStaticFn_Max ()
		{
			for(Int32 i = 0; i < 100; ++i)
			{
				Vector2 a = GetNextRandomVector2();
				Vector2 b = GetNextRandomVector2();

				Vector2 result; Vector2.Max (ref a, ref b, out result);

				Assert.That(result.X, Is.EqualTo(a.X > b.X ? a.X : b.X ));
				Assert.That(result.Y, Is.EqualTo(a.Y > b.Y ? a.Y : b.Y ));
			}
		}

		[Test]
		public void TestStaticFn_Clamp_i ()
		{
			Vector2 min = new Vector2(-30, 1);
			Vector2 max = new Vector2(32, 130);

			for(Int32 i = 0; i < 100; ++i)
			{
				Vector2 a = GetNextRandomVector2();

				Vector2 result; Vector2.Clamp (ref a, ref min, ref max, out result);

				Assert.That(result.X, Is.LessThanOrEqualTo(max.X));
				Assert.That(result.Y, Is.LessThanOrEqualTo(max.Y));
				Assert.That(result.X, Is.GreaterThanOrEqualTo(min.X));
				Assert.That(result.Y, Is.GreaterThanOrEqualTo(min.Y));
			}
		}

		[Test]
		public void TestStaticFn_Clamp_ii ()
		{
			Vector2 min = new Vector2(-30, 1);
			Vector2 max = new Vector2(32, 130);

			for(Int32 i = 0; i < 100; ++i)
			{
				Vector2 a = new Vector2(-1, 13);

				Vector2 expected = a;

				Vector2 result; Vector2.Clamp (ref a, ref min, ref max, out result);

				Assert.That(result.X, Is.LessThanOrEqualTo(max.X));
				Assert.That(result.Y, Is.LessThanOrEqualTo(max.Y));
				Assert.That(result.X, Is.GreaterThanOrEqualTo(min.X));
				Assert.That(result.Y, Is.GreaterThanOrEqualTo(min.Y));

				Assert.That(a, Is.EqualTo(expected));
			}
		}

		[Test]
		public void TestStaticFn_Lerp_i ()
		{
			<#= type #> epsilon; RealMaths.Epsilon(out epsilon);

			for(Int32 j = 0; j < 100; ++j)
			{
				<#= type #> delta = j;

				delta = delta / 100;

				for(Int32 i = 0; i < 100; ++i)
				{
					Vector2 a = GetNextRandomVector2();
					Vector2 b = GetNextRandomVector2();

					Vector2 result; Vector2.Lerp (ref a, ref b, delta, out result);

					Vector2 expected = a + ( ( b - a ) * delta );

					Assert.That(result, Is.EqualTo(expected).Within(epsilon));
				}
			}
		}

		[Test, ExpectedException(typeof(ArgumentOutOfRangeException))]
		public void TestStaticFn_Lerp_ii()
		{
			<#= type #> delta = 2;
			Vector2 a = GetNextRandomVector2();
			Vector2 b = GetNextRandomVector2();
			Vector2 result; Vector2.Lerp (ref a, ref b, delta, out result);
		}

		[Test, ExpectedException(typeof(ArgumentOutOfRangeException))]
		public void TestStaticFn_Lerp_iii()
		{
			<#= type #> delta = -1;
			Vector2 a = GetNextRandomVector2();
			Vector2 b = GetNextRandomVector2();
			Vector2 result; Vector2.Lerp (ref a, ref b, delta, out result);
		}

		[Test, ExpectedException(typeof(ArgumentOutOfRangeException))]
		public void TestStaticFn_Lerp_iv()
		{
			<#= type #> delta; RealMaths.Half(out delta);

			delta = -delta;

			Vector2 a = GetNextRandomVector2();
			Vector2 b = GetNextRandomVector2();
			Vector2 result; Vector2.Lerp (ref a, ref b, delta, out result);
		}


		#endregion
