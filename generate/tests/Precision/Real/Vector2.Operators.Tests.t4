		#region Operators

		void TestEquality(Vector2 a, Vector2 b, Boolean expected )
		{
			// This test asserts the following:
			//   (a == b) == expected
			//   (b == a) == expected
			//   (a != b) == !expected
			//   (b != a) == !expected

			Boolean result_1a = (a == b);
			Boolean result_1b = (a.Equals(b));
			Boolean result_1c = (a.Equals((Object)b));
			
			Boolean result_2a = (b == a);
			Boolean result_2b = (b.Equals(a));
			Boolean result_2c = (b.Equals((Object)a));

			Boolean result_3a = (a != b);
			Boolean result_4a = (b != a);
			
			Assert.That(result_1a, Is.EqualTo(expected));
			Assert.That(result_1b, Is.EqualTo(expected));
			Assert.That(result_1c, Is.EqualTo(expected));
			Assert.That(result_2a, Is.EqualTo(expected));
			Assert.That(result_2b, Is.EqualTo(expected));
			Assert.That(result_2c, Is.EqualTo(expected));
			Assert.That(result_3a, Is.EqualTo(!expected));
			Assert.That(result_4a, Is.EqualTo(!expected));
		}

		[Test]
		public void TestOperator_Equality_i ()
		{
			var a = new Vector2(44, -54);
			var b = new Vector2(44, -54);

			Boolean expected = true;

			this.TestEquality(a, b, expected);
		}


		[Test]
		public void TestOperator_Equality_ii ()
		{
			var a = new Vector2(44, 54);
			var b = new Vector2(44, -54);

			Boolean expected = false;

			this.TestEquality(a, b, expected);
		}


		void TestAddition(Vector2 a, Vector2 b, Vector2 expected )
		{
			// This test asserts the following:
			//   a + b == expected
			//   b + a == expected

			var result_1a = a + b;
			var result_2a = b + a;

			Vector2 result_1b; Vector2.Add(ref a, ref b, out result_1b);
			Vector2 result_2b; Vector2.Add(ref b, ref a, out result_2b);
			
			Assert.That(result_1a, Is.EqualTo(expected));
			Assert.That(result_2a, Is.EqualTo(expected));
			Assert.That(result_1b, Is.EqualTo(expected));
			Assert.That(result_2b, Is.EqualTo(expected));
		}

		[Test] // Assert that, for a known example, simple vector addition yields the correct result.
		public void TestOperator_Addition_i ()
		{
			var a = new Vector2(3, -6);
			var b = new Vector2(-6, 12);

			var expected = new Vector2(-3, 6);

			this.TestAddition(a, b, expected);
		}

		[Test] // Assert that, for a known example, vector addition work correctly when one zero vector is involved.
		public void TestOperator_Addition_ii ()
		{
			var a = new Vector2(-2313, 88);

			var expected = a;

			this.TestAddition(a, Vector2.Zero, expected);
		}

		[Test] // Assert that two zero vectors correctly add to yield zero.
		public void TestOperator_Addition_iii ()
		{
			this.TestAddition(Vector2.Zero, Vector2.Zero, Vector2.Zero);
		}

		void TestSubtraction(Vector2 a, Vector2 b, Vector2 expected )
		{
			// This test asserts the following:
			//   a - b == expected
			//   b - a == -expected

			var result_1a = a - b;
			var result_2a = b - a;

			Vector2 result_1b; Vector2.Subtract(ref a, ref b, out result_1b);
			Vector2 result_2b; Vector2.Subtract(ref b, ref a, out result_2b);
			
			Assert.That(result_1a, Is.EqualTo(expected));
			Assert.That(result_2a, Is.EqualTo(-expected));
			Assert.That(result_1b, Is.EqualTo(expected));
			Assert.That(result_2b, Is.EqualTo(-expected));
		}

		[Test] // Assert that, for a known example, simple vector subtraction yields the correct result.
		public void TestOperator_Subtraction_i ()
		{
			var a = new Vector2(12, -4);
			var b = new Vector2(15, 11);

			var expected = new Vector2(-3, -15);

			this.TestSubtraction(a, b, expected);
		}

		[Test] // Assert that, for a known example, vector subtraction work correctly when one zero vector is involved.
		public void TestOperator_Subtraction_ii ()
		{
			var a = new Vector2(-423, 342);

			var expected = a;

			this.TestAddition(a, Vector2.Zero, expected);
		}

		[Test] // Assert that two zero vectors correctly subtract to yield zero.
		public void TestOperator_Subtraction_iii ()
		{
			this.TestAddition(Vector2.Zero, Vector2.Zero, Vector2.Zero);
		}





















		[Test]
		public void TestOperator_Negation ()
		{
			<#= type #> r = 3432;
			<#= type #> s = -6218;
			<#= type #> t = -3432;
			<#= type #> u = 6218;

			var zero = Vector2.Zero;
			var a = new Vector2(r, s);
			var b = new Vector2(u, t);
			var c = new Vector2(t, u);
			var d = new Vector2(s, r);

			// Test negation with the  -X operator
			Vector2 test1_op = -a;
			Vector2 test2_op = -b;
			Vector2 test3_op = -c;
			Vector2 test4_op = -d;
			Vector2 test5_op = -zero;

			Assert.That(test1_op, Is.EqualTo(c));
			Assert.That(test2_op, Is.EqualTo(d));
			Assert.That(test3_op, Is.EqualTo(zero - c));
			Assert.That(test4_op, Is.EqualTo(zero - d));
			Assert.That(test5_op, Is.EqualTo(zero));

			// Test negation with the Negate member function
			Vector2 test1_st; Vector2.Negate(ref a, out test1_st);
			Vector2 test2_st; Vector2.Negate(ref b, out test2_st);
			Vector2 test3_st; Vector2.Negate(ref c, out test3_st);
			Vector2 test4_st; Vector2.Negate(ref d, out test4_st);
			Vector2 test5_st; Vector2.Negate(ref zero, out test5_st);

			Assert.That(test1_st, Is.EqualTo(c));
			Assert.That(test2_st, Is.EqualTo(d));
			Assert.That(test3_st, Is.EqualTo(zero - c));
			Assert.That(test4_st, Is.EqualTo(zero - d));
			Assert.That(test5_st, Is.EqualTo(zero));
		}

		[Test]
		public void TestOperator_Multiplication ()
		{
			<#= type #> r = 18;
			<#= type #> s = -54;

			<#= type #> x = 3;
			<#= type #> y = 6;
			<#= type #> z = -9;

			var a = new Vector2(x, y);
			var b = new Vector2(y, z);

			var c = new Vector2(r, s);

			// Test multiplication with the (*) operator
			var test1_op = a * b;
			var test2_op = b * a;

			Assert.That(test1_op, Is.EqualTo(c));
			Assert.That(test2_op, Is.EqualTo(c));

			// Test multiplication with static Multiply function
			Vector2 test1_st; Vector2.Multiply(ref a, ref b, out test1_st);
			Vector2 test2_st; Vector2.Multiply(ref b, ref a, out test2_st);

			Assert.That(test1_st, Is.EqualTo(c));
			Assert.That(test2_st, Is.EqualTo(c));
		}

		[Test]
		public void TestOperator_Division ()
		{
			<#= type #> r = 10;
			<#= type #> s = -40;
			<#= type #> t = ((<#= type #>) 1 ) / ((<#= type #>) 10);
			<#= type #> u = ((<#= type #>) (-1) ) / ((<#= type #>) 40 );

			<#= type #> x = 2000;
			<#= type #> y = 200;
			<#= type #> z = -5;

			var a = new Vector2(x, y);
			var b = new Vector2(y, z);

			var c = new Vector2(r, s);
			var d = new Vector2(t, u);

			// Test multiplication with the (*) operator
			var test1_op = a / b;
			var test2_op = b / a;

			Assert.That(test1_op, Is.EqualTo(c));
			Assert.That(test2_op, Is.EqualTo(d));

			// Test multiplication with static Multiply function
			Vector2 test1_st; Vector2.Divide(ref a, ref b, out test1_st);
			Vector2 test2_st; Vector2.Divide(ref b, ref a, out test2_st);

			Assert.That(test1_st, Is.EqualTo(c));
			Assert.That(test2_st, Is.EqualTo(d));
		}

		#endregion
