	[TestFixture]
	public class Vector2Tests
	{
		[Test]
		public void Test_Constructors ()
		{
			// Test default values
			Vector2 a = new Vector2();
			Assert.That(a, Is.EqualTo(Vector2.Zero));

			// Test Vector2( n ) where n is <#= type #>
			<#= type #> u = -189;
			<#= type #> v = 429;
			Vector2 b1 = new Vector2(u);
			Assert.That(b1.X, Is.EqualTo(u));
			Assert.That(b1.Y, Is.EqualTo(u));
			Vector2 b2 = new Vector2(v);
			Assert.That(b2.X, Is.EqualTo(v));
			Assert.That(b2.Y, Is.EqualTo(v));

			// Test Vector2( x, y ) where x, y are <#= type #>
			Vector2 c = new Vector2(u, v);
			Assert.That(c.X, Is.EqualTo(u));
			Assert.That(c.Y, Is.EqualTo(v));

			// Test Vector2( x, y ) where x, y are Int32
			Int32 q = 12334;
			Int32 r = -2145;
			<#= type #> s = q;
			<#= type #> t = r;
			Vector2 d = new Vector2(q, r);
			Assert.That(d.X, Is.EqualTo(s));
			Assert.That(d.Y, Is.EqualTo(t));
		}

		[Test]
		public void TestMemberFn_ToString ()
		{
			Vector2 a = new Vector2(42, -17);

			String result = a.ToString();

			String expected = "{X:42 Y:-17}";

			Assert.That(result, Is.EqualTo(expected));
		}

		[Test]
		public void TestMemberFn_GetHashCode ()
		{
			var hs1 = new System.Collections.Generic.HashSet<Vector2>();
			var hs2 = new System.Collections.Generic.HashSet<Int32>();

			for(Int32 i = 0; i < 10000; ++i)
			{
				var a = GetNextRandomVector2();

				hs1.Add(a);
				hs2.Add(a.GetHashCode());
			}

			Assert.That(hs1.Count, Is.EqualTo(hs2.Count).Within(10));
		}

		[Test]
		public void TestMemberFn_Set ()
		{
			Vector2 a = Vector2.Zero;

			a.Set(14, -19);

			Vector2 expected = new Vector2(14, -19);

			Assert.That(a, Is.EqualTo(expected));
		}

		[Test]
		public void TestMemberFn_Length ()
		{
			Vector2 a = new Vector2(30, -40);

			<#= type #> expected = 50;

			<#= type #> result = a.Length();

			Assert.That(result, Is.EqualTo(expected));
		}

		[Test]
		public void TestMemberFn_LengthSquared ()
		{
			Vector2 a = new Vector2(30, -40);

			<#= type #> expected = 2500;

			<#= type #> result = a.LengthSquared();

			Assert.That(result, Is.EqualTo(expected));
		}

		[Test]
		public void TestMemberFn_IsUnit_i ()
		{
			Assert.That(new Vector2(1, 0).IsUnit(), Is.EqualTo(true));
			Assert.That(new Vector2(-1, 0).IsUnit(), Is.EqualTo(true));
			Assert.That(new Vector2(1, 1).IsUnit(), Is.EqualTo(false));
			Assert.That(new Vector2(0, 0).IsUnit(), Is.EqualTo(false));
			Assert.That(new Vector2(0, -1).IsUnit(), Is.EqualTo(true));
			Assert.That(new Vector2(0, 1).IsUnit(), Is.EqualTo(true));
		}

		[Test]
		public void TestMemberFn_IsUnit_ii ()
		{
			for( Int32 i = 0; i < 100; ++ i)
			{
				Vector2 a = GetNextRandomVector2();

				Vector2 b; Vector2.Normalise(ref a, out b);

				Assert.That(b.IsUnit(), Is.EqualTo(true));
			}
		}

		[Test]
		public void TestMemberFn_IsUnit_iii ()
		{
			<#= type #> piOver2; RealMaths.PiOver2(out piOver2);

			for( Int32 i = 0; i <= 90; ++ i)
			{
				<#= type #> theta = piOver2 / 90 * i;

				<#= type #> opposite = RealMaths.Sin(theta);
				<#= type #> adjacent = RealMaths.Cos(theta);				

				Assert.That(new Vector2( opposite,  adjacent).IsUnit(), Is.EqualTo(true));
				Assert.That(new Vector2( opposite, -adjacent).IsUnit(), Is.EqualTo(true));
				Assert.That(new Vector2(-opposite,  adjacent).IsUnit(), Is.EqualTo(true));
				Assert.That(new Vector2(-opposite, -adjacent).IsUnit(), Is.EqualTo(true));
			}
		}

<#@ include file="Vector2.TestHelpers.t4"#>

<#@ include file="Vector2.Constants.Tests.t4"#>
<#@ include file="Vector2.Maths.Tests.t4"#>
<#@ include file="Vector2.Operators.Tests.t4"#>
<#@ include file="Vector2.Splines.Tests.t4"#>
<#@ include file="Vector2.Utilities.Tests.t4"#>

	}