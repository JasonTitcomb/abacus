	[TestFixture]
	public class Vector2Tests
	{
		[Test]
		public void Test_Constructors ()
		{
			// Test default values
			Vector2 a = new Vector2();
			Assert.That(a, Is.EqualTo(Vector2.Zero));

			// Test Vector2( n ) where n is <#= type #>
			<#= type #> u = -189;
			<#= type #> v = 429;
			Vector2 b1 = new Vector2(u);
			Assert.That(b1.X, Is.EqualTo(u));
			Assert.That(b1.Y, Is.EqualTo(u));
			Vector2 b2 = new Vector2(v);
			Assert.That(b2.X, Is.EqualTo(v));
			Assert.That(b2.Y, Is.EqualTo(v));

			// Test Vector2( x, y ) where x, y are <#= type #>
			Vector2 c = new Vector2(u, v);
			Assert.That(c.X, Is.EqualTo(u));
			Assert.That(c.Y, Is.EqualTo(v));

			// Test Vector2( x, y ) where x, y are Int32
			Int32 q = 12334;
			Int32 r = -2145;
			<#= type #> s = q;
			<#= type #> t = r;
			Vector2 d = new Vector2(q, r);
			Assert.That(d.X, Is.EqualTo(s));
			Assert.That(d.Y, Is.EqualTo(t));
		}

		[Test]
		public void TestMemberFn_ToString ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestMemberFn_GetHashCode ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestMemberFn_Set ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestMemberFn_Length ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestMemberFn_LengthSquared ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestMemberFn_NormaliseMemberFunction ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

		[Test]
		public void TestMemberFn_IsUnit ()
		{
			Assert.That(true, Is.EqualTo(false));
		}

<#@ include file="Vector2.Constants.Tests.t4"#>
<#@ include file="Vector2.Maths.Tests.t4"#>
<#@ include file="Vector2.Operators.Tests.t4"#>
<#@ include file="Vector2.Splines.Tests.t4"#>
<#@ include file="Vector2.Utilities.Tests.t4"#>

	}