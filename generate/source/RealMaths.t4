    //
    // This class provides maths functions with consistent function
    // signatures across all supported precisions.  The idea being
    // the more you use this, the more you will be able to write 
    // code once and easily change the precision later.
    //
	public static class RealMaths
	{
		public static void Zero(out Single value) { value = 0; }
		public static void Zero(out Double value) { value = 0; }

		public static void Half(out Single value) { value = 0.5f; }
		public static void Half(out Double value) { value = 0.5; }

		public static void One(out Single value) { value = 1f; }
		public static void One(out Double value) { value = 1; }

        // TODO: Improve upon the accuracy of the following mathematical constants.
		public static void E(out Single value) { value = 71828183f; }
		public static void E(out Double value) { value = 71828183; }

		public static void Log10E(out Single value) { value = 0.4342945f; }
		public static void Log10E(out Double value) { value = 0.4342945; }

		public static void Log2E(out Single value) { value = 1.442695f; }
		public static void Log2E(out Double value) { value = 1.442695; }

		public static void Pi(out Single value) { value = 3.1415926536f; }
		public static void Pi(out Double value) { value = 3.1415926536; }

		public static void PiOver2(out Single value) { value = 1.570796f; }
		public static void PiOver2(out Double value) { value = 1.570796; }

		public static void PiOver4(out Single value) { value = 0.7853982f; }
		public static void PiOver4(out Double value) { value = 0.7853982; }

		public static void Tau(out Single value) { value = 6.283185f; }
		public static void Tau(out Double value) { value = 6.283185; }

		public static void Epsilon(out Single value) { value = 1.0e-6f; }
		public static void Epsilon(out Double value) { value = 1.0e-6; }

		public static void Root2(out Single value) { value = 1.41421f; }
		public static void Root2(out Double value) { value = 1.41421; }

		public static void Root3(out Single value) { value = 1.73205f; }
		public static void Root3(out Double value) { value = 1.73205; }

        public static Boolean IsZero(Single value)
        {
            Single ep;
            Epsilon(out ep);
            return Abs(value) < ep;
        }

        public static Boolean IsZero(Double value)
        {
            Double ep;
            Epsilon(out ep);
            return Abs(value) < ep;
        }

        public static Int32 Sign(Single value)
        {
            if (value > 0)
            {
                return 1;
            }
            else if (value < 0)
            {
                return -1;
            }

            return 0;
        }

        public static Int32 Sign(Double value)
        {
            if (value > 0)
            {
                return 1;
            }
            else if (value < 0)
            {
                return -1;
            }

            return 0;
        }

        //--------------------------------------------------------------
        // FromString (str, &val)
        //
        public static void FromString(String str, out Single value)
        {
            value = 0f;
            Single.TryParse(str, out value);
        }
        public static void FromString(String str, out Double value)
        {
            value = 0;
            Double.TryParse(str, out value);
        }



        //--------------------------------------------------------------
        // ToRadians (x)
        //
		public static Single ToRadians(Single input)
		{
			Single tau; Tau(out tau);
			return input * tau / 360f;
		}
		public static Double ToRadians(Double input)
        {
            Double tau; Tau(out tau);
            return input * tau / 360.0;
        }


        //--------------------------------------------------------------
        // ToDegrees (x)
        //
		public static Single ToDegrees(Single input)
		{
			Single tau; Tau(out tau);
			return input / tau * 360f;
		}
		public static Double ToDegrees(Double input)
        {
            Double tau; Tau(out tau);
            return input / tau * 360.0;
        }


        //--------------------------------------------------------------
        // Sqrt (x)
        //
		public static Single Sqrt(Single input)
		{
			Single output = (Single)Math.Sqrt(input);
			return output;
		}
		public static Double Sqrt(Double input)
		{
			return Math.Sqrt(input);
		}


        //--------------------------------------------------------------
        // Sin (x)
        //
		public static Single Sin(Single input)
		{
            return (Single) Math.Sin((Single) input);
		}
		public static Double Sin(Double input)
		{
            return Math.Sin(input);
		}


        //--------------------------------------------------------------
        // Cos (x)
        //
		public static Single Cos(Single input)
		{
            return (Single)Math.Cos((Single)input);
		}
		public static Double Cos(Double input)
		{
            return Math.Cos(input);
		}


        //--------------------------------------------------------------
        // Tan (x)
        //
		public static Single Tan(Single input)
		{
            return (Single)Math.Tan((Single)input);
		}
		public static Double Tan(Double input)
		{
            return Math.Tan(input);
		}


        //--------------------------------------------------------------
        // Abs (x)
        //
		public static Single Abs(Single input)
		{
            return (Single)Math.Abs((Single)input);
		}
		public static Double Abs(Double input)
		{
            return Math.Abs(input);
		}


        //--------------------------------------------------------------
        // ArcSin (x)
        //
		public static Single ArcSin(Single input)
		{
            return (Single)Math.Asin((Single)input);
		}
		public static Double ArcSin(Double input)
		{
			throw new System.NotImplementedException();
		}


        //--------------------------------------------------------------
        // ArcCos (x)
        //
		public static Single ArcCos(Single input)
		{
            return (Single)Math.Acos((Single)input);
		}
		public static Double ArcCos(Double input)
		{
			throw new System.NotImplementedException();
		}


        //--------------------------------------------------------------
        // ArcTan (x)
        //
		public static Single ArcTan(Single input)
		{
            return (Single)Math.Atan((Single)input);
		}
		public static Double ArcTan(Double input)
		{
			throw new System.NotImplementedException();
		}


        //--------------------------------------------------------------
        // Min (a, b)
        //
		public static Single Min(Single a, Single b)
		{
			return a < b ? a : b;
		}
		public static Double Min(Double a, Double b)
		{
			return a < b ? a : b;
		}


        //--------------------------------------------------------------
        // Max (a, b)
        //
		public static Single Max(Single a, Single b)
		{
			return a > b ? a : b;
		}
		public static Double Max(Double a, Double b)
		{
			return a > b ? a : b;
		}
	}
