	/// <summary>
	/// todo
	/// </summary>
	[StructLayout (LayoutKind.Sequential)]
	public struct Bgra16 
		: IPackedValue<UInt16>
		, IEquatable<Bgra16>
		, IPackedReal4
	{
		/// <summary>
		/// todo
		/// </summary>
		public override String ToString ()
		{
			return this.packedValue.ToString ("X4", CultureInfo.InvariantCulture);
		}

		/// <summary>
		/// todo
		/// </summary>
		static void Pack(ref SinglePrecision.Vector4 realRgba, out UInt16 packedBgra)
		{
			UInt32 r = PackUtils.PackUnsignedNormalisedValue (15f, realRgba.X) << 8;
			UInt32 g = PackUtils.PackUnsignedNormalisedValue (15f, realRgba.Y) << 4;
			UInt32 b = PackUtils.PackUnsignedNormalisedValue (15f, realRgba.Z);
			UInt32 a = PackUtils.PackUnsignedNormalisedValue (15f, realRgba.W) << 12;
			packedBgra = (UInt16)(((r | g) | b) | a);
		}

		/// <summary>
		/// todo
		/// </summary>
		static void Unpack(UInt16 packedBgra, out SinglePrecision.Vector4 realRgba)
		{
			realRgba.X = PackUtils.UnpackUnsignedNormalisedValue (15, (UInt32)(packedBgra >> 8));
			realRgba.Y = PackUtils.UnpackUnsignedNormalisedValue (15, (UInt32)(packedBgra >> 4));
			realRgba.Z = PackUtils.UnpackUnsignedNormalisedValue (15, packedBgra);
			realRgba.W = PackUtils.UnpackUnsignedNormalisedValue (15, (UInt32)(packedBgra >> 12));
		}

<#  GeneratePackedCommon("Bgra16", "UInt16", "packedBgra", "realRgba", 4); #>
	}
