		/// <summary>
		/// todo
		/// </summary>
		public static Quaternion operator - (Quaternion quaternion)
		{
			Quaternion quaternion2;
			quaternion2.X = -quaternion.X;
			quaternion2.Y = -quaternion.Y;
			quaternion2.Z = -quaternion.Z;
			quaternion2.W = -quaternion.W;
			return quaternion2;
		}
		
		/// <summary>
		/// todo
		/// </summary>
		public static Boolean operator == (Quaternion quaternion1, Quaternion quaternion2)
		{
			return ((((quaternion1.X == quaternion2.X) && (quaternion1.Y == quaternion2.Y)) && (quaternion1.Z == quaternion2.Z)) && (quaternion1.W == quaternion2.W));
		}
		
		/// <summary>
		/// todo
		/// </summary>
		public static Boolean operator != (Quaternion quaternion1, Quaternion quaternion2)
		{
			if (((quaternion1.X == quaternion2.X) && (quaternion1.Y == quaternion2.Y)) && (quaternion1.Z == quaternion2.Z)) {
				return !(quaternion1.W == quaternion2.W);
			}
			return true;
		}

		/// <summary>
		/// todo
		/// </summary>
		public static Quaternion operator + (Quaternion quaternion1, Quaternion quaternion2)
		{
			Quaternion quaternion;
			quaternion.X = quaternion1.X + quaternion2.X;
			quaternion.Y = quaternion1.Y + quaternion2.Y;
			quaternion.Z = quaternion1.Z + quaternion2.Z;
			quaternion.W = quaternion1.W + quaternion2.W;
			return quaternion;
		}
		
		/// <summary>
		/// todo
		/// </summary>
		public static Quaternion operator - (Quaternion quaternion1, Quaternion quaternion2)
		{
			Quaternion quaternion;
			quaternion.X = quaternion1.X - quaternion2.X;
			quaternion.Y = quaternion1.Y - quaternion2.Y;
			quaternion.Z = quaternion1.Z - quaternion2.Z;
			quaternion.W = quaternion1.W - quaternion2.W;
			return quaternion;
		}
		
		/// <summary>
		/// todo
		/// </summary>
		public static Quaternion operator * (Quaternion quaternion1, Quaternion quaternion2)
		{
			Quaternion quaternion;
			<#= type #> x = quaternion1.X;
			<#= type #> y = quaternion1.Y;
			<#= type #> z = quaternion1.Z;
			<#= type #> w = quaternion1.W;
			<#= type #> num4 = quaternion2.X;
			<#= type #> num3 = quaternion2.Y;
			<#= type #> num2 = quaternion2.Z;
			<#= type #> num = quaternion2.W;
			<#= type #> num12 = (y * num2) - (z * num3);
			<#= type #> num11 = (z * num4) - (x * num2);
			<#= type #> num10 = (x * num3) - (y * num4);
			<#= type #> num9 = ((x * num4) + (y * num3)) + (z * num2);
			quaternion.X = ((x * num) + (num4 * w)) + num12;
			quaternion.Y = ((y * num) + (num3 * w)) + num11;
			quaternion.Z = ((z * num) + (num2 * w)) + num10;
			quaternion.W = (w * num) - num9;
			return quaternion;
		}
		
		/// <summary>
		/// todo
		/// </summary>
		public static Quaternion operator * (Quaternion quaternion1, <#= type #> scaleFactor)
		{
			Quaternion quaternion;
			quaternion.X = quaternion1.X * scaleFactor;
			quaternion.Y = quaternion1.Y * scaleFactor;
			quaternion.Z = quaternion1.Z * scaleFactor;
			quaternion.W = quaternion1.W * scaleFactor;
			return quaternion;
		}
		
		/// <summary>
		/// todo
		/// </summary>
		public static Quaternion operator / (Quaternion quaternion1, Quaternion quaternion2)
		{
			<#= type #> one = 1;

			Quaternion quaternion;
			<#= type #> x = quaternion1.X;
			<#= type #> y = quaternion1.Y;
			<#= type #> z = quaternion1.Z;
			<#= type #> w = quaternion1.W;
			<#= type #> num14 = (((quaternion2.X * quaternion2.X) + (quaternion2.Y * quaternion2.Y)) + (quaternion2.Z * quaternion2.Z)) + (quaternion2.W * quaternion2.W);
			<#= type #> num5 = one / num14;
			<#= type #> num4 = -quaternion2.X * num5;
			<#= type #> num3 = -quaternion2.Y * num5;
			<#= type #> num2 = -quaternion2.Z * num5;
			<#= type #> num = quaternion2.W * num5;
			<#= type #> num13 = (y * num2) - (z * num3);
			<#= type #> num12 = (z * num4) - (x * num2);
			<#= type #> num11 = (x * num3) - (y * num4);
			<#= type #> num10 = ((x * num4) + (y * num3)) + (z * num2);
			quaternion.X = ((x * num) + (num4 * w)) + num13;
			quaternion.Y = ((y * num) + (num3 * w)) + num12;
			quaternion.Z = ((z * num) + (num2 * w)) + num11;
			quaternion.W = (w * num) - num10;
			return quaternion;
		}

		/// <summary>
		/// todo
		/// </summary>
		public static void Negate (ref Quaternion quaternion, out Quaternion result)
		{
			result.X = -quaternion.X;
			result.Y = -quaternion.Y;
			result.Z = -quaternion.Z;
			result.W = -quaternion.W;
		}

		/// <summary>
		/// todo
		/// </summary>
		public static void Add (ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
		{
			result.X = quaternion1.X + quaternion2.X;
			result.Y = quaternion1.Y + quaternion2.Y;
			result.Z = quaternion1.Z + quaternion2.Z;
			result.W = quaternion1.W + quaternion2.W;
		}
		
		/// <summary>
		/// todo
		/// </summary>
		public static void Subtract (ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
		{
			result.X = quaternion1.X - quaternion2.X;
			result.Y = quaternion1.Y - quaternion2.Y;
			result.Z = quaternion1.Z - quaternion2.Z;
			result.W = quaternion1.W - quaternion2.W;
		}

		/// <summary>
		/// todo
		/// </summary>
		public static void Multiply (ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
		{
			<#= type #> x = quaternion1.X;
			<#= type #> y = quaternion1.Y;
			<#= type #> z = quaternion1.Z;
			<#= type #> w = quaternion1.W;
			<#= type #> num4 = quaternion2.X;
			<#= type #> num3 = quaternion2.Y;
			<#= type #> num2 = quaternion2.Z;
			<#= type #> num = quaternion2.W;
			<#= type #> num12 = (y * num2) - (z * num3);
			<#= type #> num11 = (z * num4) - (x * num2);
			<#= type #> num10 = (x * num3) - (y * num4);
			<#= type #> num9 = ((x * num4) + (y * num3)) + (z * num2);
			result.X = ((x * num) + (num4 * w)) + num12;
			result.Y = ((y * num) + (num3 * w)) + num11;
			result.Z = ((z * num) + (num2 * w)) + num10;
			result.W = (w * num) - num9;
		}

		/// <summary>
		/// todo
		/// </summary>
		public static void Multiply (ref Quaternion quaternion1, <#= type #> scaleFactor, out Quaternion result)
		{
			result.X = quaternion1.X * scaleFactor;
			result.Y = quaternion1.Y * scaleFactor;
			result.Z = quaternion1.Z * scaleFactor;
			result.W = quaternion1.W * scaleFactor;
		}

		/// <summary>
		/// todo
		/// </summary>
		public static void Divide (ref Quaternion quaternion1, ref Quaternion quaternion2, out Quaternion result)
		{
			<#= type #> one = 1;

			<#= type #> x = quaternion1.X;
			<#= type #> y = quaternion1.Y;
			<#= type #> z = quaternion1.Z;
			<#= type #> w = quaternion1.W;
			<#= type #> num14 = (((quaternion2.X * quaternion2.X) + (quaternion2.Y * quaternion2.Y)) + (quaternion2.Z * quaternion2.Z)) + (quaternion2.W * quaternion2.W);
			<#= type #> num5 = one / num14;
			<#= type #> num4 = -quaternion2.X * num5;
			<#= type #> num3 = -quaternion2.Y * num5;
			<#= type #> num2 = -quaternion2.Z * num5;
			<#= type #> num = quaternion2.W * num5;
			<#= type #> num13 = (y * num2) - (z * num3);
			<#= type #> num12 = (z * num4) - (x * num2);
			<#= type #> num11 = (x * num3) - (y * num4);
			<#= type #> num10 = ((x * num4) + (y * num3)) + (z * num2);
			result.X = ((x * num) + (num4 * w)) + num13;
			result.Y = ((y * num) + (num3 * w)) + num12;
			result.Z = ((z * num) + (num2 * w)) + num11;
			result.W = (w * num) - num10;
		}

