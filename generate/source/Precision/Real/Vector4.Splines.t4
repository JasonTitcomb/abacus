		#region Splines

		public static void Barycentric (ref Vector4 value1, ref Vector4 value2, ref Vector4 value3, <#= type #> amount1, <#= type #> amount2, out Vector4 result)
		{
			result.X = (value1.X + (amount1 * (value2.X - value1.X))) + (amount2 * (value3.X - value1.X));
			result.Y = (value1.Y + (amount1 * (value2.Y - value1.Y))) + (amount2 * (value3.Y - value1.Y));
			result.Z = (value1.Z + (amount1 * (value2.Z - value1.Z))) + (amount2 * (value3.Z - value1.Z));
			result.W = (value1.W + (amount1 * (value2.W - value1.W))) + (amount2 * (value3.W - value1.W));
		}

		public static void SmoothStep (ref Vector4 value1, ref Vector4 value2, <#= type #> amount, out Vector4 result)
		{
			<#= type #> zero = 0;
			<#= type #> one = 1;
			<#= type #> two = 2;
			<#= type #> three = 3;

			amount = (amount > one) ? one : ((amount < zero) ? zero : amount);
			amount = (amount * amount) * (three - (two * amount));
			result.X = value1.X + ((value2.X - value1.X) * amount);
			result.Y = value1.Y + ((value2.Y - value1.Y) * amount);
			result.Z = value1.Z + ((value2.Z - value1.Z) * amount);
			result.W = value1.W + ((value2.W - value1.W) * amount);
		}

		public static void CatmullRom (ref Vector4 value1, ref Vector4 value2, ref Vector4 value3, ref Vector4 value4, <#= type #> amount, out Vector4 result)
		{
			<#= type #> half; RealMaths.Half(out half);
			<#= type #> two = 2;
			<#= type #> three = 3;
			<#= type #> four = 4;
			<#= type #> five = 5;

			<#= type #> num = amount * amount;
			<#= type #> num2 = amount * num;
			result.X = half * ((((two * value2.X) + ((-value1.X + value3.X) * amount)) + (((((two * value1.X) - (five * value2.X)) + (four * value3.X)) - value4.X) * num)) + ((((-value1.X + (three * value2.X)) - (three * value3.X)) + value4.X) * num2));
			result.Y = half * ((((two * value2.Y) + ((-value1.Y + value3.Y) * amount)) + (((((two * value1.Y) - (five * value2.Y)) + (four * value3.Y)) - value4.Y) * num)) + ((((-value1.Y + (three * value2.Y)) - (three * value3.Y)) + value4.Y) * num2));
			result.Z = half * ((((two * value2.Z) + ((-value1.Z + value3.Z) * amount)) + (((((two * value1.Z) - (five * value2.Z)) + (four * value3.Z)) - value4.Z) * num)) + ((((-value1.Z + (three * value2.Z)) - (three * value3.Z)) + value4.Z) * num2));
			result.W = half * ((((two * value2.W) + ((-value1.W + value3.W) * amount)) + (((((two * value1.W) - (five * value2.W)) + (four * value3.W)) - value4.W) * num)) + ((((-value1.W + (three * value2.W)) - (three * value3.W)) + value4.W) * num2));
		}

		public static void Hermite (ref Vector4 value1, ref Vector4 tangent1, ref Vector4 value2, ref Vector4 tangent2, <#= type #> amount, out Vector4 result)
		{
			<#= type #> one = 1;
			<#= type #> two = 2;
			<#= type #> three = 3;

			<#= type #> num = amount * amount;
			<#= type #> num6 = amount * num;
			<#= type #> num5 = ((two * num6) - (three * num)) + one;
			<#= type #> num4 = (-two * num6) + (three * num);
			<#= type #> num3 = (num6 - (two * num)) + amount;
			<#= type #> num2 = num6 - num;
			result.X = (((value1.X * num5) + (value2.X * num4)) + (tangent1.X * num3)) + (tangent2.X * num2);
			result.Y = (((value1.Y * num5) + (value2.Y * num4)) + (tangent1.Y * num3)) + (tangent2.Y * num2);
			result.Z = (((value1.Z * num5) + (value2.Z * num4)) + (tangent1.Z * num3)) + (tangent2.Z * num2);
			result.W = (((value1.W * num5) + (value2.W * num4)) + (tangent1.W * num3)) + (tangent2.W * num2);
		}
		
		#endregion

