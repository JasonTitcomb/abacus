		#region Operators

		public Boolean Equals (Vector4 other)
		{
			return ((((this.X == other.X) && (this.Y == other.Y)) && (this.Z == other.Z)) && (this.W == other.W));
		}

		public override Boolean Equals (Object obj)
		{
			Boolean flag = false;
			if (obj is Vector4) {
				flag = this.Equals ((Vector4)obj);
			}
			return flag;
		}

		public static Vector4 operator - (Vector4 value)
		{
			Vector4 vector;
			vector.X = -value.X;
			vector.Y = -value.Y;
			vector.Z = -value.Z;
			vector.W = -value.W;
			return vector;
		}
		
		public static Boolean operator == (Vector4 value1, Vector4 value2)
		{
			return ((((value1.X == value2.X) && (value1.Y == value2.Y)) && (value1.Z == value2.Z)) && (value1.W == value2.W));
		}
		
		public static Boolean operator != (Vector4 value1, Vector4 value2)
		{
			if (((value1.X == value2.X) && (value1.Y == value2.Y)) && (value1.Z == value2.Z)) {
				return !(value1.W == value2.W);
			}
			return true;
		}
		
		public static Vector4 operator + (Vector4 value1, Vector4 value2)
		{
			Vector4 vector;
			vector.X = value1.X + value2.X;
			vector.Y = value1.Y + value2.Y;
			vector.Z = value1.Z + value2.Z;
			vector.W = value1.W + value2.W;
			return vector;
		}
		
		public static Vector4 operator - (Vector4 value1, Vector4 value2)
		{
			Vector4 vector;
			vector.X = value1.X - value2.X;
			vector.Y = value1.Y - value2.Y;
			vector.Z = value1.Z - value2.Z;
			vector.W = value1.W - value2.W;
			return vector;
		}
		
		public static Vector4 operator * (Vector4 value1, Vector4 value2)
		{
			Vector4 vector;
			vector.X = value1.X * value2.X;
			vector.Y = value1.Y * value2.Y;
			vector.Z = value1.Z * value2.Z;
			vector.W = value1.W * value2.W;
			return vector;
		}
		
		public static Vector4 operator * (Vector4 value1, <#= type #> scaleFactor)
		{
			Vector4 vector;
			vector.X = value1.X * scaleFactor;
			vector.Y = value1.Y * scaleFactor;
			vector.Z = value1.Z * scaleFactor;
			vector.W = value1.W * scaleFactor;
			return vector;
		}
		
		public static Vector4 operator * (<#= type #> scaleFactor, Vector4 value1)
		{
			Vector4 vector;
			vector.X = value1.X * scaleFactor;
			vector.Y = value1.Y * scaleFactor;
			vector.Z = value1.Z * scaleFactor;
			vector.W = value1.W * scaleFactor;
			return vector;
		}
		
		public static Vector4 operator / (Vector4 value1, Vector4 value2)
		{
			Vector4 vector;
			vector.X = value1.X / value2.X;
			vector.Y = value1.Y / value2.Y;
			vector.Z = value1.Z / value2.Z;
			vector.W = value1.W / value2.W;
			return vector;
		}
		
		public static Vector4 operator / (Vector4 value1, <#= type #> divider)
		{
			<#= type #> one = 1;
			Vector4 vector;
			<#= type #> num = one / divider;
			vector.X = value1.X * num;
			vector.Y = value1.Y * num;
			vector.Z = value1.Z * num;
			vector.W = value1.W * num;
			return vector;
		}
		
		public static void Negate (ref Vector4 value, out Vector4 result)
		{
			result.X = -value.X;
			result.Y = -value.Y;
			result.Z = -value.Z;
			result.W = -value.W;
		}

		public static void Add (ref Vector4 value1, ref Vector4 value2, out Vector4 result)
		{
			result.X = value1.X + value2.X;
			result.Y = value1.Y + value2.Y;
			result.Z = value1.Z + value2.Z;
			result.W = value1.W + value2.W;
		}
		
		public static void Subtract (ref Vector4 value1, ref Vector4 value2, out Vector4 result)
		{
			result.X = value1.X - value2.X;
			result.Y = value1.Y - value2.Y;
			result.Z = value1.Z - value2.Z;
			result.W = value1.W - value2.W;
		}
		
		public static void Multiply (ref Vector4 value1, ref Vector4 value2, out Vector4 result)
		{
			result.X = value1.X * value2.X;
			result.Y = value1.Y * value2.Y;
			result.Z = value1.Z * value2.Z;
			result.W = value1.W * value2.W;
		}

		public static void Multiply (ref Vector4 value1, <#= type #> scaleFactor, out Vector4 result)
		{
			result.X = value1.X * scaleFactor;
			result.Y = value1.Y * scaleFactor;
			result.Z = value1.Z * scaleFactor;
			result.W = value1.W * scaleFactor;
		}

		public static void Divide (ref Vector4 value1, ref Vector4 value2, out Vector4 result)
		{
			result.X = value1.X / value2.X;
			result.Y = value1.Y / value2.Y;
			result.Z = value1.Z / value2.Z;
			result.W = value1.W / value2.W;
		}
		
		public static void Divide (ref Vector4 value1, <#= type #> divider, out Vector4 result)
		{
			<#= type #> one = 1;
			<#= type #> num = one / divider;
			result.X = value1.X * num;
			result.Y = value1.Y * num;
			result.Z = value1.Z * num;
			result.W = value1.W * num;
		}
		
		#endregion
