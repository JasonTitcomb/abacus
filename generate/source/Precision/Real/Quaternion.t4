	[StructLayout (LayoutKind.Sequential)]
	public partial struct Quaternion 
		: IEquatable<Quaternion>
	{
		public <#= type #> X;
		public <#= type #> Y;
		public <#= type #> Z;
		public <#= type #> W;


		public Quaternion (<#= type #> x, <#= type #> y, <#= type #> z, <#= type #> w)
		{
			this.X = x;
			this.Y = y;
			this.Z = z;
			this.W = w;
		}

		public Quaternion (Vector3 vectorPart, <#= type #> scalarPart)
		{
			this.X = vectorPart.X;
			this.Y = vectorPart.Y;
			this.Z = vectorPart.Z;
			this.W = scalarPart;
		}

		public override String ToString ()
		{
			return string.Format ("{{X:{0} Y:{1} Z:{2} W:{3}}}", new Object[] { this.X.ToString (), this.Y.ToString (), this.Z.ToString (), this.W.ToString () });
		}

		public Boolean Equals (Quaternion other)
		{
			return ((((this.X == other.X) && (this.Y == other.Y)) && (this.Z == other.Z)) && (this.W == other.W));
		}

		public override Boolean Equals (Object obj)
		{

			Boolean flag = false;
			if (obj is Quaternion)
			{
				flag = this.Equals ((Quaternion)obj);
			}
			return flag;
		}

		public override Int32 GetHashCode ()
		{
			return (((this.X.GetHashCode () + this.Y.GetHashCode ()) + this.Z.GetHashCode ()) + this.W.GetHashCode ());
		}

		public <#= type #> LengthSquared ()
		{
			return ((((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W));
		}

		public <#= type #> Length ()
		{
			<#= type #> num = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
			return RealMaths.Sqrt (num);
		}

		public void Normalise ()
		{
			<#= type #> one = 1;
			<#= type #> num2 = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
			<#= type #> num = one / RealMaths.Sqrt (num2);
			this.X *= num;
			this.Y *= num;
			this.Z *= num;
			this.W *= num;
		}

		public Boolean IsUnit()
		{
			<#= type #> one = 1;

			return RealMaths.IsZero(one - W*W - X*X - Y*Y - Z*Z);
		}

		public void Conjugate ()
		{
			this.X = -this.X;
			this.Y = -this.Y;
			this.Z = -this.Z;
		}

<#@ include file="Quaternion.Constants.t4"#>
<#@ include file="Quaternion.Create.t4"#>
<#@ include file="Quaternion.Maths.t4"#>
<#@ include file="Quaternion.Operators.t4"#>
<#@ include file="Quaternion.Utilities.t4"#>

	}