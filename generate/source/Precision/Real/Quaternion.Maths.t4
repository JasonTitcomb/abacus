		/// <summary>
		/// todo
		/// </summary>
		public static void Conjugate (ref Quaternion value, out Quaternion result)
		{
			result.X = -value.X;
			result.Y = -value.Y;
			result.Z = -value.Z;
			result.W = value.W;
		}
		
		/// <summary>
		/// todo
		/// </summary>
		public static void Inverse (ref Quaternion quaternion, out Quaternion result)
		{
			<#= type #> one = 1;
			<#= type #> num2 = ( ( (quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y) ) + 
			                (quaternion.Z * quaternion.Z) ) + (quaternion.W * quaternion.W);

			<#= type #> num = one / num2;

			result.X = -quaternion.X * num;
			result.Y = -quaternion.Y * num;
			result.Z = -quaternion.Z * num;
			result.W = quaternion.W * num;
		}
		
		/// <summary>
		/// todo
		/// </summary>
		public static void Dot (ref Quaternion quaternion1, ref Quaternion quaternion2, out <#= type #> result)
		{
			result = (((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y)) + 
			          (quaternion1.Z * quaternion2.Z)) + (quaternion1.W * quaternion2.W);
		}

		/// <summary>
		/// todo
		/// </summary>
		public static void Concatenate (ref Quaternion value1, ref Quaternion value2, out Quaternion result)
		{
			<#= type #> x = value2.X;
			<#= type #> y = value2.Y;
			<#= type #> z = value2.Z;
			<#= type #> w = value2.W;
			<#= type #> num4 = value1.X;
			<#= type #> num3 = value1.Y;
			<#= type #> num2 = value1.Z;
			<#= type #> num = value1.W;
			<#= type #> num12 = (y * num2) - (z * num3);
			<#= type #> num11 = (z * num4) - (x * num2);
			<#= type #> num10 = (x * num3) - (y * num4);
			<#= type #> num9 = ((x * num4) + (y * num3)) + (z * num2);
			result.X = ((x * num) + (num4 * w)) + num12;
			result.Y = ((y * num) + (num3 * w)) + num11;
			result.Z = ((z * num) + (num2 * w)) + num10;
			result.W = (w * num) - num9;
		}

		/// <summary>
		/// todo
		/// </summary>
		public static void Normalise (ref Quaternion quaternion, out Quaternion result)
		{
			<#= type #> one = 1;

			<#= type #> num2 = (((quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y)) + (quaternion.Z * quaternion.Z)) + (quaternion.W * quaternion.W);
			<#= type #> num = one / RealMaths.Sqrt (num2);
			result.X = quaternion.X * num;
			result.Y = quaternion.Y * num;
			result.Z = quaternion.Z * num;
			result.W = quaternion.W * num;
		}

