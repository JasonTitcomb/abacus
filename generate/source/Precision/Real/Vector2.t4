	[StructLayout (LayoutKind.Sequential)]
	public partial struct Vector2
		: IEquatable<Vector2>
	{
		public <#= type #> X;
		public <#= type #> Y;
		
		public Vector2 (Int32 x, Int32 y)
		{
			this.X = (<#= type #>) x;
			this.Y = (<#= type #>) y;
		}

		public Vector2 (<#= type #> value)
		{
			this.X = this.Y = value;
		}

		public Vector2 (<#= type #> x, <#= type #> y)
		{
			this.X = x;
			this.Y = y;
		}

		public void Set (<#= type #> x, <#= type #> y)
		{
			this.X = x;
			this.Y = y;
		}

		public <#= type #> Length ()
		{
			<#= type #> num = (this.X * this.X) + (this.Y * this.Y);
			return RealMaths.Sqrt (num);
		}

		public <#= type #> LengthSquared ()
		{
			return ((this.X * this.X) + (this.Y * this.Y));
		}

		public void Normalise ()
		{
			<#= type #> num2 = (this.X * this.X) + (this.Y * this.Y);

			<#= type #> one = 1;
			<#= type #> num = one / (RealMaths.Sqrt (num2));
			this.X *= num;
			this.Y *= num;
		}

		public override String ToString ()
		{
			return string.Format ("{{X:{0} Y:{1}}}", new Object[] { this.X.ToString (), this.Y.ToString () });
		}

		public override Boolean Equals (Object obj)
		{
			Boolean flag = false;
			if (obj is Vector2) {
				flag = this.Equals ((Vector2)obj);
			}
			return flag;
		}
		
		public override Int32 GetHashCode ()
		{
			return (this.X.GetHashCode () + this.Y.GetHashCode ());
		}

		public Boolean IsUnit()
		{
			<#= type #> one = 1;

			return RealMaths.IsZero(one - X*X - Y*Y);
		}

		#region IEquatable<Vector2>
		public Boolean Equals (Vector2 other)
		{
			return ((this.X == other.X) && (this.Y == other.Y));
		}
		#endregion

<#@ include file="Vector2.Constants.t4"#>
<#@ include file="Vector2.Maths.t4"#>
<#@ include file="Vector2.Operators.t4"#>
<#@ include file="Vector2.Splines.t4"#>
<#@ include file="Vector2.Utilities.t4"#>

	}
