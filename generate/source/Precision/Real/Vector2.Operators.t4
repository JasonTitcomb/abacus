		// Equality Operators //----------------------------------------------//

		/// <summary>
		///
		/// </summary>
		public override Boolean Equals (Object obj)
		{
			Boolean flag = false;
			if (obj is Vector2) {
				flag = this.Equals ((Vector2)obj);
			}
			return flag;
		}

		#region IEquatable<Vector2>

		/// <summary>
		///
		/// </summary>
		public Boolean Equals (Vector2 other)
		{
			return ((this.X == other.X) && (this.Y == other.Y));
		}

		#endregion

		/// <summary>
		///
		/// </summary>
		public static Boolean operator == (Vector2 value1, Vector2 value2)
		{
			return ((value1.X == value2.X) && (value1.Y == value2.Y));
		}

		/// <summary>
		///
		/// </summary>
		public static Boolean operator != (Vector2 value1, Vector2 value2)
		{
			if (value1.X == value2.X) {
				return !(value1.Y == value2.Y);
			}
			return true;
		}

		// Addition Operators //----------------------------------------------//

		/// <summary>
		///
		/// </summary>
		public static void Add (
			ref Vector2 value1, ref Vector2 value2, out Vector2 result)
		{
			result.X = value1.X + value2.X;
			result.Y = value1.Y + value2.Y;
		}

		/// <summary>
		///
		/// </summary>
		public static Vector2 operator + (Vector2 value1, Vector2 value2)
		{
			Vector2 vector;
			vector.X = value1.X + value2.X;
			vector.Y = value1.Y + value2.Y;
			return vector;
		}


		// Subtraction Operators //-------------------------------------------//

		/// <summary>
		///
		/// </summary>
		public static void Subtract (
			ref Vector2 value1, ref Vector2 value2, out Vector2 result)
		{
			result.X = value1.X - value2.X;
			result.Y = value1.Y - value2.Y;
		}

		/// <summary>
		///
		/// </summary>
		public static Vector2 operator - (Vector2 value1, Vector2 value2)
		{
			Vector2 vector;
			vector.X = value1.X - value2.X;
			vector.Y = value1.Y - value2.Y;
			return vector;
		}


		// Negation Operators //----------------------------------------------//
		
		/// <summary>
		///
		/// </summary>
		public static void Negate (ref Vector2 value, out Vector2 result)
		{
			result.X = -value.X;
			result.Y = -value.Y;
		}

		/// <summary>
		///
		/// </summary>
		public static Vector2 operator - (Vector2 value)
		{
			Vector2 vector;
			vector.X = -value.X;
			vector.Y = -value.Y;
			return vector;
		}

		// Multiplication Operators //----------------------------------------//

		/// <summary>
		///
		/// </summary>
		public static void Multiply (
			ref Vector2 value1, ref Vector2 value2, out Vector2 result)
		{
			result.X = value1.X * value2.X;
			result.Y = value1.Y * value2.Y;
		}

		/// <summary>
		///
		/// </summary>
		public static void Multiply (
			ref Vector2 value1, <#= type #> scaleFactor, out Vector2 result)
		{
			result.X = value1.X * scaleFactor;
			result.Y = value1.Y * scaleFactor;
		}

		/// <summary>
		///
		/// </summary>
		public static Vector2 operator * (
			<#= type #> scaleFactor, Vector2 value)
		{
			Vector2 vector;
			vector.X = value.X * scaleFactor;
			vector.Y = value.Y * scaleFactor;
			return vector;
		}

		/// <summary>
		///
		/// </summary>
		public static Vector2 operator * (
			Vector2 value1, Vector2 value2)
		{
			Vector2 vector;
			vector.X = value1.X * value2.X;
			vector.Y = value1.Y * value2.Y;
			return vector;
		}

		/// <summary>
		///
		/// </summary>		
		public static Vector2 operator * (
			Vector2 value, <#= type #> scaleFactor)
		{
			Vector2 vector;
			vector.X = value.X * scaleFactor;
			vector.Y = value.Y * scaleFactor;
			return vector;
		}

		// Division Operators //----------------------------------------------//

		/// <summary>
		///
		/// </summary>
		public static void Divide (
			ref Vector2 value1, ref Vector2 value2, out Vector2 result)
		{
			result.X = value1.X / value2.X;
			result.Y = value1.Y / value2.Y;
		}

		/// <summary>
		///
		/// </summary>
		public static void Divide (
			ref Vector2 value1, <#= type #> divider, out Vector2 result)
		{
			<#= type #> one = 1;
			<#= type #> num = one / divider;
			result.X = value1.X * num;
			result.Y = value1.Y * num;
		}

		/// <summary>
		///
		/// </summary>
		public static Vector2 operator / (Vector2 value1, Vector2 value2)
		{
			Vector2 vector;
			vector.X = value1.X / value2.X;
			vector.Y = value1.Y / value2.Y;
			return vector;
		}

		/// <summary>
		///
		/// </summary>
		public static Vector2 operator / (Vector2 value1, <#= type #> divider)
		{
			Vector2 vector;
			<#= type #> one = 1;
			<#= type #> num = one / divider;
			vector.X = value1.X * num;
			vector.Y = value1.Y * num;
			return vector;
		}
		
