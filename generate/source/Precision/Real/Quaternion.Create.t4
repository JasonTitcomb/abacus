		#region Create

		public static void CreateFromAxisAngle (ref Vector3 axis, <#= type #> angle, out Quaternion result)
		{
			<#= type #> half; RealMaths.Half(out half);
			<#= type #> theta = angle * half;

			<#= type #> sin = RealMaths.Sin (theta);
			<#= type #> cos = RealMaths.Cos (theta);

			result.X = axis.X * sin;
			result.Y = axis.Y * sin;
			result.Z = axis.Z * sin;

			result.W = cos;
		}
		
		public static void CreateFromYawPitchRoll (<#= type #> yaw, <#= type #> pitch, <#= type #> roll, out Quaternion result)
		{
			<#= type #> half; RealMaths.Half(out half);
			<#= type #> num9 = roll * half;

			<#= type #> num6 = RealMaths.Sin (num9);
			<#= type #> num5 = RealMaths.Cos (num9);

			<#= type #> num8 = pitch * half;

			<#= type #> num4 = RealMaths.Sin (num8);
			<#= type #> num3 = RealMaths.Cos (num8);

			<#= type #> num7 = yaw * half;

			<#= type #> num2 = RealMaths.Sin (num7);
			<#= type #> num = RealMaths.Cos (num7);

			result.X = ((num * num4) * num5) + ((num2 * num3) * num6);
			result.Y = ((num2 * num3) * num5) - ((num * num4) * num6);
			result.Z = ((num * num3) * num6) - ((num2 * num4) * num5);
			result.W = ((num * num3) * num5) + ((num2 * num4) * num6);
		}
		
		public static void CreateFromRotationMatrix (ref Matrix44 matrix, out Quaternion result)
		{
			<#= type #> zero = 0;
			<#= type #> half; RealMaths.Half(out half);
			<#= type #> one = 1;

			<#= type #> num8 = (matrix.M11 + matrix.M22) + matrix.M33;

			if (num8 > zero)
			{
				<#= type #> num = RealMaths.Sqrt (num8 + one);
				result.W = num * half;
				num = half / num;
				result.X = (matrix.M23 - matrix.M32) * num;
				result.Y = (matrix.M31 - matrix.M13) * num;
				result.Z = (matrix.M12 - matrix.M21) * num;
			}
			else if ((matrix.M11 >= matrix.M22) && (matrix.M11 >= matrix.M33))
			{
				<#= type #> num7 = RealMaths.Sqrt (((one + matrix.M11) - matrix.M22) - matrix.M33);
				<#= type #> num4 = half / num7;
				result.X = half * num7;
				result.Y = (matrix.M12 + matrix.M21) * num4;
				result.Z = (matrix.M13 + matrix.M31) * num4;
				result.W = (matrix.M23 - matrix.M32) * num4;
			}
			else if (matrix.M22 > matrix.M33)
			{
				<#= type #> num6 =RealMaths.Sqrt (((one + matrix.M22) - matrix.M11) - matrix.M33);
				<#= type #> num3 = half / num6;
				result.X = (matrix.M21 + matrix.M12) * num3;
				result.Y = half * num6;
				result.Z = (matrix.M32 + matrix.M23) * num3;
				result.W = (matrix.M31 - matrix.M13) * num3;
			}
			else
			{
				<#= type #> num5 = RealMaths.Sqrt (((one + matrix.M33) - matrix.M11) - matrix.M22);
				<#= type #> num2 = half / num5;
				result.X = (matrix.M31 + matrix.M13) * num2;
				result.Y = (matrix.M32 + matrix.M23) * num2;
				result.Z = half * num5;
				result.W = (matrix.M12 - matrix.M21) * num2;
			}
		}
		
		#endregion
