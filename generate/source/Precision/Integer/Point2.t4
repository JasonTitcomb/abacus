	[StructLayout (LayoutKind.Sequential)]
	public struct Point2 
		: IEquatable<Point2>
	{
		public <#= type #> X;
		public <#= type #> Y;

		public Point2 (<#= type #> x, <#= type #> y)
		{
			this.X = x;
			this.Y = y;
		}

		public Boolean Equals (Point2 other)
		{
			return ((this.X == other.X) && (this.Y == other.Y));
		}

		public override Boolean Equals (Object obj)
		{
			Boolean flag = false;

			if (obj is Point2)
			{
				flag = this.Equals ((Point2)obj);
			}

			return flag;
		}

		public override Int32 GetHashCode ()
		{
			return (this.X.GetHashCode () + this.Y.GetHashCode ());
		}

		public override String ToString ()
		{
			return String.Format ("{{X:{0} Y:{1}}}", this.X, this.Y );
		}
		
		static Point2 zero;
		
		public static Point2 Zero
		{
			get
			{
				return zero;
			}
		}
		
		static Point2 ()
		{
			zero = new Point2 ();
		}

		public static Boolean operator == (Point2 a, Point2 b)
		{
			return a.Equals (b);
		}

		public static Boolean operator != (Point2 a, Point2 b)
		{
			if (a.X == b.X)
			{
				return (a.Y != b.Y);
			}

			return true;
		}	
	}
