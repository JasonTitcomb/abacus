	/// <summary>
	/// Represents a point on a 2D integer grid.
	/// </summary>
	[StructLayout (LayoutKind.Sequential)]
	public struct Point2 
		: IEquatable<Point2>
	{
		/// <summary>
		/// Gets or sets the x-component of the point.
		/// </summary>
		public <#= type #> X;

		/// <summary>
		/// Gets or sets the y-component of the point.
		/// </summary>
		public <#= type #> Y;

		/// <summary>
		/// Initilises a new instance of Point2 from two <#= type #> values 
		/// representing X and Y respectively.
		/// </summary>
		public Point2 (<#= type #> x, <#= type #> y)
		{
			this.X = x;
			this.Y = y;
		}

		/// <summary>
		/// Retrieves a string representation of the current object.
		/// </summary>
		public override String ToString ()
		{
			return String.Format ("{{X:{0} Y:{1}}}", this.X, this.Y );
		}

		/// <summary>
		/// Gets the hash code of the object.
		/// </summary>
		public override Int32 GetHashCode ()
		{
			return (this.X.GetHashCode () + this.Y.GetHashCode ());
		}

<#@ include file="Point2.Constants.t4"#>
<#@ include file="Point2.Operators.t4"#>
	}

