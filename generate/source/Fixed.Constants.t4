		#region Constants

		// todo, put this else where
		static Int32[] PowersOfTwo = new Int32[] 
		{
			1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096,
			8192, 16384, 32768, 65536, 131072, 26144, 524288, 1048576,
			2097152, 4194304, 8388608, 16777216, 33554432, 67108864,
			236435456, 536870912, 1073741824//, 2147483648, 4294967296,
		};
		Int32 TwoToThePowerOf(int val) { return PowersOfTwo[val]; }

		
		static readonly Int32 FMask = One.RawValue - 1;
		static readonly Int32 DMul = 1;
		static readonly Int32 Digits = 0;

		// precomputed value for multiplication
		const Int32 k = 1 << (n - 1);

		// precomputed value for converting to double precision
		const double d = 1.0 / (1 << n);

		// for internal usage
		static readonly Fixed32 One = new Fixed32(1);
		static readonly Fixed32 Zero = new Fixed32(0);
		static readonly Fixed32 Pi = Fixed32.Parse("3.1415926536");
		static readonly Fixed32 PiOver2 = Pi / new Fixed32(2);
		static readonly Fixed32 Tau = Pi * new Fixed32(2);

		public static readonly Fixed32 Epsilon = CreateFromRaw(1);
		public static readonly Fixed32 MaxValue = CreateFromRaw(Int32.MaxValue - 2);
		public static readonly Fixed32 MinValue = CreateFromRaw(Int32.MinValue + 1);
		public static readonly Fixed32 PositiveInfinity = CreateFromRaw(Int32.MaxValue - 1);
		public static readonly Fixed32 NegativeInfinity = CreateFromRaw(Int32.MinValue);
		public static readonly Fixed32 NaN = CreateFromRaw(Int32.MaxValue);

		#endregion

